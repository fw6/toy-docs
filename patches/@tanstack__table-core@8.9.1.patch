diff --git a/build/lib/core/table.d.ts b/build/lib/core/table.d.ts
index b2471a9819f4d446e9e0fe41df96e4ec65886936..88a789be1b9729359a5cda4b7084ff4a8cd31182 100644
--- a/build/lib/core/table.d.ts
+++ b/build/lib/core/table.d.ts
@@ -1,5 +1,5 @@
 import { RequiredKeys } from '../utils';
-import { Updater, TableOptionsResolved, TableState, Table, InitialTableState, Row, Column, RowModel, ColumnDef, TableOptions, RowData, TableMeta } from '../types';
+import { Column, ColumnDef, InitialTableState, Row, RowData, RowModel, Table, TableMeta, TableOptions, TableOptionsResolved, TableState, Updater } from '../types';
 export interface TableFeature {
     getDefaultOptions?: (table: any) => any;
     getInitialState?: (initialState?: InitialTableState) => any;
@@ -31,6 +31,7 @@ export interface CoreOptions<TData extends RowData> {
     columns: ColumnDef<TData, any>[];
     defaultColumn?: Partial<ColumnDef<TData, unknown>>;
     renderFallbackValue: any;
+    features?: TableFeature[];
 }
 export interface CoreInstance<TData extends RowData> {
     initialState: TableState;
diff --git a/build/lib/core/table.js b/build/lib/core/table.js
index a382a2d55a53edbf75d0c23f54d6db6e966de90e..f38da752f9409bca466a8c589f283e0fa838b864 100644
--- a/build/lib/core/table.js
+++ b/build/lib/core/table.js
@@ -36,7 +36,7 @@ function createTable(options) {
     console.info('Creating Table Instance...');
   }
   let table = {
-    _features: features
+    _features: [...features, ...(options.features || [])]
   };
   const defaultOptions = table._features.reduce((obj, feature) => {
     return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));
@@ -62,7 +62,7 @@ function createTable(options) {
   const queued = [];
   let queuedTimeout = false;
   const coreInstance = {
-    _features: features,
+    _features: table._features,
     options: {
       ...defaultOptions,
       ...options
diff --git a/build/lib/core/table.js.map b/build/lib/core/table.js.map
index aef79ecb204f6778ce3377452e3e206e8e3bb777..2ab0a1ff292ec5604ca5bc013a4db884175d65bc 100644
--- a/build/lib/core/table.js.map
+++ b/build/lib/core/table.js.map
@@ -1 +1 @@
-{"version":3,"file":"table.js","sources":["../../../src/core/table.ts"],"sourcesContent":["import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n"],"names":["features","Headers","Visibility","Ordering","Pinning","Filters","Sorting","Grouping","Expanding","Pagination","RowSelection","ColumnSizing","createTable","options","_options$initialState","debugAll","debugTable","console","info","table","_features","defaultOptions","reduce","obj","feature","Object","assign","getDefaultOptions","mergeOptions","coreInitialState","initialState","forEach","_feature$getInitialSt","getInitialState","queued","queuedTimeout","coreInstance","_queue","cb","push","Promise","resolve","then","length","shift","catch","error","setTimeout","reset","setState","setOptions","updater","newOptions","functionalUpdate","getState","state","onStateChange","_getRowId","row","index","parent","_table$options$getRow","getRowId","id","join","getCoreRowModel","_getCoreRowModel","getRowModel","getPaginationRowModel","getRow","rowsById","process","env","NODE_ENV","Error","_getDefaultColumnDef","memo","defaultColumn","_defaultColumn","header","props","resolvedColumnDef","column","columnDef","accessorKey","accessorFn","cell","_props$renderValue$to","_props$renderValue","renderValue","toString","getDefaultColumnDef","debug","_table$options$debugA","debugColumns","key","_getColumnDefs","columns","getAllColumns","columnDefs","recurseColumns","depth","map","createColumn","groupingColumnDef","_table$options$debugA2","getAllFlatColumns","allColumns","flatMap","getFlatColumns","_table$options$debugA3","_getAllFlatColumnsById","flatColumns","acc","_table$options$debugA4","getAllLeafColumns","_getOrderColumnsFn","orderColumns","leafColumns","getLeafColumns","_table$options$debugA5","getColumn","columnId"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"table.js","sources":["../../../src/core/table.ts"],"sourcesContent":["import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Column,\n  ColumnDef,\n  ColumnDefResolved,\n  GroupColumnDef,\n  InitialTableState,\n  Row,\n  RowData,\n  RowModel,\n  Table,\n  TableMeta,\n  TableOptions,\n  TableOptionsResolved,\n  TableState,\n  Updater,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n  features?: TableFeature[]\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = {\n    _features: [...features, ...(options.features || [])],\n  } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: table._features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n"],"names":["features","Headers","Visibility","Ordering","Pinning","Filters","Sorting","Grouping","Expanding","Pagination","RowSelection","ColumnSizing","createTable","options","_options$initialState","debugAll","debugTable","console","info","table","_features","defaultOptions","reduce","obj","feature","Object","assign","getDefaultOptions","mergeOptions","coreInitialState","initialState","forEach","_feature$getInitialSt","getInitialState","queued","queuedTimeout","coreInstance","_queue","cb","push","Promise","resolve","then","length","shift","catch","error","setTimeout","reset","setState","setOptions","updater","newOptions","functionalUpdate","getState","state","onStateChange","_getRowId","row","index","parent","_table$options$getRow","getRowId","id","join","getCoreRowModel","_getCoreRowModel","getRowModel","getPaginationRowModel","getRow","rowsById","process","env","NODE_ENV","Error","_getDefaultColumnDef","memo","defaultColumn","_defaultColumn","header","props","resolvedColumnDef","column","columnDef","accessorKey","accessorFn","cell","_props$renderValue$to","_props$renderValue","renderValue","toString","getDefaultColumnDef","debug","_table$options$debugA","debugColumns","key","_getColumnDefs","columns","getAllColumns","columnDefs","recurseColumns","depth","map","createColumn","groupingColumnDef","_table$options$debugA2","getAllFlatColumns","allColumns","flatMap","getFlatColumns","_table$options$debugA3","_getAllFlatColumnsById","flatColumns","acc","_table$options$debugA4","getAllLeafColumns","_getOrderColumnsFn","orderColumns","leafColumns","getLeafColumns","_table$options$debugA5","getColumn","columnId"],"mappings":"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"}
\ No newline at end of file
diff --git a/build/lib/index.esm.js b/build/lib/index.esm.js
index 8483c53969551de4d18412438658b00e7b67b46d..7b598f9fa8e631312f43f2c4679f63a3cca86bc7 100644
--- a/build/lib/index.esm.js
+++ b/build/lib/index.esm.js
@@ -2618,7 +2618,7 @@ function createTable(options) {
     console.info('Creating Table Instance...');
   }
   let table = {
-    _features: features
+    _features: [...features, ...(options.features || [])]
   };
   const defaultOptions = table._features.reduce((obj, feature) => {
     return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));
@@ -2644,7 +2644,7 @@ function createTable(options) {
   const queued = [];
   let queuedTimeout = false;
   const coreInstance = {
-    _features: features,
+    _features: table._features,
     options: {
       ...defaultOptions,
       ...options
diff --git a/build/lib/index.esm.js.map b/build/lib/index.esm.js.map
index 0a0558af5722344323cba6a71cd318f9ec04ec96..f56c903504296e1671ac903a207abb875c514349 100644
--- a/build/lib/index.esm.js.map
+++ b/build/lib/index.esm.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.esm.js","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/table.ts","../../src/core/cell.ts","../../src/core/row.ts","../../src/columnHelper.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getSortedRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getExpandedRowModel.ts","../../src/utils/getPaginationRowModel.ts"],"sourcesContent":["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function isNumberArray(d: any): d is number[] {\n  return Array.isArray(d) && d.every(val => typeof val === 'number')\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column?.getCanResize()\n\n        return (e: unknown) => {\n          if (!column || !canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const newColumnSizing: ColumnSizingState = {}\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table\n          .getPrePaginationRowModel()\n          .flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(\n    row\n      .getValue<string | null>(columnId)\n      ?.toString()\n      ?.toLowerCase()\n      ?.includes(search)\n  )\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(\n    row.getValue<string | null>(columnId)?.toString()?.includes(filterValue)\n  )\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string | null>(columnId)?.toString()?.toLowerCase() ===\n    filterValue?.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          // @ts-ignore \n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\nimport { isNumberArray } from './utils'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  const values = leafRows.map(row => row.getValue(columnId))\n  if (!isNumberArray(values)) {\n    return\n  }\n  if (values.length === 1) {\n    return values[0]\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = values.sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1]! + nums[mid]!) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n  getGroupingValue?: (row: TData) => any\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  getGroupingValue: (columnId: string) => unknown\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      getGroupingValue: columnId => {\n        if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n          return row._groupingValuesCache[columnId]\n        }\n\n        const column = table.getColumn(columnId)\n\n        if (!column?.columnDef.getGroupingValue) {\n          return row.getValue(columnId)\n        }\n\n        row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(\n          row.original\n        )\n\n        return row._groupingValuesCache[columnId]\n      },\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table\n          .getPaginationRowModel()\n          .flatRows.filter(row => row.getCanSelect())\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows\n              .filter(row => row.getCanSelect())\n              .some(d => d.getIsSelected() || d.getIsSomeSelected())\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  parentId?: string\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n  getParentRow: () => Row<TData> | undefined\n  getParentRows: () => Row<TData>[]\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[],\n  parentId?: string\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => (row.parentId ? table.getRow(row.parentId) : undefined),\n    getParentRows: () => {\n      let parentRows: Row<TData>[] = []\n      let currentRow = row\n      while (true) {\n        const parentRow = currentRow.getParentRow()\n        if (!parentRow) break\n        parentRows.push(parentRow)\n        currentRow = parentRow\n      }\n      return parentRows.reverse()\n    },\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parentRow?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parentRow),\n              originalRows[i]!,\n              i,\n              depth,\n              undefined,\n              parentRow?.id\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        undefined,\n        row.parentId\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows: Row<TData>[] = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth,\n            undefined,\n            row.parentId\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            return\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return new Map()\n\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return undefined\n\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if (!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id)\n              }\n\n              return row\n            })\n          }\n\n          const columnId: string = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth,\n                undefined,\n                parentId\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column?.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0)\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","noop","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","isNumberArray","Array","isArray","every","val","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","deps","result","depTime","debug","Date","now","newDeps","depsChanged","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","_ref","_resolvedColumnDef$id","defaultColumn","_getDefaultColumnDef","resolvedColumnDef","accessorKey","id","replace","undefined","header","accessorFn","includes","originalRow","split","_result","process","env","NODE_ENV","warn","Error","column","columns","getFlatColumns","_column$columns","flatMap","_table$options$debugA","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_table$options$debugA2","_features","reduce","obj","feature","Object","assign","createHeader","_options$id","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","_left$map$filter","_right$map$filter","leftColumns","columnId","find","filter","Boolean","rightColumns","centerColumns","headerGroups","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","_left$map$filter2","orderedLeafColumns","_table$options$debugA3","getRightHeaderGroups","_right$map$filter2","_table$options$debugA4","getFooterGroups","reverse","_table$options$debugA5","getLeftFooterGroups","_table$options$debugA6","getCenterFooterGroups","_table$options$debugA7","getRightFooterGroups","_table$options$debugA8","getFlatHeaders","headers","_table$options$debugA9","getLeftFlatHeaders","_table$options$debugA10","getCenterFlatHeaders","_table$options$debugA11","getRightFlatHeaders","_table$options$debugA12","getCenterLeafHeaders","flatHeaders","_header$subHeaders","_table$options$debugA13","getLeftLeafHeaders","_header$subHeaders2","_table$options$debugA14","getRightLeafHeaders","_header$subHeaders3","_table$options$debugA15","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","getDefaultColumnSizingInfoState","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","_column$columnDef$min","_column$columnDef$max","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","_column$columnDef$ena","_table$options$enable","enableResizing","enableColumnResizing","getIsResizing","sum","_header$column$getSiz","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","newColumnSizing","updateOffset","eventType","clientXPos","setColumnSizingInfo","_old$startOffset","_old$startSize","_ref3","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","_e$touches$","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","_table$initialState$c","initialState","resetHeaderSizeInfo","_table$initialState$c2","getTotalSize","_table$getHeaderGroup","_table$getHeaderGroup2","getLeftTotalSize","_table$getLeftHeaderG","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader","_table$getRightHeader2","passiveSupported","supported","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_table$options$autoRe","_queue","autoResetAll","autoResetExpanded","manualExpanding","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState$e","_table$initialState","getCanSomeRowsExpand","getPrePaginationRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getRowModel","getIsExpanded","getExpandedDepth","rowIds","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","getIsRowExpanded","_table$options$getRow","_row$subRows","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","_row$getValue","_row$getValue$toStrin","_row$getValue$toStrin2","search","toLowerCase","getValue","toString","autoRemove","testFalsey","includesStringSensitive","_row$getValue2","_row$getValue2$toStri","equalsString","_row$getValue3","_row$getValue3$toStri","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","maxLeafRowFilterDepth","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","_table$getCoreRowMode2","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","getFilterFn","_table$options$filter","_table$options$filter2","getCanFilter","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","_table$getState$colum4","setFilterValue","setColumnFilters","previousfilter","newFilter","shouldAutoRemoveFilter","_old$filter","newFilterObj","_old$map","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter3","_table$options$filter4","getAllLeafColumns","updateFn","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","mid","floor","nums","sort","a","b","unique","from","Set","uniqueCount","_columnId","aggregationFns","Grouping","aggregatedCell","props","_toString","_props$getValue","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","_table$options$aggreg","_table$options$aggreg2","resetGrouping","_table$initialState$g","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","getGroupingValue","_groupingValuesCache","hasOwnProperty","original","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","groupingColumns","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","defaultPageIndex","defaultPageSize","getDefaultPaginationState","pageIndex","pageSize","Pagination","pagination","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","safeUpdater","newState","resetPagination","_table$initialState$p","setPageIndex","maxPageIndex","pageCount","_table$initialState$p2","_table$initialState$p3","resetPageSize","_table$initialState$p4","_table$initialState2","_table$initialState2$","setPageSize","topRowIndex","setPageCount","_table$options$pageCo","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPaginationRowModel","_getPaginationRowModel","_table$options$pageCo2","ceil","rows","getDefaultPinningState","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","getCanPin","_d$columnDef$enablePi","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","cells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","_table$initialState$r","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","_selection$row$id","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","alphanumeric","rowA","rowB","compareAlphanumeric","alphanumericCaseSensitive","text","compareBasic","textCaseSensitive","datetime","basic","aStr","bStr","aa","bb","an","parseInt","bn","combo","sortingFns","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","_table$options$sortin","_table$options$sortin2","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","newSorting","sortAction","nextDesc","getCanMultiSort","_table$options$maxMul","maxMultiSortColCount","getFirstSortDir","_column$columnDef$sor","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","_table$getState$sorti","columnSort","getSortIndex","_table$getState$sorti2","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","_table$initialState$s","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","_options$initialState","defaultOptions","mergeOptions","coreInitialState","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","_defaultColumn","_props$renderValue$to","_props$renderValue","renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","acc","getRenderValue","_cell$getValue","renderFallbackValue","rowIndex","parentId","_valuesCache","_uniqueValuesCache","getUniqueValues","getLeafRows","getParentRow","getParentRows","parentRows","currentRow","parentRow","createColumnHelper","accessor","display","group","data","accessRows","originalRows","getSubRows","_row$originalSubRows","originalSubRows","filterRows","filterRowImpl","filterRowModelFromLeafs","filterRowModelFromRoot","rowsToFilter","filterRow","_table$options$maxLea","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","_table$options$maxLea2","pass","resolvedColumnFilters","resolvedGlobalFilters","_filterFn$resolveFilt","filterableIds","globallyFilterableColumns","_globalFilterFn$resol","currentColumnFilter","currentGlobalFilter","j","filterMeta","__global__","filterRowsImpl","preRowModel","_table$getColumn","facetedRowModel","facetedUniqueValues","has","_facetedUniqueValues$","set","get","_facetedRowModel$flat","firstValue","facetedMinMaxValues","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","_sortEntry$desc","columnInfo","isDesc","aValue","bValue","aUndefined","bUndefined","sortInt","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","rowGroupsMap","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","_groupedRows$0$getVal","aggregateFn","groupMap","resKey","previous","expandRows","expandedRows","handleRow","pageStart","pageEnd","paginatedRowModel"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"index.esm.js","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/table.ts","../../src/core/cell.ts","../../src/core/row.ts","../../src/columnHelper.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getSortedRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getExpandedRowModel.ts","../../src/utils/getPaginationRowModel.ts"],"sourcesContent":["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function isNumberArray(d: any): d is number[] {\n  return Array.isArray(d) && d.every(val => typeof val === 'number')\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column?.getCanResize()\n\n        return (e: unknown) => {\n          if (!column || !canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const newColumnSizing: ColumnSizingState = {}\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table\n          .getPrePaginationRowModel()\n          .flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(\n    row\n      .getValue<string | null>(columnId)\n      ?.toString()\n      ?.toLowerCase()\n      ?.includes(search)\n  )\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(\n    row.getValue<string | null>(columnId)?.toString()?.includes(filterValue)\n  )\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string | null>(columnId)?.toString()?.toLowerCase() ===\n    filterValue?.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          // @ts-ignore \n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\nimport { isNumberArray } from './utils'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  const values = leafRows.map(row => row.getValue(columnId))\n  if (!isNumberArray(values)) {\n    return\n  }\n  if (values.length === 1) {\n    return values[0]\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = values.sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1]! + nums[mid]!) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n  getGroupingValue?: (row: TData) => any\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  getGroupingValue: (columnId: string) => unknown\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      getGroupingValue: columnId => {\n        if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n          return row._groupingValuesCache[columnId]\n        }\n\n        const column = table.getColumn(columnId)\n\n        if (!column?.columnDef.getGroupingValue) {\n          return row.getValue(columnId)\n        }\n\n        row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(\n          row.original\n        )\n\n        return row._groupingValuesCache[columnId]\n      },\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table\n          .getPaginationRowModel()\n          .flatRows.filter(row => row.getCanSelect())\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows\n              .filter(row => row.getCanSelect())\n              .some(d => d.getIsSelected() || d.getIsSomeSelected())\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Column,\n  ColumnDef,\n  ColumnDefResolved,\n  GroupColumnDef,\n  InitialTableState,\n  Row,\n  RowData,\n  RowModel,\n  Table,\n  TableMeta,\n  TableOptions,\n  TableOptionsResolved,\n  TableState,\n  Updater,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n  features?: TableFeature[]\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = {\n    _features: [...features, ...(options.features || [])],\n  } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: table._features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  parentId?: string\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n  getParentRow: () => Row<TData> | undefined\n  getParentRows: () => Row<TData>[]\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[],\n  parentId?: string\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => (row.parentId ? table.getRow(row.parentId) : undefined),\n    getParentRows: () => {\n      let parentRows: Row<TData>[] = []\n      let currentRow = row\n      while (true) {\n        const parentRow = currentRow.getParentRow()\n        if (!parentRow) break\n        parentRows.push(parentRow)\n        currentRow = parentRow\n      }\n      return parentRows.reverse()\n    },\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parentRow?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parentRow),\n              originalRows[i]!,\n              i,\n              depth,\n              undefined,\n              parentRow?.id\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        undefined,\n        row.parentId\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows: Row<TData>[] = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth,\n            undefined,\n            row.parentId\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            return\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return new Map()\n\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return undefined\n\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if (!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id)\n              }\n\n              return row\n            })\n          }\n\n          const columnId: string = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth,\n                undefined,\n                parentId\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column?.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0)\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","noop","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","isNumberArray","Array","isArray","every","val","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","deps","result","depTime","debug","Date","now","newDeps","depsChanged","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","_ref","_resolvedColumnDef$id","defaultColumn","_getDefaultColumnDef","resolvedColumnDef","accessorKey","id","replace","undefined","header","accessorFn","includes","originalRow","split","_result","process","env","NODE_ENV","warn","Error","column","columns","getFlatColumns","_column$columns","flatMap","_table$options$debugA","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_table$options$debugA2","_features","reduce","obj","feature","Object","assign","createHeader","_options$id","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","_left$map$filter","_right$map$filter","leftColumns","columnId","find","filter","Boolean","rightColumns","centerColumns","headerGroups","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","_left$map$filter2","orderedLeafColumns","_table$options$debugA3","getRightHeaderGroups","_right$map$filter2","_table$options$debugA4","getFooterGroups","reverse","_table$options$debugA5","getLeftFooterGroups","_table$options$debugA6","getCenterFooterGroups","_table$options$debugA7","getRightFooterGroups","_table$options$debugA8","getFlatHeaders","headers","_table$options$debugA9","getLeftFlatHeaders","_table$options$debugA10","getCenterFlatHeaders","_table$options$debugA11","getRightFlatHeaders","_table$options$debugA12","getCenterLeafHeaders","flatHeaders","_header$subHeaders","_table$options$debugA13","getLeftLeafHeaders","_header$subHeaders2","_table$options$debugA14","getRightLeafHeaders","_header$subHeaders3","_table$options$debugA15","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","getDefaultColumnSizingInfoState","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","_column$columnDef$min","_column$columnDef$max","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","_column$columnDef$ena","_table$options$enable","enableResizing","enableColumnResizing","getIsResizing","sum","_header$column$getSiz","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","newColumnSizing","updateOffset","eventType","clientXPos","setColumnSizingInfo","_old$startOffset","_old$startSize","_ref3","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","_e$touches$","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","_table$initialState$c","initialState","resetHeaderSizeInfo","_table$initialState$c2","getTotalSize","_table$getHeaderGroup","_table$getHeaderGroup2","getLeftTotalSize","_table$getLeftHeaderG","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader","_table$getRightHeader2","passiveSupported","supported","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_table$options$autoRe","_queue","autoResetAll","autoResetExpanded","manualExpanding","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState$e","_table$initialState","getCanSomeRowsExpand","getPrePaginationRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getRowModel","getIsExpanded","getExpandedDepth","rowIds","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","getIsRowExpanded","_table$options$getRow","_row$subRows","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","_row$getValue","_row$getValue$toStrin","_row$getValue$toStrin2","search","toLowerCase","getValue","toString","autoRemove","testFalsey","includesStringSensitive","_row$getValue2","_row$getValue2$toStri","equalsString","_row$getValue3","_row$getValue3$toStri","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","maxLeafRowFilterDepth","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","_table$getCoreRowMode2","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","getFilterFn","_table$options$filter","_table$options$filter2","getCanFilter","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","_table$getState$colum4","setFilterValue","setColumnFilters","previousfilter","newFilter","shouldAutoRemoveFilter","_old$filter","newFilterObj","_old$map","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter3","_table$options$filter4","getAllLeafColumns","updateFn","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","mid","floor","nums","sort","a","b","unique","from","Set","uniqueCount","_columnId","aggregationFns","Grouping","aggregatedCell","props","_toString","_props$getValue","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","_table$options$aggreg","_table$options$aggreg2","resetGrouping","_table$initialState$g","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","getGroupingValue","_groupingValuesCache","hasOwnProperty","original","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","groupingColumns","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","defaultPageIndex","defaultPageSize","getDefaultPaginationState","pageIndex","pageSize","Pagination","pagination","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","safeUpdater","newState","resetPagination","_table$initialState$p","setPageIndex","maxPageIndex","pageCount","_table$initialState$p2","_table$initialState$p3","resetPageSize","_table$initialState$p4","_table$initialState2","_table$initialState2$","setPageSize","topRowIndex","setPageCount","_table$options$pageCo","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPaginationRowModel","_getPaginationRowModel","_table$options$pageCo2","ceil","rows","getDefaultPinningState","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","getCanPin","_d$columnDef$enablePi","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","cells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","_table$initialState$r","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","_selection$row$id","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","alphanumeric","rowA","rowB","compareAlphanumeric","alphanumericCaseSensitive","text","compareBasic","textCaseSensitive","datetime","basic","aStr","bStr","aa","bb","an","parseInt","bn","combo","sortingFns","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","_table$options$sortin","_table$options$sortin2","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","newSorting","sortAction","nextDesc","getCanMultiSort","_table$options$maxMul","maxMultiSortColCount","getFirstSortDir","_column$columnDef$sor","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","_table$getState$sorti","columnSort","getSortIndex","_table$getState$sorti2","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","_table$initialState$s","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","_options$initialState","defaultOptions","mergeOptions","coreInitialState","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","_defaultColumn","_props$renderValue$to","_props$renderValue","renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","acc","getRenderValue","_cell$getValue","renderFallbackValue","rowIndex","parentId","_valuesCache","_uniqueValuesCache","getUniqueValues","getLeafRows","getParentRow","getParentRows","parentRows","currentRow","parentRow","createColumnHelper","accessor","display","group","data","accessRows","originalRows","getSubRows","_row$originalSubRows","originalSubRows","filterRows","filterRowImpl","filterRowModelFromLeafs","filterRowModelFromRoot","rowsToFilter","filterRow","_table$options$maxLea","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","_table$options$maxLea2","pass","resolvedColumnFilters","resolvedGlobalFilters","_filterFn$resolveFilt","filterableIds","globallyFilterableColumns","_globalFilterFn$resol","currentColumnFilter","currentGlobalFilter","j","filterMeta","__global__","filterRowsImpl","preRowModel","_table$getColumn","facetedRowModel","facetedUniqueValues","has","_facetedUniqueValues$","set","get","_facetedRowModel$flat","firstValue","facetedMinMaxValues","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","_sortEntry$desc","columnInfo","isDesc","aValue","bValue","aUndefined","bUndefined","sortInt","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","rowGroupsMap","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","_groupedRows$0$getVal","aggregateFn","groupMap","resKey","previous","expandRows","expandedRows","handleRow","pageStart","pageEnd","paginatedRowModel"],"mappings":"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"}
\ No newline at end of file
diff --git a/build/lib/index.mjs b/build/lib/index.mjs
index def2b38eae0f8a4a91b01aea0c3bffa0482b7ac7..fa2c3c301a26a18855ce8e50029e831a7e38776c 100644
--- a/build/lib/index.mjs
+++ b/build/lib/index.mjs
@@ -2618,7 +2618,7 @@ function createTable(options) {
     console.info('Creating Table Instance...');
   }
   let table = {
-    _features: features
+    _features: [...features, ...(options.features || [])]
   };
   const defaultOptions = table._features.reduce((obj, feature) => {
     return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));
@@ -2644,7 +2644,7 @@ function createTable(options) {
   const queued = [];
   let queuedTimeout = false;
   const coreInstance = {
-    _features: features,
+    _features: table._features,
     options: {
       ...defaultOptions,
       ...options
diff --git a/build/lib/index.mjs.map b/build/lib/index.mjs.map
index c77256657920ac33ba01ff04009e521dc792bcdf..0cbf7cc2d20fe9bb541512070b8aa7b8f3008a1b 100644
--- a/build/lib/index.mjs.map
+++ b/build/lib/index.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"index.mjs","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/table.ts","../../src/core/cell.ts","../../src/core/row.ts","../../src/columnHelper.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getSortedRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getExpandedRowModel.ts","../../src/utils/getPaginationRowModel.ts"],"sourcesContent":["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function isNumberArray(d: any): d is number[] {\n  return Array.isArray(d) && d.every(val => typeof val === 'number')\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column?.getCanResize()\n\n        return (e: unknown) => {\n          if (!column || !canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const newColumnSizing: ColumnSizingState = {}\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table\n          .getPrePaginationRowModel()\n          .flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(\n    row\n      .getValue<string | null>(columnId)\n      ?.toString()\n      ?.toLowerCase()\n      ?.includes(search)\n  )\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(\n    row.getValue<string | null>(columnId)?.toString()?.includes(filterValue)\n  )\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string | null>(columnId)?.toString()?.toLowerCase() ===\n    filterValue?.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          // @ts-ignore \n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\nimport { isNumberArray } from './utils'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  const values = leafRows.map(row => row.getValue(columnId))\n  if (!isNumberArray(values)) {\n    return\n  }\n  if (values.length === 1) {\n    return values[0]\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = values.sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1]! + nums[mid]!) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n  getGroupingValue?: (row: TData) => any\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  getGroupingValue: (columnId: string) => unknown\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      getGroupingValue: columnId => {\n        if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n          return row._groupingValuesCache[columnId]\n        }\n\n        const column = table.getColumn(columnId)\n\n        if (!column?.columnDef.getGroupingValue) {\n          return row.getValue(columnId)\n        }\n\n        row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(\n          row.original\n        )\n\n        return row._groupingValuesCache[columnId]\n      },\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table\n          .getPaginationRowModel()\n          .flatRows.filter(row => row.getCanSelect())\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows\n              .filter(row => row.getCanSelect())\n              .some(d => d.getIsSelected() || d.getIsSomeSelected())\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  parentId?: string\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n  getParentRow: () => Row<TData> | undefined\n  getParentRows: () => Row<TData>[]\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[],\n  parentId?: string\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => (row.parentId ? table.getRow(row.parentId) : undefined),\n    getParentRows: () => {\n      let parentRows: Row<TData>[] = []\n      let currentRow = row\n      while (true) {\n        const parentRow = currentRow.getParentRow()\n        if (!parentRow) break\n        parentRows.push(parentRow)\n        currentRow = parentRow\n      }\n      return parentRows.reverse()\n    },\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parentRow?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parentRow),\n              originalRows[i]!,\n              i,\n              depth,\n              undefined,\n              parentRow?.id\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        undefined,\n        row.parentId\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows: Row<TData>[] = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth,\n            undefined,\n            row.parentId\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            return\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return new Map()\n\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return undefined\n\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if (!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id)\n              }\n\n              return row\n            })\n          }\n\n          const columnId: string = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth,\n                undefined,\n                parentId\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column?.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0)\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","noop","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","isNumberArray","Array","isArray","every","val","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","deps","result","depTime","debug","Date","now","newDeps","depsChanged","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","_ref","_resolvedColumnDef$id","defaultColumn","_getDefaultColumnDef","resolvedColumnDef","accessorKey","id","replace","undefined","header","accessorFn","includes","originalRow","split","_result","process","env","NODE_ENV","warn","Error","column","columns","getFlatColumns","_column$columns","flatMap","_table$options$debugA","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_table$options$debugA2","_features","reduce","obj","feature","Object","assign","createHeader","_options$id","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","_left$map$filter","_right$map$filter","leftColumns","columnId","find","filter","Boolean","rightColumns","centerColumns","headerGroups","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","_left$map$filter2","orderedLeafColumns","_table$options$debugA3","getRightHeaderGroups","_right$map$filter2","_table$options$debugA4","getFooterGroups","reverse","_table$options$debugA5","getLeftFooterGroups","_table$options$debugA6","getCenterFooterGroups","_table$options$debugA7","getRightFooterGroups","_table$options$debugA8","getFlatHeaders","headers","_table$options$debugA9","getLeftFlatHeaders","_table$options$debugA10","getCenterFlatHeaders","_table$options$debugA11","getRightFlatHeaders","_table$options$debugA12","getCenterLeafHeaders","flatHeaders","_header$subHeaders","_table$options$debugA13","getLeftLeafHeaders","_header$subHeaders2","_table$options$debugA14","getRightLeafHeaders","_header$subHeaders3","_table$options$debugA15","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","getDefaultColumnSizingInfoState","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","_column$columnDef$min","_column$columnDef$max","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","_column$columnDef$ena","_table$options$enable","enableResizing","enableColumnResizing","getIsResizing","sum","_header$column$getSiz","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","newColumnSizing","updateOffset","eventType","clientXPos","setColumnSizingInfo","_old$startOffset","_old$startSize","_ref3","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","_e$touches$","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","_table$initialState$c","initialState","resetHeaderSizeInfo","_table$initialState$c2","getTotalSize","_table$getHeaderGroup","_table$getHeaderGroup2","getLeftTotalSize","_table$getLeftHeaderG","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader","_table$getRightHeader2","passiveSupported","supported","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_table$options$autoRe","_queue","autoResetAll","autoResetExpanded","manualExpanding","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState$e","_table$initialState","getCanSomeRowsExpand","getPrePaginationRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getRowModel","getIsExpanded","getExpandedDepth","rowIds","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","getIsRowExpanded","_table$options$getRow","_row$subRows","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","_row$getValue","_row$getValue$toStrin","_row$getValue$toStrin2","search","toLowerCase","getValue","toString","autoRemove","testFalsey","includesStringSensitive","_row$getValue2","_row$getValue2$toStri","equalsString","_row$getValue3","_row$getValue3$toStri","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","maxLeafRowFilterDepth","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","_table$getCoreRowMode2","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","getFilterFn","_table$options$filter","_table$options$filter2","getCanFilter","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","_table$getState$colum4","setFilterValue","setColumnFilters","previousfilter","newFilter","shouldAutoRemoveFilter","_old$filter","newFilterObj","_old$map","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter3","_table$options$filter4","getAllLeafColumns","updateFn","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","mid","floor","nums","sort","a","b","unique","from","Set","uniqueCount","_columnId","aggregationFns","Grouping","aggregatedCell","props","_toString","_props$getValue","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","_table$options$aggreg","_table$options$aggreg2","resetGrouping","_table$initialState$g","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","getGroupingValue","_groupingValuesCache","hasOwnProperty","original","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","groupingColumns","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","defaultPageIndex","defaultPageSize","getDefaultPaginationState","pageIndex","pageSize","Pagination","pagination","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","safeUpdater","newState","resetPagination","_table$initialState$p","setPageIndex","maxPageIndex","pageCount","_table$initialState$p2","_table$initialState$p3","resetPageSize","_table$initialState$p4","_table$initialState2","_table$initialState2$","setPageSize","topRowIndex","setPageCount","_table$options$pageCo","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPaginationRowModel","_getPaginationRowModel","_table$options$pageCo2","ceil","rows","getDefaultPinningState","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","getCanPin","_d$columnDef$enablePi","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","cells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","_table$initialState$r","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","_selection$row$id","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","alphanumeric","rowA","rowB","compareAlphanumeric","alphanumericCaseSensitive","text","compareBasic","textCaseSensitive","datetime","basic","aStr","bStr","aa","bb","an","parseInt","bn","combo","sortingFns","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","_table$options$sortin","_table$options$sortin2","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","newSorting","sortAction","nextDesc","getCanMultiSort","_table$options$maxMul","maxMultiSortColCount","getFirstSortDir","_column$columnDef$sor","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","_table$getState$sorti","columnSort","getSortIndex","_table$getState$sorti2","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","_table$initialState$s","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","_options$initialState","defaultOptions","mergeOptions","coreInitialState","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","_defaultColumn","_props$renderValue$to","_props$renderValue","renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","acc","getRenderValue","_cell$getValue","renderFallbackValue","rowIndex","parentId","_valuesCache","_uniqueValuesCache","getUniqueValues","getLeafRows","getParentRow","getParentRows","parentRows","currentRow","parentRow","createColumnHelper","accessor","display","group","data","accessRows","originalRows","getSubRows","_row$originalSubRows","originalSubRows","filterRows","filterRowImpl","filterRowModelFromLeafs","filterRowModelFromRoot","rowsToFilter","filterRow","_table$options$maxLea","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","_table$options$maxLea2","pass","resolvedColumnFilters","resolvedGlobalFilters","_filterFn$resolveFilt","filterableIds","globallyFilterableColumns","_globalFilterFn$resol","currentColumnFilter","currentGlobalFilter","j","filterMeta","__global__","filterRowsImpl","preRowModel","_table$getColumn","facetedRowModel","facetedUniqueValues","has","_facetedUniqueValues$","set","get","_facetedRowModel$flat","firstValue","facetedMinMaxValues","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","_sortEntry$desc","columnInfo","isDesc","aValue","bValue","aUndefined","bUndefined","sortInt","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","rowGroupsMap","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","_groupedRows$0$getVal","aggregateFn","groupMap","resKey","previous","expandRows","expandedRows","handleRow","pageStart","pageEnd","paginatedRowModel"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"index.mjs","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/table.ts","../../src/core/cell.ts","../../src/core/row.ts","../../src/columnHelper.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getSortedRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getExpandedRowModel.ts","../../src/utils/getPaginationRowModel.ts"],"sourcesContent":["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function isNumberArray(d: any): d is number[] {\n  return Array.isArray(d) && d.every(val => typeof val === 'number')\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column?.getCanResize()\n\n        return (e: unknown) => {\n          if (!column || !canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const newColumnSizing: ColumnSizingState = {}\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table\n          .getPrePaginationRowModel()\n          .flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(\n    row\n      .getValue<string | null>(columnId)\n      ?.toString()\n      ?.toLowerCase()\n      ?.includes(search)\n  )\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(\n    row.getValue<string | null>(columnId)?.toString()?.includes(filterValue)\n  )\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string | null>(columnId)?.toString()?.toLowerCase() ===\n    filterValue?.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          // @ts-ignore \n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\nimport { isNumberArray } from './utils'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  const values = leafRows.map(row => row.getValue(columnId))\n  if (!isNumberArray(values)) {\n    return\n  }\n  if (values.length === 1) {\n    return values[0]\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = values.sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1]! + nums[mid]!) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n  getGroupingValue?: (row: TData) => any\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  getGroupingValue: (columnId: string) => unknown\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      getGroupingValue: columnId => {\n        if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n          return row._groupingValuesCache[columnId]\n        }\n\n        const column = table.getColumn(columnId)\n\n        if (!column?.columnDef.getGroupingValue) {\n          return row.getValue(columnId)\n        }\n\n        row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(\n          row.original\n        )\n\n        return row._groupingValuesCache[columnId]\n      },\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table\n          .getPaginationRowModel()\n          .flatRows.filter(row => row.getCanSelect())\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows\n              .filter(row => row.getCanSelect())\n              .some(d => d.getIsSelected() || d.getIsSomeSelected())\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Column,\n  ColumnDef,\n  ColumnDefResolved,\n  GroupColumnDef,\n  InitialTableState,\n  Row,\n  RowData,\n  RowModel,\n  Table,\n  TableMeta,\n  TableOptions,\n  TableOptionsResolved,\n  TableState,\n  Updater,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n  features?: TableFeature[]\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = {\n    _features: [...features, ...(options.features || [])],\n  } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: table._features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  parentId?: string\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n  getParentRow: () => Row<TData> | undefined\n  getParentRows: () => Row<TData>[]\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[],\n  parentId?: string\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => (row.parentId ? table.getRow(row.parentId) : undefined),\n    getParentRows: () => {\n      let parentRows: Row<TData>[] = []\n      let currentRow = row\n      while (true) {\n        const parentRow = currentRow.getParentRow()\n        if (!parentRow) break\n        parentRows.push(parentRow)\n        currentRow = parentRow\n      }\n      return parentRows.reverse()\n    },\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parentRow?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parentRow),\n              originalRows[i]!,\n              i,\n              depth,\n              undefined,\n              parentRow?.id\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        undefined,\n        row.parentId\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows: Row<TData>[] = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth,\n            undefined,\n            row.parentId\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            return\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return new Map()\n\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return undefined\n\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if (!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id)\n              }\n\n              return row\n            })\n          }\n\n          const columnId: string = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth,\n                undefined,\n                parentId\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column?.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0)\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","noop","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","isNumberArray","Array","isArray","every","val","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","deps","result","depTime","debug","Date","now","newDeps","depsChanged","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","_ref","_resolvedColumnDef$id","defaultColumn","_getDefaultColumnDef","resolvedColumnDef","accessorKey","id","replace","undefined","header","accessorFn","includes","originalRow","split","_result","process","env","NODE_ENV","warn","Error","column","columns","getFlatColumns","_column$columns","flatMap","_table$options$debugA","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_table$options$debugA2","_features","reduce","obj","feature","Object","assign","createHeader","_options$id","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","_left$map$filter","_right$map$filter","leftColumns","columnId","find","filter","Boolean","rightColumns","centerColumns","headerGroups","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","_left$map$filter2","orderedLeafColumns","_table$options$debugA3","getRightHeaderGroups","_right$map$filter2","_table$options$debugA4","getFooterGroups","reverse","_table$options$debugA5","getLeftFooterGroups","_table$options$debugA6","getCenterFooterGroups","_table$options$debugA7","getRightFooterGroups","_table$options$debugA8","getFlatHeaders","headers","_table$options$debugA9","getLeftFlatHeaders","_table$options$debugA10","getCenterFlatHeaders","_table$options$debugA11","getRightFlatHeaders","_table$options$debugA12","getCenterLeafHeaders","flatHeaders","_header$subHeaders","_table$options$debugA13","getLeftLeafHeaders","_header$subHeaders2","_table$options$debugA14","getRightLeafHeaders","_header$subHeaders3","_table$options$debugA15","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","getDefaultColumnSizingInfoState","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","_column$columnDef$min","_column$columnDef$max","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","_column$columnDef$ena","_table$options$enable","enableResizing","enableColumnResizing","getIsResizing","sum","_header$column$getSiz","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","newColumnSizing","updateOffset","eventType","clientXPos","setColumnSizingInfo","_old$startOffset","_old$startSize","_ref3","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","_e$touches$","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","_table$initialState$c","initialState","resetHeaderSizeInfo","_table$initialState$c2","getTotalSize","_table$getHeaderGroup","_table$getHeaderGroup2","getLeftTotalSize","_table$getLeftHeaderG","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader","_table$getRightHeader2","passiveSupported","supported","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_table$options$autoRe","_queue","autoResetAll","autoResetExpanded","manualExpanding","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState$e","_table$initialState","getCanSomeRowsExpand","getPrePaginationRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getRowModel","getIsExpanded","getExpandedDepth","rowIds","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","getIsRowExpanded","_table$options$getRow","_row$subRows","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","_row$getValue","_row$getValue$toStrin","_row$getValue$toStrin2","search","toLowerCase","getValue","toString","autoRemove","testFalsey","includesStringSensitive","_row$getValue2","_row$getValue2$toStri","equalsString","_row$getValue3","_row$getValue3$toStri","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","maxLeafRowFilterDepth","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","_table$getCoreRowMode2","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","getFilterFn","_table$options$filter","_table$options$filter2","getCanFilter","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","_table$getState$colum4","setFilterValue","setColumnFilters","previousfilter","newFilter","shouldAutoRemoveFilter","_old$filter","newFilterObj","_old$map","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter3","_table$options$filter4","getAllLeafColumns","updateFn","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","mid","floor","nums","sort","a","b","unique","from","Set","uniqueCount","_columnId","aggregationFns","Grouping","aggregatedCell","props","_toString","_props$getValue","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","_table$options$aggreg","_table$options$aggreg2","resetGrouping","_table$initialState$g","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","getGroupingValue","_groupingValuesCache","hasOwnProperty","original","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","groupingColumns","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","defaultPageIndex","defaultPageSize","getDefaultPaginationState","pageIndex","pageSize","Pagination","pagination","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","safeUpdater","newState","resetPagination","_table$initialState$p","setPageIndex","maxPageIndex","pageCount","_table$initialState$p2","_table$initialState$p3","resetPageSize","_table$initialState$p4","_table$initialState2","_table$initialState2$","setPageSize","topRowIndex","setPageCount","_table$options$pageCo","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPaginationRowModel","_getPaginationRowModel","_table$options$pageCo2","ceil","rows","getDefaultPinningState","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","getCanPin","_d$columnDef$enablePi","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","cells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","_table$initialState$r","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","_selection$row$id","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","alphanumeric","rowA","rowB","compareAlphanumeric","alphanumericCaseSensitive","text","compareBasic","textCaseSensitive","datetime","basic","aStr","bStr","aa","bb","an","parseInt","bn","combo","sortingFns","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","_table$options$sortin","_table$options$sortin2","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","newSorting","sortAction","nextDesc","getCanMultiSort","_table$options$maxMul","maxMultiSortColCount","getFirstSortDir","_column$columnDef$sor","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","_table$getState$sorti","columnSort","getSortIndex","_table$getState$sorti2","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","_table$initialState$s","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","_options$initialState","defaultOptions","mergeOptions","coreInitialState","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","_defaultColumn","_props$renderValue$to","_props$renderValue","renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","acc","getRenderValue","_cell$getValue","renderFallbackValue","rowIndex","parentId","_valuesCache","_uniqueValuesCache","getUniqueValues","getLeafRows","getParentRow","getParentRows","parentRows","currentRow","parentRow","createColumnHelper","accessor","display","group","data","accessRows","originalRows","getSubRows","_row$originalSubRows","originalSubRows","filterRows","filterRowImpl","filterRowModelFromLeafs","filterRowModelFromRoot","rowsToFilter","filterRow","_table$options$maxLea","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","_table$options$maxLea2","pass","resolvedColumnFilters","resolvedGlobalFilters","_filterFn$resolveFilt","filterableIds","globallyFilterableColumns","_globalFilterFn$resol","currentColumnFilter","currentGlobalFilter","j","filterMeta","__global__","filterRowsImpl","preRowModel","_table$getColumn","facetedRowModel","facetedUniqueValues","has","_facetedUniqueValues$","set","get","_facetedRowModel$flat","firstValue","facetedMinMaxValues","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","_sortEntry$desc","columnInfo","isDesc","aValue","bValue","aUndefined","bUndefined","sortInt","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","rowGroupsMap","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","_groupedRows$0$getVal","aggregateFn","groupMap","resKey","previous","expandRows","expandedRows","handleRow","pageStart","pageEnd","paginatedRowModel"],"mappings":"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"}
\ No newline at end of file
diff --git a/build/lib/types.d.ts b/build/lib/types.d.ts
index deaf229aabfe3a9d468cbf0c6c397e528aca1d5d..4ee23226117f4f91d74b6fe00e0dd4b00dcad870 100644
--- a/build/lib/types.d.ts
+++ b/build/lib/types.d.ts
@@ -32,7 +32,7 @@ export type RowData = unknown | object | any[];
 export type AnyRender = (Comp: any, props: any) => any;
 export interface Table<TData extends RowData> extends CoreInstance<TData>, HeadersInstance<TData>, VisibilityInstance<TData>, ColumnOrderInstance<TData>, ColumnPinningInstance<TData>, FiltersInstance<TData>, SortingInstance<TData>, GroupingInstance<TData>, ColumnSizingInstance, ExpandedInstance<TData>, PaginationInstance<TData>, RowSelectionInstance<TData> {
 }
-interface FeatureOptions<TData extends RowData> extends VisibilityOptions, ColumnOrderOptions, ColumnPinningOptions, FiltersOptions<TData>, SortingOptions<TData>, GroupingOptions, ExpandedOptions<TData>, ColumnSizingOptions, PaginationOptions, RowSelectionOptions<TData> {
+export interface FeatureOptions<TData extends RowData> extends VisibilityOptions, ColumnOrderOptions, ColumnPinningOptions, FiltersOptions<TData>, SortingOptions<TData>, GroupingOptions, ExpandedOptions<TData>, ColumnSizingOptions, PaginationOptions, RowSelectionOptions<TData> {
 }
 export type TableOptionsResolved<TData extends RowData> = CoreOptions<TData> & FeatureOptions<TData>;
 export interface TableOptions<TData extends RowData> extends PartialKeys<TableOptionsResolved<TData>, 'state' | 'onStateChange' | 'renderFallbackValue'> {
diff --git a/build/umd/index.development.js b/build/umd/index.development.js
index 232652d41093a5ac794ebe9048ee8fc1c7e24d08..16f973d13a1485d1d21100660c1d78d3b238b174 100644
--- a/build/umd/index.development.js
+++ b/build/umd/index.development.js
@@ -2623,7 +2623,7 @@
       console.info('Creating Table Instance...');
     }
     let table = {
-      _features: features
+      _features: [...features, ...(options.features || [])]
     };
     const defaultOptions = table._features.reduce((obj, feature) => {
       return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));
@@ -2649,7 +2649,7 @@
     const queued = [];
     let queuedTimeout = false;
     const coreInstance = {
-      _features: features,
+      _features: table._features,
       options: {
         ...defaultOptions,
         ...options
diff --git a/build/umd/index.development.js.map b/build/umd/index.development.js.map
index 716761b10a3a62266615c1c1d7ab0ac3f2a9030e..54a08e1a690c3f93004feadcffd96d0f1546e02c 100644
--- a/build/umd/index.development.js.map
+++ b/build/umd/index.development.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.development.js","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/table.ts","../../src/core/cell.ts","../../src/core/row.ts","../../src/columnHelper.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getSortedRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getExpandedRowModel.ts","../../src/utils/getPaginationRowModel.ts"],"sourcesContent":["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function isNumberArray(d: any): d is number[] {\n  return Array.isArray(d) && d.every(val => typeof val === 'number')\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column?.getCanResize()\n\n        return (e: unknown) => {\n          if (!column || !canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const newColumnSizing: ColumnSizingState = {}\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table\n          .getPrePaginationRowModel()\n          .flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(\n    row\n      .getValue<string | null>(columnId)\n      ?.toString()\n      ?.toLowerCase()\n      ?.includes(search)\n  )\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(\n    row.getValue<string | null>(columnId)?.toString()?.includes(filterValue)\n  )\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string | null>(columnId)?.toString()?.toLowerCase() ===\n    filterValue?.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          // @ts-ignore \n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\nimport { isNumberArray } from './utils'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  const values = leafRows.map(row => row.getValue(columnId))\n  if (!isNumberArray(values)) {\n    return\n  }\n  if (values.length === 1) {\n    return values[0]\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = values.sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1]! + nums[mid]!) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n  getGroupingValue?: (row: TData) => any\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  getGroupingValue: (columnId: string) => unknown\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      getGroupingValue: columnId => {\n        if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n          return row._groupingValuesCache[columnId]\n        }\n\n        const column = table.getColumn(columnId)\n\n        if (!column?.columnDef.getGroupingValue) {\n          return row.getValue(columnId)\n        }\n\n        row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(\n          row.original\n        )\n\n        return row._groupingValuesCache[columnId]\n      },\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table\n          .getPaginationRowModel()\n          .flatRows.filter(row => row.getCanSelect())\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows\n              .filter(row => row.getCanSelect())\n              .some(d => d.getIsSelected() || d.getIsSomeSelected())\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  parentId?: string\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n  getParentRow: () => Row<TData> | undefined\n  getParentRows: () => Row<TData>[]\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[],\n  parentId?: string\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => (row.parentId ? table.getRow(row.parentId) : undefined),\n    getParentRows: () => {\n      let parentRows: Row<TData>[] = []\n      let currentRow = row\n      while (true) {\n        const parentRow = currentRow.getParentRow()\n        if (!parentRow) break\n        parentRows.push(parentRow)\n        currentRow = parentRow\n      }\n      return parentRows.reverse()\n    },\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parentRow?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parentRow),\n              originalRows[i]!,\n              i,\n              depth,\n              undefined,\n              parentRow?.id\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        undefined,\n        row.parentId\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows: Row<TData>[] = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth,\n            undefined,\n            row.parentId\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            return\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return new Map()\n\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return undefined\n\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if (!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id)\n              }\n\n              return row\n            })\n          }\n\n          const columnId: string = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth,\n                undefined,\n                parentId\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column?.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0)\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","noop","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","isNumberArray","Array","isArray","every","val","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","deps","result","depTime","debug","Date","now","newDeps","depsChanged","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","_ref","_resolvedColumnDef$id","defaultColumn","_getDefaultColumnDef","resolvedColumnDef","accessorKey","id","replace","undefined","header","accessorFn","includes","originalRow","split","_result","warn","Error","column","columns","getFlatColumns","_column$columns","flatMap","process","_table$options$debugA","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_table$options$debugA2","_features","reduce","obj","feature","Object","assign","createHeader","_options$id","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","_left$map$filter","_right$map$filter","leftColumns","columnId","find","filter","Boolean","rightColumns","centerColumns","headerGroups","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","_left$map$filter2","orderedLeafColumns","_table$options$debugA3","getRightHeaderGroups","_right$map$filter2","_table$options$debugA4","getFooterGroups","reverse","_table$options$debugA5","getLeftFooterGroups","_table$options$debugA6","getCenterFooterGroups","_table$options$debugA7","getRightFooterGroups","_table$options$debugA8","getFlatHeaders","headers","_table$options$debugA9","getLeftFlatHeaders","_table$options$debugA10","getCenterFlatHeaders","_table$options$debugA11","getRightFlatHeaders","_table$options$debugA12","getCenterLeafHeaders","flatHeaders","_header$subHeaders","_table$options$debugA13","getLeftLeafHeaders","_header$subHeaders2","_table$options$debugA14","getRightLeafHeaders","_header$subHeaders3","_table$options$debugA15","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","getDefaultColumnSizingInfoState","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","_column$columnDef$min","_column$columnDef$max","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","_column$columnDef$ena","_table$options$enable","enableResizing","enableColumnResizing","getIsResizing","sum","_header$column$getSiz","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","newColumnSizing","updateOffset","eventType","clientXPos","setColumnSizingInfo","_old$startOffset","_old$startSize","_ref3","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","_e$touches$","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","_table$initialState$c","initialState","resetHeaderSizeInfo","_table$initialState$c2","getTotalSize","_table$getHeaderGroup","_table$getHeaderGroup2","getLeftTotalSize","_table$getLeftHeaderG","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader","_table$getRightHeader2","passiveSupported","supported","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_table$options$autoRe","_queue","autoResetAll","autoResetExpanded","manualExpanding","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState$e","_table$initialState","getCanSomeRowsExpand","getPrePaginationRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getRowModel","getIsExpanded","getExpandedDepth","rowIds","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","getIsRowExpanded","_table$options$getRow","_row$subRows","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","_row$getValue","_row$getValue$toStrin","_row$getValue$toStrin2","search","toLowerCase","getValue","toString","autoRemove","testFalsey","includesStringSensitive","_row$getValue2","_row$getValue2$toStri","equalsString","_row$getValue3","_row$getValue3$toStri","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","maxLeafRowFilterDepth","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","_table$getCoreRowMode2","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","getFilterFn","_table$options$filter","_table$options$filter2","getCanFilter","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","_table$getState$colum4","setFilterValue","setColumnFilters","previousfilter","newFilter","shouldAutoRemoveFilter","_old$filter","newFilterObj","_old$map","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter3","_table$options$filter4","getAllLeafColumns","updateFn","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","mid","floor","nums","sort","a","b","unique","from","Set","uniqueCount","_columnId","aggregationFns","Grouping","aggregatedCell","props","_toString","_props$getValue","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","_table$options$aggreg","_table$options$aggreg2","resetGrouping","_table$initialState$g","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","getGroupingValue","_groupingValuesCache","hasOwnProperty","original","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","groupingColumns","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","defaultPageIndex","defaultPageSize","getDefaultPaginationState","pageIndex","pageSize","Pagination","pagination","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","safeUpdater","newState","resetPagination","_table$initialState$p","setPageIndex","maxPageIndex","pageCount","_table$initialState$p2","_table$initialState$p3","resetPageSize","_table$initialState$p4","_table$initialState2","_table$initialState2$","setPageSize","topRowIndex","setPageCount","_table$options$pageCo","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPaginationRowModel","_getPaginationRowModel","_table$options$pageCo2","ceil","rows","getDefaultPinningState","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","getCanPin","_d$columnDef$enablePi","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","cells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","_table$initialState$r","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","_selection$row$id","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","alphanumeric","rowA","rowB","compareAlphanumeric","alphanumericCaseSensitive","text","compareBasic","textCaseSensitive","datetime","basic","aStr","bStr","aa","bb","an","parseInt","bn","combo","sortingFns","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","_table$options$sortin","_table$options$sortin2","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","newSorting","sortAction","nextDesc","getCanMultiSort","_table$options$maxMul","maxMultiSortColCount","getFirstSortDir","_column$columnDef$sor","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","_table$getState$sorti","columnSort","getSortIndex","_table$getState$sorti2","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","_table$initialState$s","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","_options$initialState","defaultOptions","mergeOptions","coreInitialState","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","_defaultColumn","_props$renderValue$to","_props$renderValue","renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","acc","getRenderValue","_cell$getValue","renderFallbackValue","rowIndex","parentId","_valuesCache","_uniqueValuesCache","getUniqueValues","getLeafRows","getParentRow","getParentRows","parentRows","currentRow","parentRow","createColumnHelper","accessor","display","group","data","accessRows","originalRows","getSubRows","_row$originalSubRows","originalSubRows","filterRows","filterRowImpl","filterRowModelFromLeafs","filterRowModelFromRoot","rowsToFilter","filterRow","_table$options$maxLea","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","_table$options$maxLea2","pass","resolvedColumnFilters","resolvedGlobalFilters","_filterFn$resolveFilt","filterableIds","globallyFilterableColumns","_globalFilterFn$resol","currentColumnFilter","currentGlobalFilter","j","filterMeta","__global__","filterRowsImpl","preRowModel","_table$getColumn","facetedRowModel","facetedUniqueValues","has","_facetedUniqueValues$","set","get","_facetedRowModel$flat","firstValue","facetedMinMaxValues","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","_sortEntry$desc","columnInfo","isDesc","aValue","bValue","aUndefined","bUndefined","sortInt","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","rowGroupsMap","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","_groupedRows$0$getVal","aggregateFn","groupMap","resKey","previous","expandRows","expandedRows","handleRow","pageStart","pageEnd","paginatedRowModel"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"index.development.js","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/table.ts","../../src/core/cell.ts","../../src/core/row.ts","../../src/columnHelper.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getSortedRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getExpandedRowModel.ts","../../src/utils/getPaginationRowModel.ts"],"sourcesContent":["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function isNumberArray(d: any): d is number[] {\n  return Array.isArray(d) && d.every(val => typeof val === 'number')\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column?.getCanResize()\n\n        return (e: unknown) => {\n          if (!column || !canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const newColumnSizing: ColumnSizingState = {}\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table\n          .getPrePaginationRowModel()\n          .flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(\n    row\n      .getValue<string | null>(columnId)\n      ?.toString()\n      ?.toLowerCase()\n      ?.includes(search)\n  )\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(\n    row.getValue<string | null>(columnId)?.toString()?.includes(filterValue)\n  )\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string | null>(columnId)?.toString()?.toLowerCase() ===\n    filterValue?.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          // @ts-ignore \n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\nimport { isNumberArray } from './utils'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  const values = leafRows.map(row => row.getValue(columnId))\n  if (!isNumberArray(values)) {\n    return\n  }\n  if (values.length === 1) {\n    return values[0]\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = values.sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1]! + nums[mid]!) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n  getGroupingValue?: (row: TData) => any\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  getGroupingValue: (columnId: string) => unknown\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      getGroupingValue: columnId => {\n        if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n          return row._groupingValuesCache[columnId]\n        }\n\n        const column = table.getColumn(columnId)\n\n        if (!column?.columnDef.getGroupingValue) {\n          return row.getValue(columnId)\n        }\n\n        row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(\n          row.original\n        )\n\n        return row._groupingValuesCache[columnId]\n      },\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table\n          .getPaginationRowModel()\n          .flatRows.filter(row => row.getCanSelect())\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows\n              .filter(row => row.getCanSelect())\n              .some(d => d.getIsSelected() || d.getIsSomeSelected())\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Column,\n  ColumnDef,\n  ColumnDefResolved,\n  GroupColumnDef,\n  InitialTableState,\n  Row,\n  RowData,\n  RowModel,\n  Table,\n  TableMeta,\n  TableOptions,\n  TableOptionsResolved,\n  TableState,\n  Updater,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n  features?: TableFeature[]\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = {\n    _features: [...features, ...(options.features || [])],\n  } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: table._features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  parentId?: string\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n  getParentRow: () => Row<TData> | undefined\n  getParentRows: () => Row<TData>[]\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[],\n  parentId?: string\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => (row.parentId ? table.getRow(row.parentId) : undefined),\n    getParentRows: () => {\n      let parentRows: Row<TData>[] = []\n      let currentRow = row\n      while (true) {\n        const parentRow = currentRow.getParentRow()\n        if (!parentRow) break\n        parentRows.push(parentRow)\n        currentRow = parentRow\n      }\n      return parentRows.reverse()\n    },\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parentRow?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parentRow),\n              originalRows[i]!,\n              i,\n              depth,\n              undefined,\n              parentRow?.id\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        undefined,\n        row.parentId\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows: Row<TData>[] = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth,\n            undefined,\n            row.parentId\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            return\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return new Map()\n\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return undefined\n\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if (!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id)\n              }\n\n              return row\n            })\n          }\n\n          const columnId: string = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth,\n                undefined,\n                parentId\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column?.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0)\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","noop","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","isNumberArray","Array","isArray","every","val","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","deps","result","depTime","debug","Date","now","newDeps","depsChanged","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","_ref","_resolvedColumnDef$id","defaultColumn","_getDefaultColumnDef","resolvedColumnDef","accessorKey","id","replace","undefined","header","accessorFn","includes","originalRow","split","_result","warn","Error","column","columns","getFlatColumns","_column$columns","flatMap","process","_table$options$debugA","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_table$options$debugA2","_features","reduce","obj","feature","Object","assign","createHeader","_options$id","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","_left$map$filter","_right$map$filter","leftColumns","columnId","find","filter","Boolean","rightColumns","centerColumns","headerGroups","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","_left$map$filter2","orderedLeafColumns","_table$options$debugA3","getRightHeaderGroups","_right$map$filter2","_table$options$debugA4","getFooterGroups","reverse","_table$options$debugA5","getLeftFooterGroups","_table$options$debugA6","getCenterFooterGroups","_table$options$debugA7","getRightFooterGroups","_table$options$debugA8","getFlatHeaders","headers","_table$options$debugA9","getLeftFlatHeaders","_table$options$debugA10","getCenterFlatHeaders","_table$options$debugA11","getRightFlatHeaders","_table$options$debugA12","getCenterLeafHeaders","flatHeaders","_header$subHeaders","_table$options$debugA13","getLeftLeafHeaders","_header$subHeaders2","_table$options$debugA14","getRightLeafHeaders","_header$subHeaders3","_table$options$debugA15","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","getDefaultColumnSizingInfoState","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","_column$columnDef$min","_column$columnDef$max","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","_column$columnDef$ena","_table$options$enable","enableResizing","enableColumnResizing","getIsResizing","sum","_header$column$getSiz","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","newColumnSizing","updateOffset","eventType","clientXPos","setColumnSizingInfo","_old$startOffset","_old$startSize","_ref3","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","_e$touches$","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","_table$initialState$c","initialState","resetHeaderSizeInfo","_table$initialState$c2","getTotalSize","_table$getHeaderGroup","_table$getHeaderGroup2","getLeftTotalSize","_table$getLeftHeaderG","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader","_table$getRightHeader2","passiveSupported","supported","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_table$options$autoRe","_queue","autoResetAll","autoResetExpanded","manualExpanding","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState$e","_table$initialState","getCanSomeRowsExpand","getPrePaginationRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getRowModel","getIsExpanded","getExpandedDepth","rowIds","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","getIsRowExpanded","_table$options$getRow","_row$subRows","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","_row$getValue","_row$getValue$toStrin","_row$getValue$toStrin2","search","toLowerCase","getValue","toString","autoRemove","testFalsey","includesStringSensitive","_row$getValue2","_row$getValue2$toStri","equalsString","_row$getValue3","_row$getValue3$toStri","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","maxLeafRowFilterDepth","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","_table$getCoreRowMode2","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","getFilterFn","_table$options$filter","_table$options$filter2","getCanFilter","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","_table$getState$colum4","setFilterValue","setColumnFilters","previousfilter","newFilter","shouldAutoRemoveFilter","_old$filter","newFilterObj","_old$map","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter3","_table$options$filter4","getAllLeafColumns","updateFn","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","mid","floor","nums","sort","a","b","unique","from","Set","uniqueCount","_columnId","aggregationFns","Grouping","aggregatedCell","props","_toString","_props$getValue","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","_table$options$aggreg","_table$options$aggreg2","resetGrouping","_table$initialState$g","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","getGroupingValue","_groupingValuesCache","hasOwnProperty","original","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","groupingColumns","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","defaultPageIndex","defaultPageSize","getDefaultPaginationState","pageIndex","pageSize","Pagination","pagination","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","safeUpdater","newState","resetPagination","_table$initialState$p","setPageIndex","maxPageIndex","pageCount","_table$initialState$p2","_table$initialState$p3","resetPageSize","_table$initialState$p4","_table$initialState2","_table$initialState2$","setPageSize","topRowIndex","setPageCount","_table$options$pageCo","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPaginationRowModel","_getPaginationRowModel","_table$options$pageCo2","ceil","rows","getDefaultPinningState","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","getCanPin","_d$columnDef$enablePi","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","cells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","_table$initialState$r","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","_selection$row$id","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","alphanumeric","rowA","rowB","compareAlphanumeric","alphanumericCaseSensitive","text","compareBasic","textCaseSensitive","datetime","basic","aStr","bStr","aa","bb","an","parseInt","bn","combo","sortingFns","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","_table$options$sortin","_table$options$sortin2","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","newSorting","sortAction","nextDesc","getCanMultiSort","_table$options$maxMul","maxMultiSortColCount","getFirstSortDir","_column$columnDef$sor","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","_table$getState$sorti","columnSort","getSortIndex","_table$getState$sorti2","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","_table$initialState$s","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","_options$initialState","defaultOptions","mergeOptions","coreInitialState","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","_defaultColumn","_props$renderValue$to","_props$renderValue","renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","acc","getRenderValue","_cell$getValue","renderFallbackValue","rowIndex","parentId","_valuesCache","_uniqueValuesCache","getUniqueValues","getLeafRows","getParentRow","getParentRows","parentRows","currentRow","parentRow","createColumnHelper","accessor","display","group","data","accessRows","originalRows","getSubRows","_row$originalSubRows","originalSubRows","filterRows","filterRowImpl","filterRowModelFromLeafs","filterRowModelFromRoot","rowsToFilter","filterRow","_table$options$maxLea","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","_table$options$maxLea2","pass","resolvedColumnFilters","resolvedGlobalFilters","_filterFn$resolveFilt","filterableIds","globallyFilterableColumns","_globalFilterFn$resol","currentColumnFilter","currentGlobalFilter","j","filterMeta","__global__","filterRowsImpl","preRowModel","_table$getColumn","facetedRowModel","facetedUniqueValues","has","_facetedUniqueValues$","set","get","_facetedRowModel$flat","firstValue","facetedMinMaxValues","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","_sortEntry$desc","columnInfo","isDesc","aValue","bValue","aUndefined","bUndefined","sortInt","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","rowGroupsMap","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","_groupedRows$0$getVal","aggregateFn","groupMap","resKey","previous","expandRows","expandedRows","handleRow","pageStart","pageEnd","paginatedRowModel"],"mappings":"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"}
\ No newline at end of file
diff --git a/build/umd/index.production.js b/build/umd/index.production.js
index 56c995bfa3d29772799b98b278d80bc70d3084f2..e3ae7940179843db7e967ce6612b4d688da5a69a 100644
--- a/build/umd/index.production.js
+++ b/build/umd/index.production.js
@@ -8,5 +8,5 @@
  *
  * @license MIT
  */
-!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).TableCore={})}(this,(function(e){"use strict";function t(e,t){return"function"==typeof e?e(t):e}function n(e,n){return l=>{n.setState((n=>({...n,[e]:t(l,n[e])})))}}function l(e){return e instanceof Function}function o(e){return Array.isArray(e)&&e.every((e=>"number"==typeof e))}function i(e,t){const n=[],l=e=>{e.forEach((e=>{n.push(e);const o=t(e);null!=o&&o.length&&l(o)}))};return l(e),n}function r(e,t,n){let l,o=[];return()=>{let i;n.key&&n.debug&&(i=Date.now());const r=e();if(!(r.length!==o.length||r.some(((e,t)=>o[t]!==e))))return l;let u;if(o=r,n.key&&n.debug&&(u=Date.now()),l=t(...r),null==n||null==n.onChange||n.onChange(l),n.key&&n.debug&&null!=n&&n.debug()){const e=Math.round(100*(Date.now()-i))/100,t=Math.round(100*(Date.now()-u))/100,l=t/16,o=(e,t)=>{for(e=String(e);e.length<t;)e=" "+e;return e};console.info(`%c⏱ ${o(t,5)} /${o(e,5)} ms`,`\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(0,Math.min(120-120*l,120))}deg 100% 31%);`,null==n?void 0:n.key)}return l}}function u(e,t,n,l){var o,i;const u={...e._getDefaultColumnDef(),...t},a=u.accessorKey;let s,g=null!=(o=null!=(i=u.id)?i:a?a.replace(".","_"):void 0)?o:"string"==typeof u.header?u.header:void 0;if(u.accessorFn?s=u.accessorFn:a&&(s=a.includes(".")?e=>{let t=e;for(const e of a.split(".")){var n;t=null==(n=t)?void 0:n[e]}return t}:e=>e[u.accessorKey]),!g)throw new Error;let d={id:`${String(g)}`,accessorFn:s,parent:l,depth:n,columnDef:u,columns:[],getFlatColumns:r((()=>[!0]),(()=>{var e;return[d,...null==(e=d.columns)?void 0:e.flatMap((e=>e.getFlatColumns()))]}),{key:"column.getFlatColumns",debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugColumns}}),getLeafColumns:r((()=>[e._getOrderColumnsFn()]),(e=>{var t;if(null!=(t=d.columns)&&t.length){let t=d.columns.flatMap((e=>e.getLeafColumns()));return e(t)}return[d]}),{key:"column.getLeafColumns",debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugColumns}})};return d=e._features.reduce(((t,n)=>Object.assign(t,null==n.createColumn?void 0:n.createColumn(d,e))),d),d}function a(e,t,n){var l;let o={id:null!=(l=n.id)?l:t.id,column:t,index:n.index,isPlaceholder:!!n.isPlaceholder,placeholderId:n.placeholderId,depth:n.depth,subHeaders:[],colSpan:0,rowSpan:0,headerGroup:null,getLeafHeaders:()=>{const e=[],t=n=>{n.subHeaders&&n.subHeaders.length&&n.subHeaders.map(t),e.push(n)};return t(o),e},getContext:()=>({table:e,header:o,column:t})};return e._features.forEach((t=>{Object.assign(o,null==t.createHeader?void 0:t.createHeader(o,e))})),o}const s={createTable:e=>({getHeaderGroups:r((()=>[e.getAllColumns(),e.getVisibleLeafColumns(),e.getState().columnPinning.left,e.getState().columnPinning.right]),((t,n,l,o)=>{var i,r;const u=null!=(i=null==l?void 0:l.map((e=>n.find((t=>t.id===e)))).filter(Boolean))?i:[],a=null!=(r=null==o?void 0:o.map((e=>n.find((t=>t.id===e)))).filter(Boolean))?r:[];return g(t,[...u,...n.filter((e=>!(null!=l&&l.includes(e.id)||null!=o&&o.includes(e.id)))),...a],e)}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getCenterHeaderGroups:r((()=>[e.getAllColumns(),e.getVisibleLeafColumns(),e.getState().columnPinning.left,e.getState().columnPinning.right]),((t,n,l,o)=>g(t,n=n.filter((e=>!(null!=l&&l.includes(e.id)||null!=o&&o.includes(e.id)))),e,"center")),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getLeftHeaderGroups:r((()=>[e.getAllColumns(),e.getVisibleLeafColumns(),e.getState().columnPinning.left]),((t,n,l)=>{var o;return g(t,null!=(o=null==l?void 0:l.map((e=>n.find((t=>t.id===e)))).filter(Boolean))?o:[],e,"left")}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getRightHeaderGroups:r((()=>[e.getAllColumns(),e.getVisibleLeafColumns(),e.getState().columnPinning.right]),((t,n,l)=>{var o;return g(t,null!=(o=null==l?void 0:l.map((e=>n.find((t=>t.id===e)))).filter(Boolean))?o:[],e,"right")}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getFooterGroups:r((()=>[e.getHeaderGroups()]),(e=>[...e].reverse()),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getLeftFooterGroups:r((()=>[e.getLeftHeaderGroups()]),(e=>[...e].reverse()),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getCenterFooterGroups:r((()=>[e.getCenterHeaderGroups()]),(e=>[...e].reverse()),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getRightFooterGroups:r((()=>[e.getRightHeaderGroups()]),(e=>[...e].reverse()),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getFlatHeaders:r((()=>[e.getHeaderGroups()]),(e=>e.map((e=>e.headers)).flat()),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getLeftFlatHeaders:r((()=>[e.getLeftHeaderGroups()]),(e=>e.map((e=>e.headers)).flat()),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getCenterFlatHeaders:r((()=>[e.getCenterHeaderGroups()]),(e=>e.map((e=>e.headers)).flat()),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getRightFlatHeaders:r((()=>[e.getRightHeaderGroups()]),(e=>e.map((e=>e.headers)).flat()),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getCenterLeafHeaders:r((()=>[e.getCenterFlatHeaders()]),(e=>e.filter((e=>{var t;return!(null!=(t=e.subHeaders)&&t.length)}))),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getLeftLeafHeaders:r((()=>[e.getLeftFlatHeaders()]),(e=>e.filter((e=>{var t;return!(null!=(t=e.subHeaders)&&t.length)}))),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getRightLeafHeaders:r((()=>[e.getRightFlatHeaders()]),(e=>e.filter((e=>{var t;return!(null!=(t=e.subHeaders)&&t.length)}))),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getLeafHeaders:r((()=>[e.getLeftHeaderGroups(),e.getCenterHeaderGroups(),e.getRightHeaderGroups()]),((e,t,n)=>{var l,o,i,r,u,a;return[...null!=(l=null==(o=e[0])?void 0:o.headers)?l:[],...null!=(i=null==(r=t[0])?void 0:r.headers)?i:[],...null!=(u=null==(a=n[0])?void 0:a.headers)?u:[]].map((e=>e.getLeafHeaders())).flat()}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}})})};function g(e,t,n,l){var o,i;let r=0;const u=function(e,t){void 0===t&&(t=1),r=Math.max(r,t),e.filter((e=>e.getIsVisible())).forEach((e=>{var n;null!=(n=e.columns)&&n.length&&u(e.columns,t+1)}),0)};u(e);let s=[];const g=(e,t)=>{const o={depth:t,id:[l,`${t}`].filter(Boolean).join("_"),headers:[]},i=[];e.forEach((e=>{const r=[...i].reverse()[0];let u,s=!1;if(e.column.depth===o.depth&&e.column.parent?u=e.column.parent:(u=e.column,s=!0),r&&(null==r?void 0:r.column)===u)r.subHeaders.push(e);else{const o=a(n,u,{id:[l,t,u.id,null==e?void 0:e.id].filter(Boolean).join("_"),isPlaceholder:s,placeholderId:s?`${i.filter((e=>e.column===u)).length}`:void 0,depth:t,index:i.length});o.subHeaders.push(e),i.push(o)}o.headers.push(e),e.headerGroup=o})),s.push(o),t>0&&g(i,t-1)},d=t.map(((e,t)=>a(n,e,{depth:r,index:t})));g(d,r-1),s.reverse();const c=e=>e.filter((e=>e.column.getIsVisible())).map((e=>{let t=0,n=0,l=[0];e.subHeaders&&e.subHeaders.length?(l=[],c(e.subHeaders).forEach((e=>{let{colSpan:n,rowSpan:o}=e;t+=n,l.push(o)}))):t=1;return n+=Math.min(...l),e.colSpan=t,e.rowSpan=n,{colSpan:t,rowSpan:n}}));return c(null!=(o=null==(i=s[0])?void 0:i.headers)?o:[]),s}const d={size:150,minSize:20,maxSize:Number.MAX_SAFE_INTEGER},c={getDefaultColumnDef:()=>d,getInitialState:e=>({columnSizing:{},columnSizingInfo:{startOffset:null,startSize:null,deltaOffset:null,deltaPercentage:null,isResizingColumn:!1,columnSizingStart:[]},...e}),getDefaultOptions:e=>({columnResizeMode:"onEnd",onColumnSizingChange:n("columnSizing",e),onColumnSizingInfoChange:n("columnSizingInfo",e)}),createColumn:(e,t)=>({getSize:()=>{var n,l,o;const i=t.getState().columnSizing[e.id];return Math.min(Math.max(null!=(n=e.columnDef.minSize)?n:d.minSize,null!=(l=null!=i?i:e.columnDef.size)?l:d.size),null!=(o=e.columnDef.maxSize)?o:d.maxSize)},getStart:n=>{const l=n?"left"===n?t.getLeftVisibleLeafColumns():t.getRightVisibleLeafColumns():t.getVisibleLeafColumns(),o=l.findIndex((t=>t.id===e.id));if(o>0){const e=l[o-1];return e.getStart(n)+e.getSize()}return 0},resetSize:()=>{t.setColumnSizing((t=>{let{[e.id]:n,...l}=t;return l}))},getCanResize:()=>{var n,l;return(null==(n=e.columnDef.enableResizing)||n)&&(null==(l=t.options.enableColumnResizing)||l)},getIsResizing:()=>t.getState().columnSizingInfo.isResizingColumn===e.id}),createHeader:(e,t)=>({getSize:()=>{let t=0;const n=e=>{var l;e.subHeaders.length?e.subHeaders.forEach(n):t+=null!=(l=e.column.getSize())?l:0};return n(e),t},getStart:()=>{if(e.index>0){const t=e.headerGroup.headers[e.index-1];return t.getStart()+t.getSize()}return 0},getResizeHandler:()=>{const n=t.getColumn(e.column.id),l=null==n?void 0:n.getCanResize();return o=>{if(!n||!l)return;if(null==o.persist||o.persist(),m(o)&&o.touches&&o.touches.length>1)return;const i=e.getSize(),r=e?e.getLeafHeaders().map((e=>[e.column.id,e.column.getSize()])):[[n.id,n.getSize()]],u=m(o)?Math.round(o.touches[0].clientX):o.clientX,a={},s=(e,n)=>{"number"==typeof n&&(t.setColumnSizingInfo((e=>{var t,l;const o=n-(null!=(t=null==e?void 0:e.startOffset)?t:0),i=Math.max(o/(null!=(l=null==e?void 0:e.startSize)?l:0),-.999999);return e.columnSizingStart.forEach((e=>{let[t,n]=e;a[t]=Math.round(100*Math.max(n+n*i,0))/100})),{...e,deltaOffset:o,deltaPercentage:i}})),"onChange"!==t.options.columnResizeMode&&"end"!==e||t.setColumnSizing((e=>({...e,...a}))))},g=e=>s("move",e),d=e=>{s("end",e),t.setColumnSizingInfo((e=>({...e,isResizingColumn:!1,startOffset:null,startSize:null,deltaOffset:null,deltaPercentage:null,columnSizingStart:[]})))},c={moveHandler:e=>g(e.clientX),upHandler:e=>{document.removeEventListener("mousemove",c.moveHandler),document.removeEventListener("mouseup",c.upHandler),d(e.clientX)}},p={moveHandler:e=>(e.cancelable&&(e.preventDefault(),e.stopPropagation()),g(e.touches[0].clientX),!1),upHandler:e=>{var t;document.removeEventListener("touchmove",p.moveHandler),document.removeEventListener("touchend",p.upHandler),e.cancelable&&(e.preventDefault(),e.stopPropagation()),d(null==(t=e.touches[0])?void 0:t.clientX)}},b=!!f()&&{passive:!1};m(o)?(document.addEventListener("touchmove",p.moveHandler,b),document.addEventListener("touchend",p.upHandler,b)):(document.addEventListener("mousemove",c.moveHandler,b),document.addEventListener("mouseup",c.upHandler,b)),t.setColumnSizingInfo((e=>({...e,startOffset:u,startSize:i,deltaOffset:0,deltaPercentage:0,columnSizingStart:r,isResizingColumn:n.id})))}}}),createTable:e=>({setColumnSizing:t=>null==e.options.onColumnSizingChange?void 0:e.options.onColumnSizingChange(t),setColumnSizingInfo:t=>null==e.options.onColumnSizingInfoChange?void 0:e.options.onColumnSizingInfoChange(t),resetColumnSizing:t=>{var n;e.setColumnSizing(t?{}:null!=(n=e.initialState.columnSizing)?n:{})},resetHeaderSizeInfo:t=>{var n;e.setColumnSizingInfo(t?{startOffset:null,startSize:null,deltaOffset:null,deltaPercentage:null,isResizingColumn:!1,columnSizingStart:[]}:null!=(n=e.initialState.columnSizingInfo)?n:{startOffset:null,startSize:null,deltaOffset:null,deltaPercentage:null,isResizingColumn:!1,columnSizingStart:[]})},getTotalSize:()=>{var t,n;return null!=(t=null==(n=e.getHeaderGroups()[0])?void 0:n.headers.reduce(((e,t)=>e+t.getSize()),0))?t:0},getLeftTotalSize:()=>{var t,n;return null!=(t=null==(n=e.getLeftHeaderGroups()[0])?void 0:n.headers.reduce(((e,t)=>e+t.getSize()),0))?t:0},getCenterTotalSize:()=>{var t,n;return null!=(t=null==(n=e.getCenterHeaderGroups()[0])?void 0:n.headers.reduce(((e,t)=>e+t.getSize()),0))?t:0},getRightTotalSize:()=>{var t,n;return null!=(t=null==(n=e.getRightHeaderGroups()[0])?void 0:n.headers.reduce(((e,t)=>e+t.getSize()),0))?t:0}})};let p=null;function f(){if("boolean"==typeof p)return p;let e=!1;try{const t={get passive(){return e=!0,!1}},n=()=>{};window.addEventListener("test",n,t),window.removeEventListener("test",n)}catch(t){e=!1}return p=e,p}function m(e){return"touchstart"===e.type}const b={getInitialState:e=>({expanded:{},...e}),getDefaultOptions:e=>({onExpandedChange:n("expanded",e),paginateExpandedRows:!0}),createTable:e=>{let t=!1,n=!1;return{_autoResetExpanded:()=>{var l,o;if(t){if(null!=(l=null!=(o=e.options.autoResetAll)?o:e.options.autoResetExpanded)?l:!e.options.manualExpanding){if(n)return;n=!0,e._queue((()=>{e.resetExpanded(),n=!1}))}}else e._queue((()=>{t=!0}))},setExpanded:t=>null==e.options.onExpandedChange?void 0:e.options.onExpandedChange(t),toggleAllRowsExpanded:t=>{(null!=t?t:!e.getIsAllRowsExpanded())?e.setExpanded(!0):e.setExpanded({})},resetExpanded:t=>{var n,l;e.setExpanded(t?{}:null!=(n=null==(l=e.initialState)?void 0:l.expanded)?n:{})},getCanSomeRowsExpand:()=>e.getPrePaginationRowModel().flatRows.some((e=>e.getCanExpand())),getToggleAllRowsExpandedHandler:()=>t=>{null==t.persist||t.persist(),e.toggleAllRowsExpanded()},getIsSomeRowsExpanded:()=>{const t=e.getState().expanded;return!0===t||Object.values(t).some(Boolean)},getIsAllRowsExpanded:()=>{const t=e.getState().expanded;return"boolean"==typeof t?!0===t:!!Object.keys(t).length&&!e.getRowModel().flatRows.some((e=>!e.getIsExpanded()))},getExpandedDepth:()=>{let t=0;return(!0===e.getState().expanded?Object.keys(e.getRowModel().rowsById):Object.keys(e.getState().expanded)).forEach((e=>{const n=e.split(".");t=Math.max(t,n.length)})),t},getPreExpandedRowModel:()=>e.getSortedRowModel(),getExpandedRowModel:()=>(!e._getExpandedRowModel&&e.options.getExpandedRowModel&&(e._getExpandedRowModel=e.options.getExpandedRowModel(e)),e.options.manualExpanding||!e._getExpandedRowModel?e.getPreExpandedRowModel():e._getExpandedRowModel())}},createRow:(e,t)=>({toggleExpanded:n=>{t.setExpanded((l=>{var o;const i=!0===l||!(null==l||!l[e.id]);let r={};if(!0===l?Object.keys(t.getRowModel().rowsById).forEach((e=>{r[e]=!0})):r=l,n=null!=(o=n)?o:!i,!i&&n)return{...r,[e.id]:!0};if(i&&!n){const{[e.id]:t,...n}=r;return n}return l}))},getIsExpanded:()=>{var n;const l=t.getState().expanded;return!!(null!=(n=null==t.options.getIsRowExpanded?void 0:t.options.getIsRowExpanded(e))?n:!0===l||(null==l?void 0:l[e.id]))},getCanExpand:()=>{var n,l,o;return null!=(n=null==t.options.getRowCanExpand?void 0:t.options.getRowCanExpand(e))?n:(null==(l=t.options.enableExpanding)||l)&&!(null==(o=e.subRows)||!o.length)},getToggleExpandedHandler:()=>{const t=e.getCanExpand();return()=>{t&&e.toggleExpanded()}}})},v=(e,t,n)=>{var l,o,i;const r=n.toLowerCase();return Boolean(null==(l=e.getValue(t))||null==(o=l.toString())||null==(i=o.toLowerCase())?void 0:i.includes(r))};v.autoRemove=e=>I(e);const w=(e,t,n)=>{var l,o;return Boolean(null==(l=e.getValue(t))||null==(o=l.toString())?void 0:o.includes(n))};w.autoRemove=e=>I(e);const h=(e,t,n)=>{var l,o;return(null==(l=e.getValue(t))||null==(o=l.toString())?void 0:o.toLowerCase())===(null==n?void 0:n.toLowerCase())};h.autoRemove=e=>I(e);const C=(e,t,n)=>{var l;return null==(l=e.getValue(t))?void 0:l.includes(n)};C.autoRemove=e=>I(e)||!(null!=e&&e.length);const S=(e,t,n)=>!n.some((n=>{var l;return!(null!=(l=e.getValue(t))&&l.includes(n))}));S.autoRemove=e=>I(e)||!(null!=e&&e.length);const R=(e,t,n)=>n.some((n=>{var l;return null==(l=e.getValue(t))?void 0:l.includes(n)}));R.autoRemove=e=>I(e)||!(null!=e&&e.length);const F=(e,t,n)=>e.getValue(t)===n;F.autoRemove=e=>I(e);const M=(e,t,n)=>e.getValue(t)==n;M.autoRemove=e=>I(e);const V=(e,t,n)=>{let[l,o]=n;const i=e.getValue(t);return i>=l&&i<=o};V.resolveFilterValue=e=>{let[t,n]=e,l="number"!=typeof t?parseFloat(t):t,o="number"!=typeof n?parseFloat(n):n,i=null===t||Number.isNaN(l)?-1/0:l,r=null===n||Number.isNaN(o)?1/0:o;if(i>r){const e=i;i=r,r=e}return[i,r]},V.autoRemove=e=>I(e)||I(e[0])&&I(e[1]);const y={includesString:v,includesStringSensitive:w,equalsString:h,arrIncludes:C,arrIncludesAll:S,arrIncludesSome:R,equals:F,weakEquals:M,inNumberRange:V};function I(e){return null==e||""===e}const x={getDefaultColumnDef:()=>({filterFn:"auto"}),getInitialState:e=>({columnFilters:[],globalFilter:void 0,...e}),getDefaultOptions:e=>({onColumnFiltersChange:n("columnFilters",e),onGlobalFilterChange:n("globalFilter",e),filterFromLeafRows:!1,maxLeafRowFilterDepth:100,globalFilterFn:"auto",getColumnCanGlobalFilter:t=>{var n,l;const o=null==(n=e.getCoreRowModel().flatRows[0])||null==(l=n._getAllCellsByColumnId()[t.id])?void 0:l.getValue();return"string"==typeof o||"number"==typeof o}}),createColumn:(e,n)=>({getAutoFilterFn:()=>{const t=n.getCoreRowModel().flatRows[0],l=null==t?void 0:t.getValue(e.id);return"string"==typeof l?y.includesString:"number"==typeof l?y.inNumberRange:"boolean"==typeof l||null!==l&&"object"==typeof l?y.equals:Array.isArray(l)?y.arrIncludes:y.weakEquals},getFilterFn:()=>{var t,o;return l(e.columnDef.filterFn)?e.columnDef.filterFn:"auto"===e.columnDef.filterFn?e.getAutoFilterFn():null!=(t=null==(o=n.options.filterFns)?void 0:o[e.columnDef.filterFn])?t:y[e.columnDef.filterFn]},getCanFilter:()=>{var t,l,o;return(null==(t=e.columnDef.enableColumnFilter)||t)&&(null==(l=n.options.enableColumnFilters)||l)&&(null==(o=n.options.enableFilters)||o)&&!!e.accessorFn},getCanGlobalFilter:()=>{var t,l,o,i;return(null==(t=e.columnDef.enableGlobalFilter)||t)&&(null==(l=n.options.enableGlobalFilter)||l)&&(null==(o=n.options.enableFilters)||o)&&(null==(i=null==n.options.getColumnCanGlobalFilter?void 0:n.options.getColumnCanGlobalFilter(e))||i)&&!!e.accessorFn},getIsFiltered:()=>e.getFilterIndex()>-1,getFilterValue:()=>{var t,l;return null==(t=n.getState().columnFilters)||null==(l=t.find((t=>t.id===e.id)))?void 0:l.value},getFilterIndex:()=>{var t,l;return null!=(t=null==(l=n.getState().columnFilters)?void 0:l.findIndex((t=>t.id===e.id)))?t:-1},setFilterValue:l=>{n.setColumnFilters((n=>{const o=e.getFilterFn(),i=null==n?void 0:n.find((t=>t.id===e.id)),r=t(l,i?i.value:void 0);var u;if(_(o,r,e))return null!=(u=null==n?void 0:n.filter((t=>t.id!==e.id)))?u:[];const a={id:e.id,value:r};var s;return i?null!=(s=null==n?void 0:n.map((t=>t.id===e.id?a:t)))?s:[]:null!=n&&n.length?[...n,a]:[a]}))},_getFacetedRowModel:n.options.getFacetedRowModel&&n.options.getFacetedRowModel(n,e.id),getFacetedRowModel:()=>e._getFacetedRowModel?e._getFacetedRowModel():n.getPreFilteredRowModel(),_getFacetedUniqueValues:n.options.getFacetedUniqueValues&&n.options.getFacetedUniqueValues(n,e.id),getFacetedUniqueValues:()=>e._getFacetedUniqueValues?e._getFacetedUniqueValues():new Map,_getFacetedMinMaxValues:n.options.getFacetedMinMaxValues&&n.options.getFacetedMinMaxValues(n,e.id),getFacetedMinMaxValues:()=>{if(e._getFacetedMinMaxValues)return e._getFacetedMinMaxValues()}}),createRow:(e,t)=>({columnFilters:{},columnFiltersMeta:{}}),createTable:e=>({getGlobalAutoFilterFn:()=>y.includesString,getGlobalFilterFn:()=>{var t,n;const{globalFilterFn:o}=e.options;return l(o)?o:"auto"===o?e.getGlobalAutoFilterFn():null!=(t=null==(n=e.options.filterFns)?void 0:n[o])?t:y[o]},setColumnFilters:n=>{const l=e.getAllLeafColumns();null==e.options.onColumnFiltersChange||e.options.onColumnFiltersChange((e=>{var o;return null==(o=t(n,e))?void 0:o.filter((e=>{const t=l.find((t=>t.id===e.id));if(t){if(_(t.getFilterFn(),e.value,t))return!1}return!0}))}))},setGlobalFilter:t=>{null==e.options.onGlobalFilterChange||e.options.onGlobalFilterChange(t)},resetGlobalFilter:t=>{e.setGlobalFilter(t?void 0:e.initialState.globalFilter)},resetColumnFilters:t=>{var n,l;e.setColumnFilters(t?[]:null!=(n=null==(l=e.initialState)?void 0:l.columnFilters)?n:[])},getPreFilteredRowModel:()=>e.getCoreRowModel(),getFilteredRowModel:()=>(!e._getFilteredRowModel&&e.options.getFilteredRowModel&&(e._getFilteredRowModel=e.options.getFilteredRowModel(e)),e.options.manualFiltering||!e._getFilteredRowModel?e.getPreFilteredRowModel():e._getFilteredRowModel()),_getGlobalFacetedRowModel:e.options.getFacetedRowModel&&e.options.getFacetedRowModel(e,"__global__"),getGlobalFacetedRowModel:()=>e.options.manualFiltering||!e._getGlobalFacetedRowModel?e.getPreFilteredRowModel():e._getGlobalFacetedRowModel(),_getGlobalFacetedUniqueValues:e.options.getFacetedUniqueValues&&e.options.getFacetedUniqueValues(e,"__global__"),getGlobalFacetedUniqueValues:()=>e._getGlobalFacetedUniqueValues?e._getGlobalFacetedUniqueValues():new Map,_getGlobalFacetedMinMaxValues:e.options.getFacetedMinMaxValues&&e.options.getFacetedMinMaxValues(e,"__global__"),getGlobalFacetedMinMaxValues:()=>{if(e._getGlobalFacetedMinMaxValues)return e._getGlobalFacetedMinMaxValues()}})};function _(e,t,n){return!(!e||!e.autoRemove)&&e.autoRemove(t,n)||void 0===t||"string"==typeof t&&!t}const P={sum:(e,t,n)=>n.reduce(((t,n)=>{const l=n.getValue(e);return t+("number"==typeof l?l:0)}),0),min:(e,t,n)=>{let l;return n.forEach((t=>{const n=t.getValue(e);null!=n&&(l>n||void 0===l&&n>=n)&&(l=n)})),l},max:(e,t,n)=>{let l;return n.forEach((t=>{const n=t.getValue(e);null!=n&&(l<n||void 0===l&&n>=n)&&(l=n)})),l},extent:(e,t,n)=>{let l,o;return n.forEach((t=>{const n=t.getValue(e);null!=n&&(void 0===l?n>=n&&(l=o=n):(l>n&&(l=n),o<n&&(o=n)))})),[l,o]},mean:(e,t)=>{let n=0,l=0;if(t.forEach((t=>{let o=t.getValue(e);null!=o&&(o=+o)>=o&&(++n,l+=o)})),n)return l/n},median:(e,t)=>{if(!t.length)return;const n=t.map((t=>t.getValue(e)));if(!o(n))return;if(1===n.length)return n[0];const l=Math.floor(n.length/2),i=n.sort(((e,t)=>e-t));return n.length%2!=0?i[l]:(i[l-1]+i[l])/2},unique:(e,t)=>Array.from(new Set(t.map((t=>t.getValue(e)))).values()),uniqueCount:(e,t)=>new Set(t.map((t=>t.getValue(e)))).size,count:(e,t)=>t.length},A={getDefaultColumnDef:()=>({aggregatedCell:e=>{var t,n;return null!=(t=null==(n=e.getValue())||null==n.toString?void 0:n.toString())?t:null},aggregationFn:"auto"}),getInitialState:e=>({grouping:[],...e}),getDefaultOptions:e=>({onGroupingChange:n("grouping",e),groupedColumnMode:"reorder"}),createColumn:(e,t)=>({toggleGrouping:()=>{t.setGrouping((t=>null!=t&&t.includes(e.id)?t.filter((t=>t!==e.id)):[...null!=t?t:[],e.id]))},getCanGroup:()=>{var n,l,o,i;return null!=(n=null==(l=null!=(o=null==(i=e.columnDef.enableGrouping)||i)?o:t.options.enableGrouping)||l)?n:!!e.accessorFn},getIsGrouped:()=>{var n;return null==(n=t.getState().grouping)?void 0:n.includes(e.id)},getGroupedIndex:()=>{var n;return null==(n=t.getState().grouping)?void 0:n.indexOf(e.id)},getToggleGroupingHandler:()=>{const t=e.getCanGroup();return()=>{t&&e.toggleGrouping()}},getAutoAggregationFn:()=>{const n=t.getCoreRowModel().flatRows[0],l=null==n?void 0:n.getValue(e.id);return"number"==typeof l?P.sum:"[object Date]"===Object.prototype.toString.call(l)?P.extent:void 0},getAggregationFn:()=>{var n,o;if(!e)throw new Error;return l(e.columnDef.aggregationFn)?e.columnDef.aggregationFn:"auto"===e.columnDef.aggregationFn?e.getAutoAggregationFn():null!=(n=null==(o=t.options.aggregationFns)?void 0:o[e.columnDef.aggregationFn])?n:P[e.columnDef.aggregationFn]}}),createTable:e=>({setGrouping:t=>null==e.options.onGroupingChange?void 0:e.options.onGroupingChange(t),resetGrouping:t=>{var n,l;e.setGrouping(t?[]:null!=(n=null==(l=e.initialState)?void 0:l.grouping)?n:[])},getPreGroupedRowModel:()=>e.getFilteredRowModel(),getGroupedRowModel:()=>(!e._getGroupedRowModel&&e.options.getGroupedRowModel&&(e._getGroupedRowModel=e.options.getGroupedRowModel(e)),e.options.manualGrouping||!e._getGroupedRowModel?e.getPreGroupedRowModel():e._getGroupedRowModel())}),createRow:(e,t)=>({getIsGrouped:()=>!!e.groupingColumnId,getGroupingValue:n=>{if(e._groupingValuesCache.hasOwnProperty(n))return e._groupingValuesCache[n];const l=t.getColumn(n);return null!=l&&l.columnDef.getGroupingValue?(e._groupingValuesCache[n]=l.columnDef.getGroupingValue(e.original),e._groupingValuesCache[n]):e.getValue(n)},_groupingValuesCache:{}}),createCell:(e,t,n,l)=>({getIsGrouped:()=>t.getIsGrouped()&&t.id===n.groupingColumnId,getIsPlaceholder:()=>!e.getIsGrouped()&&t.getIsGrouped(),getIsAggregated:()=>{var t;return!e.getIsGrouped()&&!e.getIsPlaceholder()&&!(null==(t=n.subRows)||!t.length)}})};function E(e,t,n){if(null==t||!t.length||!n)return e;const l=e.filter((e=>!t.includes(e.id)));if("remove"===n)return l;return[...t.map((t=>e.find((e=>e.id===t)))).filter(Boolean),...l]}const G={getInitialState:e=>({columnOrder:[],...e}),getDefaultOptions:e=>({onColumnOrderChange:n("columnOrder",e)}),createTable:e=>({setColumnOrder:t=>null==e.options.onColumnOrderChange?void 0:e.options.onColumnOrderChange(t),resetColumnOrder:t=>{var n;e.setColumnOrder(t?[]:null!=(n=e.initialState.columnOrder)?n:[])},_getOrderColumnsFn:r((()=>[e.getState().columnOrder,e.getState().grouping,e.options.groupedColumnMode]),((e,t,n)=>l=>{let o=[];if(null!=e&&e.length){const t=[...e],n=[...l];for(;n.length&&t.length;){const e=t.shift(),l=n.findIndex((t=>t.id===e));l>-1&&o.push(n.splice(l,1)[0])}o=[...o,...n]}else o=l;return E(o,t,n)}),{key:!1})})},H={getInitialState:e=>({...e,pagination:{pageIndex:0,pageSize:10,...null==e?void 0:e.pagination}}),getDefaultOptions:e=>({onPaginationChange:n("pagination",e)}),createTable:e=>{let n=!1,l=!1;return{_autoResetPageIndex:()=>{var t,o;if(n){if(null!=(t=null!=(o=e.options.autoResetAll)?o:e.options.autoResetPageIndex)?t:!e.options.manualPagination){if(l)return;l=!0,e._queue((()=>{e.resetPageIndex(),l=!1}))}}else e._queue((()=>{n=!0}))},setPagination:n=>null==e.options.onPaginationChange?void 0:e.options.onPaginationChange((e=>t(n,e))),resetPagination:t=>{var n;e.setPagination(t?{pageIndex:0,pageSize:10}:null!=(n=e.initialState.pagination)?n:{pageIndex:0,pageSize:10})},setPageIndex:n=>{e.setPagination((l=>{let o=t(n,l.pageIndex);const i=void 0===e.options.pageCount||-1===e.options.pageCount?Number.MAX_SAFE_INTEGER:e.options.pageCount-1;return o=Math.max(0,Math.min(o,i)),{...l,pageIndex:o}}))},resetPageIndex:t=>{var n,l,o;e.setPageIndex(t?0:null!=(n=null==(l=e.initialState)||null==(o=l.pagination)?void 0:o.pageIndex)?n:0)},resetPageSize:t=>{var n,l,o;e.setPageSize(t?10:null!=(n=null==(l=e.initialState)||null==(o=l.pagination)?void 0:o.pageSize)?n:10)},setPageSize:n=>{e.setPagination((e=>{const l=Math.max(1,t(n,e.pageSize)),o=e.pageSize*e.pageIndex,i=Math.floor(o/l);return{...e,pageIndex:i,pageSize:l}}))},setPageCount:n=>e.setPagination((l=>{var o;let i=t(n,null!=(o=e.options.pageCount)?o:-1);return"number"==typeof i&&(i=Math.max(-1,i)),{...l,pageCount:i}})),getPageOptions:r((()=>[e.getPageCount()]),(e=>{let t=[];return e&&e>0&&(t=[...new Array(e)].fill(null).map(((e,t)=>t))),t}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable}}),getCanPreviousPage:()=>e.getState().pagination.pageIndex>0,getCanNextPage:()=>{const{pageIndex:t}=e.getState().pagination,n=e.getPageCount();return-1===n||0!==n&&t<n-1},previousPage:()=>e.setPageIndex((e=>e-1)),nextPage:()=>e.setPageIndex((e=>e+1)),getPrePaginationRowModel:()=>e.getExpandedRowModel(),getPaginationRowModel:()=>(!e._getPaginationRowModel&&e.options.getPaginationRowModel&&(e._getPaginationRowModel=e.options.getPaginationRowModel(e)),e.options.manualPagination||!e._getPaginationRowModel?e.getPrePaginationRowModel():e._getPaginationRowModel()),getPageCount:()=>{var t;return null!=(t=e.options.pageCount)?t:Math.ceil(e.getPrePaginationRowModel().rows.length/e.getState().pagination.pageSize)}}}},z={getInitialState:e=>({columnPinning:{left:[],right:[]},...e}),getDefaultOptions:e=>({onColumnPinningChange:n("columnPinning",e)}),createColumn:(e,t)=>({pin:n=>{const l=e.getLeafColumns().map((e=>e.id)).filter(Boolean);t.setColumnPinning((e=>{var t,o,i,r,u,a;return"right"===n?{left:(null!=(i=null==e?void 0:e.left)?i:[]).filter((e=>!(null!=l&&l.includes(e)))),right:[...(null!=(r=null==e?void 0:e.right)?r:[]).filter((e=>!(null!=l&&l.includes(e)))),...l]}:"left"===n?{left:[...(null!=(u=null==e?void 0:e.left)?u:[]).filter((e=>!(null!=l&&l.includes(e)))),...l],right:(null!=(a=null==e?void 0:e.right)?a:[]).filter((e=>!(null!=l&&l.includes(e))))}:{left:(null!=(t=null==e?void 0:e.left)?t:[]).filter((e=>!(null!=l&&l.includes(e)))),right:(null!=(o=null==e?void 0:e.right)?o:[]).filter((e=>!(null!=l&&l.includes(e))))}}))},getCanPin:()=>e.getLeafColumns().some((e=>{var n,l;return(null==(n=e.columnDef.enablePinning)||n)&&(null==(l=t.options.enablePinning)||l)})),getIsPinned:()=>{const n=e.getLeafColumns().map((e=>e.id)),{left:l,right:o}=t.getState().columnPinning,i=n.some((e=>null==l?void 0:l.includes(e))),r=n.some((e=>null==o?void 0:o.includes(e)));return i?"left":!!r&&"right"},getPinnedIndex:()=>{var n,l,o;const i=e.getIsPinned();return i?null!=(n=null==(l=t.getState().columnPinning)||null==(o=l[i])?void 0:o.indexOf(e.id))?n:-1:0}}),createRow:(e,t)=>({getCenterVisibleCells:r((()=>[e._getAllVisibleCells(),t.getState().columnPinning.left,t.getState().columnPinning.right]),((e,t,n)=>{const l=[...null!=t?t:[],...null!=n?n:[]];return e.filter((e=>!l.includes(e.column.id)))}),{key:"row.getCenterVisibleCells",debug:()=>{var e;return null!=(e=t.options.debugAll)?e:t.options.debugRows}}),getLeftVisibleCells:r((()=>[e._getAllVisibleCells(),t.getState().columnPinning.left,,]),((e,t)=>(null!=t?t:[]).map((t=>e.find((e=>e.column.id===t)))).filter(Boolean).map((e=>({...e,position:"left"})))),{key:"row.getLeftVisibleCells",debug:()=>{var e;return null!=(e=t.options.debugAll)?e:t.options.debugRows}}),getRightVisibleCells:r((()=>[e._getAllVisibleCells(),t.getState().columnPinning.right]),((e,t)=>(null!=t?t:[]).map((t=>e.find((e=>e.column.id===t)))).filter(Boolean).map((e=>({...e,position:"right"})))),{key:"row.getRightVisibleCells",debug:()=>{var e;return null!=(e=t.options.debugAll)?e:t.options.debugRows}})}),createTable:e=>({setColumnPinning:t=>null==e.options.onColumnPinningChange?void 0:e.options.onColumnPinningChange(t),resetColumnPinning:t=>{var n,l;return e.setColumnPinning(t?{left:[],right:[]}:null!=(n=null==(l=e.initialState)?void 0:l.columnPinning)?n:{left:[],right:[]})},getIsSomeColumnsPinned:t=>{var n;const l=e.getState().columnPinning;var o,i;return t?Boolean(null==(n=l[t])?void 0:n.length):Boolean((null==(o=l.left)?void 0:o.length)||(null==(i=l.right)?void 0:i.length))},getLeftLeafColumns:r((()=>[e.getAllLeafColumns(),e.getState().columnPinning.left]),((e,t)=>(null!=t?t:[]).map((t=>e.find((e=>e.id===t)))).filter(Boolean)),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugColumns}}),getRightLeafColumns:r((()=>[e.getAllLeafColumns(),e.getState().columnPinning.right]),((e,t)=>(null!=t?t:[]).map((t=>e.find((e=>e.id===t)))).filter(Boolean)),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugColumns}}),getCenterLeafColumns:r((()=>[e.getAllLeafColumns(),e.getState().columnPinning.left,e.getState().columnPinning.right]),((e,t,n)=>{const l=[...null!=t?t:[],...null!=n?n:[]];return e.filter((e=>!l.includes(e.id)))}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugColumns}})})},L={getInitialState:e=>({rowSelection:{},...e}),getDefaultOptions:e=>({onRowSelectionChange:n("rowSelection",e),enableRowSelection:!0,enableMultiRowSelection:!0,enableSubRowSelection:!0}),createTable:e=>({setRowSelection:t=>null==e.options.onRowSelectionChange?void 0:e.options.onRowSelectionChange(t),resetRowSelection:t=>{var n;return e.setRowSelection(t?{}:null!=(n=e.initialState.rowSelection)?n:{})},toggleAllRowsSelected:t=>{e.setRowSelection((n=>{t=void 0!==t?t:!e.getIsAllRowsSelected();const l={...n},o=e.getPreGroupedRowModel().flatRows;return t?o.forEach((e=>{e.getCanSelect()&&(l[e.id]=!0)})):o.forEach((e=>{delete l[e.id]})),l}))},toggleAllPageRowsSelected:t=>e.setRowSelection((n=>{const l=void 0!==t?t:!e.getIsAllPageRowsSelected(),o={...n};return e.getRowModel().rows.forEach((t=>{D(o,t.id,l,e)})),o})),getPreSelectedRowModel:()=>e.getCoreRowModel(),getSelectedRowModel:r((()=>[e.getState().rowSelection,e.getCoreRowModel()]),((t,n)=>Object.keys(t).length?k(e,n):{rows:[],flatRows:[],rowsById:{}}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable}}),getFilteredSelectedRowModel:r((()=>[e.getState().rowSelection,e.getFilteredRowModel()]),((t,n)=>Object.keys(t).length?k(e,n):{rows:[],flatRows:[],rowsById:{}}),{key:"getFilteredSelectedRowModel",debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable}}),getGroupedSelectedRowModel:r((()=>[e.getState().rowSelection,e.getSortedRowModel()]),((t,n)=>Object.keys(t).length?k(e,n):{rows:[],flatRows:[],rowsById:{}}),{key:"getGroupedSelectedRowModel",debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable}}),getIsAllRowsSelected:()=>{const t=e.getFilteredRowModel().flatRows,{rowSelection:n}=e.getState();let l=Boolean(t.length&&Object.keys(n).length);return l&&t.some((e=>e.getCanSelect()&&!n[e.id]))&&(l=!1),l},getIsAllPageRowsSelected:()=>{const t=e.getPaginationRowModel().flatRows.filter((e=>e.getCanSelect())),{rowSelection:n}=e.getState();let l=!!t.length;return l&&t.some((e=>!n[e.id]))&&(l=!1),l},getIsSomeRowsSelected:()=>{var t;const n=Object.keys(null!=(t=e.getState().rowSelection)?t:{}).length;return n>0&&n<e.getFilteredRowModel().flatRows.length},getIsSomePageRowsSelected:()=>{const t=e.getPaginationRowModel().flatRows;return!e.getIsAllPageRowsSelected()&&t.filter((e=>e.getCanSelect())).some((e=>e.getIsSelected()||e.getIsSomeSelected()))},getToggleAllRowsSelectedHandler:()=>t=>{e.toggleAllRowsSelected(t.target.checked)},getToggleAllPageRowsSelectedHandler:()=>t=>{e.toggleAllPageRowsSelected(t.target.checked)}}),createRow:(e,t)=>({toggleSelected:n=>{const l=e.getIsSelected();t.setRowSelection((o=>{if(l===(n=void 0!==n?n:!l))return o;const i={...o};return D(i,e.id,n,t),i}))},getIsSelected:()=>{const{rowSelection:n}=t.getState();return O(e,n)},getIsSomeSelected:()=>{const{rowSelection:n}=t.getState();return"some"===T(e,n)},getIsAllSubRowsSelected:()=>{const{rowSelection:n}=t.getState();return"all"===T(e,n)},getCanSelect:()=>{var n;return"function"==typeof t.options.enableRowSelection?t.options.enableRowSelection(e):null==(n=t.options.enableRowSelection)||n},getCanSelectSubRows:()=>{var n;return"function"==typeof t.options.enableSubRowSelection?t.options.enableSubRowSelection(e):null==(n=t.options.enableSubRowSelection)||n},getCanMultiSelect:()=>{var n;return"function"==typeof t.options.enableMultiRowSelection?t.options.enableMultiRowSelection(e):null==(n=t.options.enableMultiRowSelection)||n},getToggleSelectedHandler:()=>{const t=e.getCanSelect();return n=>{var l;t&&e.toggleSelected(null==(l=n.target)?void 0:l.checked)}}})},D=(e,t,n,l)=>{var o;const i=l.getRow(t);n?(i.getCanMultiSelect()||Object.keys(e).forEach((t=>delete e[t])),i.getCanSelect()&&(e[t]=!0)):delete e[t],null!=(o=i.subRows)&&o.length&&i.getCanSelectSubRows()&&i.subRows.forEach((t=>D(e,t.id,n,l)))};function k(e,t){const n=e.getState().rowSelection,l=[],o={},i=function(e,t){return e.map((e=>{var t;const r=O(e,n);if(r&&(l.push(e),o[e.id]=e),null!=(t=e.subRows)&&t.length&&(e={...e,subRows:i(e.subRows)}),r)return e})).filter(Boolean)};return{rows:i(t.rows),flatRows:l,rowsById:o}}function O(e,t){var n;return null!=(n=t[e.id])&&n}function T(e,t,n){if(e.subRows&&e.subRows.length){let n=!0,l=!1;return e.subRows.forEach((e=>{l&&!n||(O(e,t)?l=!0:n=!1)})),n?"all":!!l&&"some"}return!1}const B=/([0-9]+)/gm;function q(e,t){return e===t?0:e>t?1:-1}function j(e){return"number"==typeof e?isNaN(e)||e===1/0||e===-1/0?"":String(e):"string"==typeof e?e:""}function N(e,t){const n=e.split(B).filter(Boolean),l=t.split(B).filter(Boolean);for(;n.length&&l.length;){const e=n.shift(),t=l.shift(),o=parseInt(e,10),i=parseInt(t,10),r=[o,i].sort();if(isNaN(r[0])){if(e>t)return 1;if(t>e)return-1}else{if(isNaN(r[1]))return isNaN(o)?-1:1;if(o>i)return 1;if(i>o)return-1}}return n.length-l.length}const U={alphanumeric:(e,t,n)=>N(j(e.getValue(n)).toLowerCase(),j(t.getValue(n)).toLowerCase()),alphanumericCaseSensitive:(e,t,n)=>N(j(e.getValue(n)),j(t.getValue(n))),text:(e,t,n)=>q(j(e.getValue(n)).toLowerCase(),j(t.getValue(n)).toLowerCase()),textCaseSensitive:(e,t,n)=>q(j(e.getValue(n)),j(t.getValue(n))),datetime:(e,t,n)=>{const l=e.getValue(n),o=t.getValue(n);return l>o?1:l<o?-1:0},basic:(e,t,n)=>q(e.getValue(n),t.getValue(n))},$={getInitialState:e=>({sorting:[],...e}),getDefaultColumnDef:()=>({sortingFn:"auto"}),getDefaultOptions:e=>({onSortingChange:n("sorting",e),isMultiSortEvent:e=>e.shiftKey}),createColumn:(e,t)=>({getAutoSortingFn:()=>{const n=t.getFilteredRowModel().flatRows.slice(10);let l=!1;for(const t of n){const n=null==t?void 0:t.getValue(e.id);if("[object Date]"===Object.prototype.toString.call(n))return U.datetime;if("string"==typeof n&&(l=!0,n.split(B).length>1))return U.alphanumeric}return l?U.text:U.basic},getAutoSortDir:()=>{const n=t.getFilteredRowModel().flatRows[0];return"string"==typeof(null==n?void 0:n.getValue(e.id))?"asc":"desc"},getSortingFn:()=>{var n,o;if(!e)throw new Error;return l(e.columnDef.sortingFn)?e.columnDef.sortingFn:"auto"===e.columnDef.sortingFn?e.getAutoSortingFn():null!=(n=null==(o=t.options.sortingFns)?void 0:o[e.columnDef.sortingFn])?n:U[e.columnDef.sortingFn]},toggleSorting:(n,l)=>{const o=e.getNextSortingOrder(),i=null!=n;t.setSorting((r=>{const u=null==r?void 0:r.find((t=>t.id===e.id)),a=null==r?void 0:r.findIndex((t=>t.id===e.id));let s,g=[],d=i?n:"desc"===o;var c;(s=null!=r&&r.length&&e.getCanMultiSort()&&l?u?"toggle":"add":null!=r&&r.length&&a!==r.length-1?"replace":u?"toggle":"replace","toggle"===s&&(i||o||(s="remove")),"add"===s)?(g=[...r,{id:e.id,desc:d}],g.splice(0,g.length-(null!=(c=t.options.maxMultiSortColCount)?c:Number.MAX_SAFE_INTEGER))):g="toggle"===s?r.map((t=>t.id===e.id?{...t,desc:d}:t)):"remove"===s?r.filter((t=>t.id!==e.id)):[{id:e.id,desc:d}];return g}))},getFirstSortDir:()=>{var n,l;return(null!=(n=null!=(l=e.columnDef.sortDescFirst)?l:t.options.sortDescFirst)?n:"desc"===e.getAutoSortDir())?"desc":"asc"},getNextSortingOrder:n=>{var l,o;const i=e.getFirstSortDir(),r=e.getIsSorted();return r?!!(r===i||null!=(l=t.options.enableSortingRemoval)&&!l||n&&null!=(o=t.options.enableMultiRemove)&&!o)&&("desc"===r?"asc":"desc"):i},getCanSort:()=>{var n,l;return(null==(n=e.columnDef.enableSorting)||n)&&(null==(l=t.options.enableSorting)||l)&&!!e.accessorFn},getCanMultiSort:()=>{var n,l;return null!=(n=null!=(l=e.columnDef.enableMultiSort)?l:t.options.enableMultiSort)?n:!!e.accessorFn},getIsSorted:()=>{var n;const l=null==(n=t.getState().sorting)?void 0:n.find((t=>t.id===e.id));return!!l&&(l.desc?"desc":"asc")},getSortIndex:()=>{var n,l;return null!=(n=null==(l=t.getState().sorting)?void 0:l.findIndex((t=>t.id===e.id)))?n:-1},clearSorting:()=>{t.setSorting((t=>null!=t&&t.length?t.filter((t=>t.id!==e.id)):[]))},getToggleSortingHandler:()=>{const n=e.getCanSort();return l=>{n&&(null==l.persist||l.persist(),null==e.toggleSorting||e.toggleSorting(void 0,!!e.getCanMultiSort()&&(null==t.options.isMultiSortEvent?void 0:t.options.isMultiSortEvent(l))))}}}),createTable:e=>({setSorting:t=>null==e.options.onSortingChange?void 0:e.options.onSortingChange(t),resetSorting:t=>{var n,l;e.setSorting(t?[]:null!=(n=null==(l=e.initialState)?void 0:l.sorting)?n:[])},getPreSortedRowModel:()=>e.getGroupedRowModel(),getSortedRowModel:()=>(!e._getSortedRowModel&&e.options.getSortedRowModel&&(e._getSortedRowModel=e.options.getSortedRowModel(e)),e.options.manualSorting||!e._getSortedRowModel?e.getPreSortedRowModel():e._getSortedRowModel())})},X={getInitialState:e=>({columnVisibility:{},...e}),getDefaultOptions:e=>({onColumnVisibilityChange:n("columnVisibility",e)}),createColumn:(e,t)=>({toggleVisibility:n=>{e.getCanHide()&&t.setColumnVisibility((t=>({...t,[e.id]:null!=n?n:!e.getIsVisible()})))},getIsVisible:()=>{var n,l;return null==(n=null==(l=t.getState().columnVisibility)?void 0:l[e.id])||n},getCanHide:()=>{var n,l;return(null==(n=e.columnDef.enableHiding)||n)&&(null==(l=t.options.enableHiding)||l)},getToggleVisibilityHandler:()=>t=>{null==e.toggleVisibility||e.toggleVisibility(t.target.checked)}}),createRow:(e,t)=>({_getAllVisibleCells:r((()=>[e.getAllCells(),t.getState().columnVisibility]),(e=>e.filter((e=>e.column.getIsVisible()))),{key:"row._getAllVisibleCells",debug:()=>{var e;return null!=(e=t.options.debugAll)?e:t.options.debugRows}}),getVisibleCells:r((()=>[e.getLeftVisibleCells(),e.getCenterVisibleCells(),e.getRightVisibleCells()]),((e,t,n)=>[...e,...t,...n]),{key:!1,debug:()=>{var e;return null!=(e=t.options.debugAll)?e:t.options.debugRows}})}),createTable:e=>{const t=(t,n)=>r((()=>[n(),n().filter((e=>e.getIsVisible())).map((e=>e.id)).join("_")]),(e=>e.filter((e=>null==e.getIsVisible?void 0:e.getIsVisible()))),{key:t,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugColumns}});return{getVisibleFlatColumns:t("getVisibleFlatColumns",(()=>e.getAllFlatColumns())),getVisibleLeafColumns:t("getVisibleLeafColumns",(()=>e.getAllLeafColumns())),getLeftVisibleLeafColumns:t("getLeftVisibleLeafColumns",(()=>e.getLeftLeafColumns())),getRightVisibleLeafColumns:t("getRightVisibleLeafColumns",(()=>e.getRightLeafColumns())),getCenterVisibleLeafColumns:t("getCenterVisibleLeafColumns",(()=>e.getCenterLeafColumns())),setColumnVisibility:t=>null==e.options.onColumnVisibilityChange?void 0:e.options.onColumnVisibilityChange(t),resetColumnVisibility:t=>{var n;e.setColumnVisibility(t?{}:null!=(n=e.initialState.columnVisibility)?n:{})},toggleAllColumnsVisible:t=>{var n;t=null!=(n=t)?n:!e.getIsAllColumnsVisible(),e.setColumnVisibility(e.getAllLeafColumns().reduce(((e,n)=>({...e,[n.id]:t||!(null!=n.getCanHide&&n.getCanHide())})),{}))},getIsAllColumnsVisible:()=>!e.getAllLeafColumns().some((e=>!(null!=e.getIsVisible&&e.getIsVisible()))),getIsSomeColumnsVisible:()=>e.getAllLeafColumns().some((e=>null==e.getIsVisible?void 0:e.getIsVisible())),getToggleAllColumnsVisibilityHandler:()=>t=>{var n;e.toggleAllColumnsVisible(null==(n=t.target)?void 0:n.checked)}}}},K=[s,X,G,z,x,$,A,b,H,L,c];function J(e,t,n,l){const o={id:`${t.id}_${n.id}`,row:t,column:n,getValue:()=>t.getValue(l),renderValue:()=>{var t;return null!=(t=o.getValue())?t:e.options.renderFallbackValue},getContext:r((()=>[e,n,t,o]),((e,t,n,l)=>({table:e,column:t,row:n,cell:l,getValue:l.getValue,renderValue:l.renderValue})),{key:!1,debug:()=>e.options.debugAll})};return e._features.forEach((l=>{Object.assign(o,null==l.createCell?void 0:l.createCell(o,n,t,e))}),{}),o}const Q=(e,t,n,l,o,u,a)=>{let s={id:t,index:l,original:n,depth:o,parentId:a,_valuesCache:{},_uniqueValuesCache:{},getValue:t=>{if(s._valuesCache.hasOwnProperty(t))return s._valuesCache[t];const n=e.getColumn(t);return null!=n&&n.accessorFn?(s._valuesCache[t]=n.accessorFn(s.original,l),s._valuesCache[t]):void 0},getUniqueValues:t=>{if(s._uniqueValuesCache.hasOwnProperty(t))return s._uniqueValuesCache[t];const n=e.getColumn(t);return null!=n&&n.accessorFn?n.columnDef.getUniqueValues?(s._uniqueValuesCache[t]=n.columnDef.getUniqueValues(s.original,l),s._uniqueValuesCache[t]):(s._uniqueValuesCache[t]=[s.getValue(t)],s._uniqueValuesCache[t]):void 0},renderValue:t=>{var n;return null!=(n=s.getValue(t))?n:e.options.renderFallbackValue},subRows:null!=u?u:[],getLeafRows:()=>i(s.subRows,(e=>e.subRows)),getParentRow:()=>s.parentId?e.getRow(s.parentId):void 0,getParentRows:()=>{let e=[],t=s;for(;;){const n=t.getParentRow();if(!n)break;e.push(n),t=n}return e.reverse()},getAllCells:r((()=>[e.getAllLeafColumns()]),(t=>t.map((t=>J(e,s,t,t.id)))),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugRows}}),_getAllCellsByColumnId:r((()=>[s.getAllCells()]),(e=>e.reduce(((e,t)=>(e[t.column.id]=t,e)),{})),{key:"row.getAllCellsByColumnId",debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugRows}})};for(let t=0;t<e._features.length;t++){const n=e._features[t];Object.assign(s,null==n||null==n.createRow?void 0:n.createRow(s,e))}return s};function W(e,t,n){return n.options.filterFromLeafRows?function(e,t,n){var l;const o=[],i={},r=null!=(l=n.options.maxLeafRowFilterDepth)?l:100,u=function(e,l){void 0===l&&(l=0);const o=[];for(let s=0;s<e.length;s++){var a;let g=e[s];const d=Q(n,g.id,g.original,g.index,g.depth,void 0,g.parentId);if(d.columnFilters=g.columnFilters,null!=(a=g.subRows)&&a.length&&l<r){if(d.subRows=u(g.subRows,l+1),g=d,t(g)&&!d.subRows.length){o.push(g),i[g.id]=g,i[s]=g;continue}if(t(g)||d.subRows.length){o.push(g),i[g.id]=g,i[s]=g;continue}}else g=d,t(g)&&(o.push(g),i[g.id]=g,i[s]=g)}return o};return{rows:u(e),flatRows:o,rowsById:i}}(e,t,n):function(e,t,n){var l;const o=[],i={},r=null!=(l=n.options.maxLeafRowFilterDepth)?l:100,u=function(e,l){void 0===l&&(l=0);const a=[];for(let g=0;g<e.length;g++){let d=e[g];if(t(d)){var s;if(null!=(s=d.subRows)&&s.length&&l<r){const e=Q(n,d.id,d.original,d.index,d.depth,void 0,d.parentId);e.subRows=u(d.subRows,l+1),d=e}a.push(d),o.push(d),i[d.id]=d}}return a};return{rows:u(e),flatRows:o,rowsById:i}}(e,t,n)}function Y(e){const t=[],n=e=>{var l;t.push(e),null!=(l=e.subRows)&&l.length&&e.getIsExpanded()&&e.subRows.forEach(n)};return e.rows.forEach(n),{rows:t,flatRows:e.flatRows,rowsById:e.rowsById}}e.ColumnSizing=c,e.Expanding=b,e.Filters=x,e.Grouping=A,e.Headers=s,e.Ordering=G,e.Pagination=H,e.Pinning=z,e.RowSelection=L,e.Sorting=$,e.Visibility=X,e.aggregationFns=P,e.buildHeaderGroups=g,e.createCell=J,e.createColumn=u,e.createColumnHelper=function(){return{accessor:(e,t)=>"function"==typeof e?{...t,accessorFn:e}:{...t,accessorKey:e},display:e=>e,group:e=>e}},e.createRow=Q,e.createTable=function(e){var n;(e.debugAll||e.debugTable)&&console.info("Creating Table Instance...");let l={_features:K};const o=l._features.reduce(((e,t)=>Object.assign(e,null==t.getDefaultOptions?void 0:t.getDefaultOptions(l))),{});let i={...null!=(n=e.initialState)?n:{}};l._features.forEach((e=>{var t;i=null!=(t=null==e.getInitialState?void 0:e.getInitialState(i))?t:i}));const a=[];let s=!1;const g={_features:K,options:{...o,...e},initialState:i,_queue:e=>{a.push(e),s||(s=!0,Promise.resolve().then((()=>{for(;a.length;)a.shift()();s=!1})).catch((e=>setTimeout((()=>{throw e})))))},reset:()=>{l.setState(l.initialState)},setOptions:e=>{const n=t(e,l.options);l.options=(e=>l.options.mergeOptions?l.options.mergeOptions(o,e):{...o,...e})(n)},getState:()=>l.options.state,setState:e=>{null==l.options.onStateChange||l.options.onStateChange(e)},_getRowId:(e,t,n)=>{var o;return null!=(o=null==l.options.getRowId?void 0:l.options.getRowId(e,t,n))?o:`${n?[n.id,t].join("."):t}`},getCoreRowModel:()=>(l._getCoreRowModel||(l._getCoreRowModel=l.options.getCoreRowModel(l)),l._getCoreRowModel()),getRowModel:()=>l.getPaginationRowModel(),getRow:e=>{const t=l.getRowModel().rowsById[e];if(!t)throw new Error;return t},_getDefaultColumnDef:r((()=>[l.options.defaultColumn]),(e=>{var t;return e=null!=(t=e)?t:{},{header:e=>{const t=e.header.column.columnDef;return t.accessorKey?t.accessorKey:t.accessorFn?t.id:null},cell:e=>{var t,n;return null!=(t=null==(n=e.renderValue())||null==n.toString?void 0:n.toString())?t:null},...l._features.reduce(((e,t)=>Object.assign(e,null==t.getDefaultColumnDef?void 0:t.getDefaultColumnDef())),{}),...e}}),{debug:()=>{var e;return null!=(e=l.options.debugAll)?e:l.options.debugColumns},key:!1}),_getColumnDefs:()=>l.options.columns,getAllColumns:r((()=>[l._getColumnDefs()]),(e=>{const t=function(e,n,o){return void 0===o&&(o=0),e.map((e=>{const i=u(l,e,o,n),r=e;return i.columns=r.columns?t(r.columns,i,o+1):[],i}))};return t(e)}),{key:!1,debug:()=>{var e;return null!=(e=l.options.debugAll)?e:l.options.debugColumns}}),getAllFlatColumns:r((()=>[l.getAllColumns()]),(e=>e.flatMap((e=>e.getFlatColumns()))),{key:!1,debug:()=>{var e;return null!=(e=l.options.debugAll)?e:l.options.debugColumns}}),_getAllFlatColumnsById:r((()=>[l.getAllFlatColumns()]),(e=>e.reduce(((e,t)=>(e[t.id]=t,e)),{})),{key:!1,debug:()=>{var e;return null!=(e=l.options.debugAll)?e:l.options.debugColumns}}),getAllLeafColumns:r((()=>[l.getAllColumns(),l._getOrderColumnsFn()]),((e,t)=>t(e.flatMap((e=>e.getLeafColumns())))),{key:!1,debug:()=>{var e;return null!=(e=l.options.debugAll)?e:l.options.debugColumns}}),getColumn:e=>l._getAllFlatColumnsById()[e]};return Object.assign(l,g),l._features.forEach((e=>Object.assign(l,null==e.createTable?void 0:e.createTable(l)))),l},e.defaultColumnSizing=d,e.expandRows=Y,e.filterFns=y,e.flattenBy=i,e.functionalUpdate=t,e.getCoreRowModel=function(){return e=>r((()=>[e.options.data]),(t=>{const n={rows:[],flatRows:[],rowsById:{}},l=function(t,o,i){void 0===o&&(o=0);const r=[];for(let a=0;a<t.length;a++){const s=Q(e,e._getRowId(t[a],a,i),t[a],a,o,void 0,null==i?void 0:i.id);var u;if(n.flatRows.push(s),n.rowsById[s.id]=s,r.push(s),e.options.getSubRows)s.originalSubRows=e.options.getSubRows(t[a],a),null!=(u=s.originalSubRows)&&u.length&&(s.subRows=l(s.originalSubRows,o+1,s))}return r};return n.rows=l(t),n}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable},onChange:()=>{e._autoResetPageIndex()}})},e.getExpandedRowModel=function(){return e=>r((()=>[e.getState().expanded,e.getPreExpandedRowModel(),e.options.paginateExpandedRows]),((e,t,n)=>!t.rows.length||!0!==e&&!Object.keys(null!=e?e:{}).length?t:n?Y(t):t),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable}})},e.getFacetedMinMaxValues=function(){return(e,t)=>r((()=>{var n;return[null==(n=e.getColumn(t))?void 0:n.getFacetedRowModel()]}),(e=>{var n;if(!e)return;const l=null==(n=e.flatRows[0])?void 0:n.getUniqueValues(t);if(void 0===l)return;let o=[l,l];for(let n=0;n<e.flatRows.length;n++){const l=e.flatRows[n].getUniqueValues(t);for(let e=0;e<l.length;e++){const t=l[e];t<o[0]?o[0]=t:t>o[1]&&(o[1]=t)}}return o}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable},onChange:()=>{}})},e.getFacetedRowModel=function(){return(e,t)=>r((()=>[e.getPreFilteredRowModel(),e.getState().columnFilters,e.getState().globalFilter,e.getFilteredRowModel()]),((n,l,o)=>{if(!n.rows.length||(null==l||!l.length)&&!o)return n;const i=[...l.map((e=>e.id)).filter((e=>e!==t)),o?"__global__":void 0].filter(Boolean);return W(n.rows,(e=>{for(let t=0;t<i.length;t++)if(!1===e.columnFilters[i[t]])return!1;return!0}),e)}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable},onChange:()=>{}})},e.getFacetedUniqueValues=function(){return(e,t)=>r((()=>{var n;return[null==(n=e.getColumn(t))?void 0:n.getFacetedRowModel()]}),(e=>{if(!e)return new Map;let n=new Map;for(let o=0;o<e.flatRows.length;o++){const i=e.flatRows[o].getUniqueValues(t);for(let e=0;e<i.length;e++){const t=i[e];var l;if(n.has(t))n.set(t,(null!=(l=n.get(t))?l:0)+1);else n.set(t,1)}}return n}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable},onChange:()=>{}})},e.getFilteredRowModel=function(){return e=>r((()=>[e.getPreFilteredRowModel(),e.getState().columnFilters,e.getState().globalFilter]),((t,n,l)=>{if(!t.rows.length||(null==n||!n.length)&&!l){for(let e=0;e<t.flatRows.length;e++)t.flatRows[e].columnFilters={},t.flatRows[e].columnFiltersMeta={};return t}const o=[],i=[];(null!=n?n:[]).forEach((t=>{var n;const l=e.getColumn(t.id);if(!l)return;const i=l.getFilterFn();i&&o.push({id:t.id,filterFn:i,resolvedValue:null!=(n=null==i.resolveFilterValue?void 0:i.resolveFilterValue(t.value))?n:t.value})}));const r=n.map((e=>e.id)),u=e.getGlobalFilterFn(),a=e.getAllLeafColumns().filter((e=>e.getCanGlobalFilter()));let s,g;l&&u&&a.length&&(r.push("__global__"),a.forEach((e=>{var t;i.push({id:e.id,filterFn:u,resolvedValue:null!=(t=null==u.resolveFilterValue?void 0:u.resolveFilterValue(l))?t:l})})));for(let e=0;e<t.flatRows.length;e++){const n=t.flatRows[e];if(n.columnFilters={},o.length)for(let e=0;e<o.length;e++){s=o[e];const t=s.id;n.columnFilters[t]=s.filterFn(n,t,s.resolvedValue,(e=>{n.columnFiltersMeta[t]=e}))}if(i.length){for(let e=0;e<i.length;e++){g=i[e];const t=g.id;if(g.filterFn(n,t,g.resolvedValue,(e=>{n.columnFiltersMeta[t]=e}))){n.columnFilters.__global__=!0;break}}!0!==n.columnFilters.__global__&&(n.columnFilters.__global__=!1)}}return W(t.rows,(e=>{for(let t=0;t<r.length;t++)if(!1===e.columnFilters[r[t]])return!1;return!0}),e)}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable},onChange:()=>{e._autoResetPageIndex()}})},e.getGroupedRowModel=function(){return e=>r((()=>[e.getState().grouping,e.getPreGroupedRowModel()]),((t,n)=>{if(!n.rows.length||!t.length)return n;const l=t.filter((t=>e.getColumn(t))),o=[],r={},u=function(t,n,a){if(void 0===n&&(n=0),n>=l.length)return t.map((e=>(e.depth=n,o.push(e),r[e.id]=e,e.subRows&&(e.subRows=u(e.subRows,n+1,e.id)),e)));const s=l[n],g=function(e,t){const n=new Map;return e.reduce(((e,n)=>{const l=`${n.getGroupingValue(t)}`,o=e.get(l);return o?o.push(n):e.set(l,[n]),e}),n)}(t,s),d=Array.from(g.entries()).map(((t,g)=>{let[d,c]=t,p=`${s}:${d}`;p=a?`${a}>${p}`:p;const f=u(c,n+1,p),m=n?i(c,(e=>e.subRows)):c,b=Q(e,p,m[0].original,g,n,void 0,a);return Object.assign(b,{groupingColumnId:s,groupingValue:d,subRows:f,leafRows:m,getValue:t=>{if(l.includes(t)){if(b._valuesCache.hasOwnProperty(t))return b._valuesCache[t];var n;if(c[0])b._valuesCache[t]=null!=(n=c[0].getValue(t))?n:void 0;return b._valuesCache[t]}if(b._groupingValuesCache.hasOwnProperty(t))return b._groupingValuesCache[t];const o=e.getColumn(t),i=null==o?void 0:o.getAggregationFn();return i?(b._groupingValuesCache[t]=i(t,m,c),b._groupingValuesCache[t]):void 0}}),f.forEach((e=>{o.push(e),r[e.id]=e})),b}));return d},a=u(n.rows,0);return a.forEach((e=>{o.push(e),r[e.id]=e})),{rows:a,flatRows:o,rowsById:r}}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable},onChange:()=>{e._queue((()=>{e._autoResetExpanded(),e._autoResetPageIndex()}))}})},e.getPaginationRowModel=function(e){return e=>r((()=>[e.getState().pagination,e.getPrePaginationRowModel(),e.options.paginateExpandedRows?void 0:e.getState().expanded]),((t,n)=>{if(!n.rows.length)return n;const{pageSize:l,pageIndex:o}=t;let{rows:i,flatRows:r,rowsById:u}=n;const a=l*o,s=a+l;let g;i=i.slice(a,s),g=e.options.paginateExpandedRows?{rows:i,flatRows:r,rowsById:u}:Y({rows:i,flatRows:r,rowsById:u}),g.flatRows=[];const d=e=>{g.flatRows.push(e),e.subRows.length&&e.subRows.forEach(d)};return g.rows.forEach(d),g}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable}})},e.getSortedRowModel=function(){return e=>r((()=>[e.getState().sorting,e.getPreSortedRowModel()]),((t,n)=>{if(!n.rows.length||null==t||!t.length)return n;const l=e.getState().sorting,o=[],i=l.filter((t=>{var n;return null==(n=e.getColumn(t.id))?void 0:n.getCanSort()})),r={};i.forEach((t=>{const n=e.getColumn(t.id);n&&(r[t.id]={sortUndefined:n.columnDef.sortUndefined,invertSorting:n.columnDef.invertSorting,sortingFn:n.getSortingFn()})}));const u=e=>{const t=[...e];return t.sort(((e,t)=>{for(let l=0;l<i.length;l+=1){var n;const o=i[l],u=r[o.id],a=null!=(n=null==o?void 0:o.desc)&&n;if(u.sortUndefined){const n=void 0===e.getValue(o.id),l=void 0===t.getValue(o.id);if(n||l)return n&&l?0:n?u.sortUndefined:-u.sortUndefined}let s=u.sortingFn(e,t,o.id);if(0!==s)return a&&(s*=-1),u.invertSorting&&(s*=-1),s}return e.index-t.index})),t.forEach((e=>{var t;o.push(e),null!=(t=e.subRows)&&t.length&&(e.subRows=u(e.subRows))})),t};return{rows:u(n.rows),flatRows:o,rowsById:n.rowsById}}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable},onChange:()=>{e._autoResetPageIndex()}})},e.isFunction=l,e.isNumberArray=o,e.isRowSelected=O,e.isSubRowSelected=T,e.makeStateUpdater=n,e.memo=r,e.noop=function(){},e.orderColumns=E,e.passiveEventSupported=f,e.reSplitAlphaNumeric=B,e.selectRowsFn=k,e.shouldAutoRemoveFilter=_,e.sortingFns=U,Object.defineProperty(e,"__esModule",{value:!0})}));
+!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).TableCore={})}(this,(function(e){"use strict";function t(e,t){return"function"==typeof e?e(t):e}function n(e,n){return l=>{n.setState((n=>({...n,[e]:t(l,n[e])})))}}function l(e){return e instanceof Function}function o(e){return Array.isArray(e)&&e.every((e=>"number"==typeof e))}function i(e,t){const n=[],l=e=>{e.forEach((e=>{n.push(e);const o=t(e);null!=o&&o.length&&l(o)}))};return l(e),n}function r(e,t,n){let l,o=[];return()=>{let i;n.key&&n.debug&&(i=Date.now());const r=e();if(!(r.length!==o.length||r.some(((e,t)=>o[t]!==e))))return l;let u;if(o=r,n.key&&n.debug&&(u=Date.now()),l=t(...r),null==n||null==n.onChange||n.onChange(l),n.key&&n.debug&&null!=n&&n.debug()){const e=Math.round(100*(Date.now()-i))/100,t=Math.round(100*(Date.now()-u))/100,l=t/16,o=(e,t)=>{for(e=String(e);e.length<t;)e=" "+e;return e};console.info(`%c⏱ ${o(t,5)} /${o(e,5)} ms`,`\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(0,Math.min(120-120*l,120))}deg 100% 31%);`,null==n?void 0:n.key)}return l}}function u(e,t,n,l){var o,i;const u={...e._getDefaultColumnDef(),...t},a=u.accessorKey;let s,g=null!=(o=null!=(i=u.id)?i:a?a.replace(".","_"):void 0)?o:"string"==typeof u.header?u.header:void 0;if(u.accessorFn?s=u.accessorFn:a&&(s=a.includes(".")?e=>{let t=e;for(const e of a.split(".")){var n;t=null==(n=t)?void 0:n[e]}return t}:e=>e[u.accessorKey]),!g)throw new Error;let d={id:`${String(g)}`,accessorFn:s,parent:l,depth:n,columnDef:u,columns:[],getFlatColumns:r((()=>[!0]),(()=>{var e;return[d,...null==(e=d.columns)?void 0:e.flatMap((e=>e.getFlatColumns()))]}),{key:"column.getFlatColumns",debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugColumns}}),getLeafColumns:r((()=>[e._getOrderColumnsFn()]),(e=>{var t;if(null!=(t=d.columns)&&t.length){let t=d.columns.flatMap((e=>e.getLeafColumns()));return e(t)}return[d]}),{key:"column.getLeafColumns",debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugColumns}})};return d=e._features.reduce(((t,n)=>Object.assign(t,null==n.createColumn?void 0:n.createColumn(d,e))),d),d}function a(e,t,n){var l;let o={id:null!=(l=n.id)?l:t.id,column:t,index:n.index,isPlaceholder:!!n.isPlaceholder,placeholderId:n.placeholderId,depth:n.depth,subHeaders:[],colSpan:0,rowSpan:0,headerGroup:null,getLeafHeaders:()=>{const e=[],t=n=>{n.subHeaders&&n.subHeaders.length&&n.subHeaders.map(t),e.push(n)};return t(o),e},getContext:()=>({table:e,header:o,column:t})};return e._features.forEach((t=>{Object.assign(o,null==t.createHeader?void 0:t.createHeader(o,e))})),o}const s={createTable:e=>({getHeaderGroups:r((()=>[e.getAllColumns(),e.getVisibleLeafColumns(),e.getState().columnPinning.left,e.getState().columnPinning.right]),((t,n,l,o)=>{var i,r;const u=null!=(i=null==l?void 0:l.map((e=>n.find((t=>t.id===e)))).filter(Boolean))?i:[],a=null!=(r=null==o?void 0:o.map((e=>n.find((t=>t.id===e)))).filter(Boolean))?r:[];return g(t,[...u,...n.filter((e=>!(null!=l&&l.includes(e.id)||null!=o&&o.includes(e.id)))),...a],e)}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getCenterHeaderGroups:r((()=>[e.getAllColumns(),e.getVisibleLeafColumns(),e.getState().columnPinning.left,e.getState().columnPinning.right]),((t,n,l,o)=>g(t,n=n.filter((e=>!(null!=l&&l.includes(e.id)||null!=o&&o.includes(e.id)))),e,"center")),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getLeftHeaderGroups:r((()=>[e.getAllColumns(),e.getVisibleLeafColumns(),e.getState().columnPinning.left]),((t,n,l)=>{var o;return g(t,null!=(o=null==l?void 0:l.map((e=>n.find((t=>t.id===e)))).filter(Boolean))?o:[],e,"left")}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getRightHeaderGroups:r((()=>[e.getAllColumns(),e.getVisibleLeafColumns(),e.getState().columnPinning.right]),((t,n,l)=>{var o;return g(t,null!=(o=null==l?void 0:l.map((e=>n.find((t=>t.id===e)))).filter(Boolean))?o:[],e,"right")}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getFooterGroups:r((()=>[e.getHeaderGroups()]),(e=>[...e].reverse()),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getLeftFooterGroups:r((()=>[e.getLeftHeaderGroups()]),(e=>[...e].reverse()),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getCenterFooterGroups:r((()=>[e.getCenterHeaderGroups()]),(e=>[...e].reverse()),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getRightFooterGroups:r((()=>[e.getRightHeaderGroups()]),(e=>[...e].reverse()),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getFlatHeaders:r((()=>[e.getHeaderGroups()]),(e=>e.map((e=>e.headers)).flat()),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getLeftFlatHeaders:r((()=>[e.getLeftHeaderGroups()]),(e=>e.map((e=>e.headers)).flat()),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getCenterFlatHeaders:r((()=>[e.getCenterHeaderGroups()]),(e=>e.map((e=>e.headers)).flat()),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getRightFlatHeaders:r((()=>[e.getRightHeaderGroups()]),(e=>e.map((e=>e.headers)).flat()),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getCenterLeafHeaders:r((()=>[e.getCenterFlatHeaders()]),(e=>e.filter((e=>{var t;return!(null!=(t=e.subHeaders)&&t.length)}))),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getLeftLeafHeaders:r((()=>[e.getLeftFlatHeaders()]),(e=>e.filter((e=>{var t;return!(null!=(t=e.subHeaders)&&t.length)}))),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getRightLeafHeaders:r((()=>[e.getRightFlatHeaders()]),(e=>e.filter((e=>{var t;return!(null!=(t=e.subHeaders)&&t.length)}))),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}}),getLeafHeaders:r((()=>[e.getLeftHeaderGroups(),e.getCenterHeaderGroups(),e.getRightHeaderGroups()]),((e,t,n)=>{var l,o,i,r,u,a;return[...null!=(l=null==(o=e[0])?void 0:o.headers)?l:[],...null!=(i=null==(r=t[0])?void 0:r.headers)?i:[],...null!=(u=null==(a=n[0])?void 0:a.headers)?u:[]].map((e=>e.getLeafHeaders())).flat()}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugHeaders}})})};function g(e,t,n,l){var o,i;let r=0;const u=function(e,t){void 0===t&&(t=1),r=Math.max(r,t),e.filter((e=>e.getIsVisible())).forEach((e=>{var n;null!=(n=e.columns)&&n.length&&u(e.columns,t+1)}),0)};u(e);let s=[];const g=(e,t)=>{const o={depth:t,id:[l,`${t}`].filter(Boolean).join("_"),headers:[]},i=[];e.forEach((e=>{const r=[...i].reverse()[0];let u,s=!1;if(e.column.depth===o.depth&&e.column.parent?u=e.column.parent:(u=e.column,s=!0),r&&(null==r?void 0:r.column)===u)r.subHeaders.push(e);else{const o=a(n,u,{id:[l,t,u.id,null==e?void 0:e.id].filter(Boolean).join("_"),isPlaceholder:s,placeholderId:s?`${i.filter((e=>e.column===u)).length}`:void 0,depth:t,index:i.length});o.subHeaders.push(e),i.push(o)}o.headers.push(e),e.headerGroup=o})),s.push(o),t>0&&g(i,t-1)},d=t.map(((e,t)=>a(n,e,{depth:r,index:t})));g(d,r-1),s.reverse();const c=e=>e.filter((e=>e.column.getIsVisible())).map((e=>{let t=0,n=0,l=[0];e.subHeaders&&e.subHeaders.length?(l=[],c(e.subHeaders).forEach((e=>{let{colSpan:n,rowSpan:o}=e;t+=n,l.push(o)}))):t=1;return n+=Math.min(...l),e.colSpan=t,e.rowSpan=n,{colSpan:t,rowSpan:n}}));return c(null!=(o=null==(i=s[0])?void 0:i.headers)?o:[]),s}const d={size:150,minSize:20,maxSize:Number.MAX_SAFE_INTEGER},c={getDefaultColumnDef:()=>d,getInitialState:e=>({columnSizing:{},columnSizingInfo:{startOffset:null,startSize:null,deltaOffset:null,deltaPercentage:null,isResizingColumn:!1,columnSizingStart:[]},...e}),getDefaultOptions:e=>({columnResizeMode:"onEnd",onColumnSizingChange:n("columnSizing",e),onColumnSizingInfoChange:n("columnSizingInfo",e)}),createColumn:(e,t)=>({getSize:()=>{var n,l,o;const i=t.getState().columnSizing[e.id];return Math.min(Math.max(null!=(n=e.columnDef.minSize)?n:d.minSize,null!=(l=null!=i?i:e.columnDef.size)?l:d.size),null!=(o=e.columnDef.maxSize)?o:d.maxSize)},getStart:n=>{const l=n?"left"===n?t.getLeftVisibleLeafColumns():t.getRightVisibleLeafColumns():t.getVisibleLeafColumns(),o=l.findIndex((t=>t.id===e.id));if(o>0){const e=l[o-1];return e.getStart(n)+e.getSize()}return 0},resetSize:()=>{t.setColumnSizing((t=>{let{[e.id]:n,...l}=t;return l}))},getCanResize:()=>{var n,l;return(null==(n=e.columnDef.enableResizing)||n)&&(null==(l=t.options.enableColumnResizing)||l)},getIsResizing:()=>t.getState().columnSizingInfo.isResizingColumn===e.id}),createHeader:(e,t)=>({getSize:()=>{let t=0;const n=e=>{var l;e.subHeaders.length?e.subHeaders.forEach(n):t+=null!=(l=e.column.getSize())?l:0};return n(e),t},getStart:()=>{if(e.index>0){const t=e.headerGroup.headers[e.index-1];return t.getStart()+t.getSize()}return 0},getResizeHandler:()=>{const n=t.getColumn(e.column.id),l=null==n?void 0:n.getCanResize();return o=>{if(!n||!l)return;if(null==o.persist||o.persist(),m(o)&&o.touches&&o.touches.length>1)return;const i=e.getSize(),r=e?e.getLeafHeaders().map((e=>[e.column.id,e.column.getSize()])):[[n.id,n.getSize()]],u=m(o)?Math.round(o.touches[0].clientX):o.clientX,a={},s=(e,n)=>{"number"==typeof n&&(t.setColumnSizingInfo((e=>{var t,l;const o=n-(null!=(t=null==e?void 0:e.startOffset)?t:0),i=Math.max(o/(null!=(l=null==e?void 0:e.startSize)?l:0),-.999999);return e.columnSizingStart.forEach((e=>{let[t,n]=e;a[t]=Math.round(100*Math.max(n+n*i,0))/100})),{...e,deltaOffset:o,deltaPercentage:i}})),"onChange"!==t.options.columnResizeMode&&"end"!==e||t.setColumnSizing((e=>({...e,...a}))))},g=e=>s("move",e),d=e=>{s("end",e),t.setColumnSizingInfo((e=>({...e,isResizingColumn:!1,startOffset:null,startSize:null,deltaOffset:null,deltaPercentage:null,columnSizingStart:[]})))},c={moveHandler:e=>g(e.clientX),upHandler:e=>{document.removeEventListener("mousemove",c.moveHandler),document.removeEventListener("mouseup",c.upHandler),d(e.clientX)}},p={moveHandler:e=>(e.cancelable&&(e.preventDefault(),e.stopPropagation()),g(e.touches[0].clientX),!1),upHandler:e=>{var t;document.removeEventListener("touchmove",p.moveHandler),document.removeEventListener("touchend",p.upHandler),e.cancelable&&(e.preventDefault(),e.stopPropagation()),d(null==(t=e.touches[0])?void 0:t.clientX)}},b=!!f()&&{passive:!1};m(o)?(document.addEventListener("touchmove",p.moveHandler,b),document.addEventListener("touchend",p.upHandler,b)):(document.addEventListener("mousemove",c.moveHandler,b),document.addEventListener("mouseup",c.upHandler,b)),t.setColumnSizingInfo((e=>({...e,startOffset:u,startSize:i,deltaOffset:0,deltaPercentage:0,columnSizingStart:r,isResizingColumn:n.id})))}}}),createTable:e=>({setColumnSizing:t=>null==e.options.onColumnSizingChange?void 0:e.options.onColumnSizingChange(t),setColumnSizingInfo:t=>null==e.options.onColumnSizingInfoChange?void 0:e.options.onColumnSizingInfoChange(t),resetColumnSizing:t=>{var n;e.setColumnSizing(t?{}:null!=(n=e.initialState.columnSizing)?n:{})},resetHeaderSizeInfo:t=>{var n;e.setColumnSizingInfo(t?{startOffset:null,startSize:null,deltaOffset:null,deltaPercentage:null,isResizingColumn:!1,columnSizingStart:[]}:null!=(n=e.initialState.columnSizingInfo)?n:{startOffset:null,startSize:null,deltaOffset:null,deltaPercentage:null,isResizingColumn:!1,columnSizingStart:[]})},getTotalSize:()=>{var t,n;return null!=(t=null==(n=e.getHeaderGroups()[0])?void 0:n.headers.reduce(((e,t)=>e+t.getSize()),0))?t:0},getLeftTotalSize:()=>{var t,n;return null!=(t=null==(n=e.getLeftHeaderGroups()[0])?void 0:n.headers.reduce(((e,t)=>e+t.getSize()),0))?t:0},getCenterTotalSize:()=>{var t,n;return null!=(t=null==(n=e.getCenterHeaderGroups()[0])?void 0:n.headers.reduce(((e,t)=>e+t.getSize()),0))?t:0},getRightTotalSize:()=>{var t,n;return null!=(t=null==(n=e.getRightHeaderGroups()[0])?void 0:n.headers.reduce(((e,t)=>e+t.getSize()),0))?t:0}})};let p=null;function f(){if("boolean"==typeof p)return p;let e=!1;try{const t={get passive(){return e=!0,!1}},n=()=>{};window.addEventListener("test",n,t),window.removeEventListener("test",n)}catch(t){e=!1}return p=e,p}function m(e){return"touchstart"===e.type}const b={getInitialState:e=>({expanded:{},...e}),getDefaultOptions:e=>({onExpandedChange:n("expanded",e),paginateExpandedRows:!0}),createTable:e=>{let t=!1,n=!1;return{_autoResetExpanded:()=>{var l,o;if(t){if(null!=(l=null!=(o=e.options.autoResetAll)?o:e.options.autoResetExpanded)?l:!e.options.manualExpanding){if(n)return;n=!0,e._queue((()=>{e.resetExpanded(),n=!1}))}}else e._queue((()=>{t=!0}))},setExpanded:t=>null==e.options.onExpandedChange?void 0:e.options.onExpandedChange(t),toggleAllRowsExpanded:t=>{(null!=t?t:!e.getIsAllRowsExpanded())?e.setExpanded(!0):e.setExpanded({})},resetExpanded:t=>{var n,l;e.setExpanded(t?{}:null!=(n=null==(l=e.initialState)?void 0:l.expanded)?n:{})},getCanSomeRowsExpand:()=>e.getPrePaginationRowModel().flatRows.some((e=>e.getCanExpand())),getToggleAllRowsExpandedHandler:()=>t=>{null==t.persist||t.persist(),e.toggleAllRowsExpanded()},getIsSomeRowsExpanded:()=>{const t=e.getState().expanded;return!0===t||Object.values(t).some(Boolean)},getIsAllRowsExpanded:()=>{const t=e.getState().expanded;return"boolean"==typeof t?!0===t:!!Object.keys(t).length&&!e.getRowModel().flatRows.some((e=>!e.getIsExpanded()))},getExpandedDepth:()=>{let t=0;return(!0===e.getState().expanded?Object.keys(e.getRowModel().rowsById):Object.keys(e.getState().expanded)).forEach((e=>{const n=e.split(".");t=Math.max(t,n.length)})),t},getPreExpandedRowModel:()=>e.getSortedRowModel(),getExpandedRowModel:()=>(!e._getExpandedRowModel&&e.options.getExpandedRowModel&&(e._getExpandedRowModel=e.options.getExpandedRowModel(e)),e.options.manualExpanding||!e._getExpandedRowModel?e.getPreExpandedRowModel():e._getExpandedRowModel())}},createRow:(e,t)=>({toggleExpanded:n=>{t.setExpanded((l=>{var o;const i=!0===l||!(null==l||!l[e.id]);let r={};if(!0===l?Object.keys(t.getRowModel().rowsById).forEach((e=>{r[e]=!0})):r=l,n=null!=(o=n)?o:!i,!i&&n)return{...r,[e.id]:!0};if(i&&!n){const{[e.id]:t,...n}=r;return n}return l}))},getIsExpanded:()=>{var n;const l=t.getState().expanded;return!!(null!=(n=null==t.options.getIsRowExpanded?void 0:t.options.getIsRowExpanded(e))?n:!0===l||(null==l?void 0:l[e.id]))},getCanExpand:()=>{var n,l,o;return null!=(n=null==t.options.getRowCanExpand?void 0:t.options.getRowCanExpand(e))?n:(null==(l=t.options.enableExpanding)||l)&&!(null==(o=e.subRows)||!o.length)},getToggleExpandedHandler:()=>{const t=e.getCanExpand();return()=>{t&&e.toggleExpanded()}}})},v=(e,t,n)=>{var l,o,i;const r=n.toLowerCase();return Boolean(null==(l=e.getValue(t))||null==(o=l.toString())||null==(i=o.toLowerCase())?void 0:i.includes(r))};v.autoRemove=e=>I(e);const w=(e,t,n)=>{var l,o;return Boolean(null==(l=e.getValue(t))||null==(o=l.toString())?void 0:o.includes(n))};w.autoRemove=e=>I(e);const h=(e,t,n)=>{var l,o;return(null==(l=e.getValue(t))||null==(o=l.toString())?void 0:o.toLowerCase())===(null==n?void 0:n.toLowerCase())};h.autoRemove=e=>I(e);const C=(e,t,n)=>{var l;return null==(l=e.getValue(t))?void 0:l.includes(n)};C.autoRemove=e=>I(e)||!(null!=e&&e.length);const S=(e,t,n)=>!n.some((n=>{var l;return!(null!=(l=e.getValue(t))&&l.includes(n))}));S.autoRemove=e=>I(e)||!(null!=e&&e.length);const R=(e,t,n)=>n.some((n=>{var l;return null==(l=e.getValue(t))?void 0:l.includes(n)}));R.autoRemove=e=>I(e)||!(null!=e&&e.length);const F=(e,t,n)=>e.getValue(t)===n;F.autoRemove=e=>I(e);const M=(e,t,n)=>e.getValue(t)==n;M.autoRemove=e=>I(e);const V=(e,t,n)=>{let[l,o]=n;const i=e.getValue(t);return i>=l&&i<=o};V.resolveFilterValue=e=>{let[t,n]=e,l="number"!=typeof t?parseFloat(t):t,o="number"!=typeof n?parseFloat(n):n,i=null===t||Number.isNaN(l)?-1/0:l,r=null===n||Number.isNaN(o)?1/0:o;if(i>r){const e=i;i=r,r=e}return[i,r]},V.autoRemove=e=>I(e)||I(e[0])&&I(e[1]);const y={includesString:v,includesStringSensitive:w,equalsString:h,arrIncludes:C,arrIncludesAll:S,arrIncludesSome:R,equals:F,weakEquals:M,inNumberRange:V};function I(e){return null==e||""===e}const x={getDefaultColumnDef:()=>({filterFn:"auto"}),getInitialState:e=>({columnFilters:[],globalFilter:void 0,...e}),getDefaultOptions:e=>({onColumnFiltersChange:n("columnFilters",e),onGlobalFilterChange:n("globalFilter",e),filterFromLeafRows:!1,maxLeafRowFilterDepth:100,globalFilterFn:"auto",getColumnCanGlobalFilter:t=>{var n,l;const o=null==(n=e.getCoreRowModel().flatRows[0])||null==(l=n._getAllCellsByColumnId()[t.id])?void 0:l.getValue();return"string"==typeof o||"number"==typeof o}}),createColumn:(e,n)=>({getAutoFilterFn:()=>{const t=n.getCoreRowModel().flatRows[0],l=null==t?void 0:t.getValue(e.id);return"string"==typeof l?y.includesString:"number"==typeof l?y.inNumberRange:"boolean"==typeof l||null!==l&&"object"==typeof l?y.equals:Array.isArray(l)?y.arrIncludes:y.weakEquals},getFilterFn:()=>{var t,o;return l(e.columnDef.filterFn)?e.columnDef.filterFn:"auto"===e.columnDef.filterFn?e.getAutoFilterFn():null!=(t=null==(o=n.options.filterFns)?void 0:o[e.columnDef.filterFn])?t:y[e.columnDef.filterFn]},getCanFilter:()=>{var t,l,o;return(null==(t=e.columnDef.enableColumnFilter)||t)&&(null==(l=n.options.enableColumnFilters)||l)&&(null==(o=n.options.enableFilters)||o)&&!!e.accessorFn},getCanGlobalFilter:()=>{var t,l,o,i;return(null==(t=e.columnDef.enableGlobalFilter)||t)&&(null==(l=n.options.enableGlobalFilter)||l)&&(null==(o=n.options.enableFilters)||o)&&(null==(i=null==n.options.getColumnCanGlobalFilter?void 0:n.options.getColumnCanGlobalFilter(e))||i)&&!!e.accessorFn},getIsFiltered:()=>e.getFilterIndex()>-1,getFilterValue:()=>{var t,l;return null==(t=n.getState().columnFilters)||null==(l=t.find((t=>t.id===e.id)))?void 0:l.value},getFilterIndex:()=>{var t,l;return null!=(t=null==(l=n.getState().columnFilters)?void 0:l.findIndex((t=>t.id===e.id)))?t:-1},setFilterValue:l=>{n.setColumnFilters((n=>{const o=e.getFilterFn(),i=null==n?void 0:n.find((t=>t.id===e.id)),r=t(l,i?i.value:void 0);var u;if(_(o,r,e))return null!=(u=null==n?void 0:n.filter((t=>t.id!==e.id)))?u:[];const a={id:e.id,value:r};var s;return i?null!=(s=null==n?void 0:n.map((t=>t.id===e.id?a:t)))?s:[]:null!=n&&n.length?[...n,a]:[a]}))},_getFacetedRowModel:n.options.getFacetedRowModel&&n.options.getFacetedRowModel(n,e.id),getFacetedRowModel:()=>e._getFacetedRowModel?e._getFacetedRowModel():n.getPreFilteredRowModel(),_getFacetedUniqueValues:n.options.getFacetedUniqueValues&&n.options.getFacetedUniqueValues(n,e.id),getFacetedUniqueValues:()=>e._getFacetedUniqueValues?e._getFacetedUniqueValues():new Map,_getFacetedMinMaxValues:n.options.getFacetedMinMaxValues&&n.options.getFacetedMinMaxValues(n,e.id),getFacetedMinMaxValues:()=>{if(e._getFacetedMinMaxValues)return e._getFacetedMinMaxValues()}}),createRow:(e,t)=>({columnFilters:{},columnFiltersMeta:{}}),createTable:e=>({getGlobalAutoFilterFn:()=>y.includesString,getGlobalFilterFn:()=>{var t,n;const{globalFilterFn:o}=e.options;return l(o)?o:"auto"===o?e.getGlobalAutoFilterFn():null!=(t=null==(n=e.options.filterFns)?void 0:n[o])?t:y[o]},setColumnFilters:n=>{const l=e.getAllLeafColumns();null==e.options.onColumnFiltersChange||e.options.onColumnFiltersChange((e=>{var o;return null==(o=t(n,e))?void 0:o.filter((e=>{const t=l.find((t=>t.id===e.id));if(t){if(_(t.getFilterFn(),e.value,t))return!1}return!0}))}))},setGlobalFilter:t=>{null==e.options.onGlobalFilterChange||e.options.onGlobalFilterChange(t)},resetGlobalFilter:t=>{e.setGlobalFilter(t?void 0:e.initialState.globalFilter)},resetColumnFilters:t=>{var n,l;e.setColumnFilters(t?[]:null!=(n=null==(l=e.initialState)?void 0:l.columnFilters)?n:[])},getPreFilteredRowModel:()=>e.getCoreRowModel(),getFilteredRowModel:()=>(!e._getFilteredRowModel&&e.options.getFilteredRowModel&&(e._getFilteredRowModel=e.options.getFilteredRowModel(e)),e.options.manualFiltering||!e._getFilteredRowModel?e.getPreFilteredRowModel():e._getFilteredRowModel()),_getGlobalFacetedRowModel:e.options.getFacetedRowModel&&e.options.getFacetedRowModel(e,"__global__"),getGlobalFacetedRowModel:()=>e.options.manualFiltering||!e._getGlobalFacetedRowModel?e.getPreFilteredRowModel():e._getGlobalFacetedRowModel(),_getGlobalFacetedUniqueValues:e.options.getFacetedUniqueValues&&e.options.getFacetedUniqueValues(e,"__global__"),getGlobalFacetedUniqueValues:()=>e._getGlobalFacetedUniqueValues?e._getGlobalFacetedUniqueValues():new Map,_getGlobalFacetedMinMaxValues:e.options.getFacetedMinMaxValues&&e.options.getFacetedMinMaxValues(e,"__global__"),getGlobalFacetedMinMaxValues:()=>{if(e._getGlobalFacetedMinMaxValues)return e._getGlobalFacetedMinMaxValues()}})};function _(e,t,n){return!(!e||!e.autoRemove)&&e.autoRemove(t,n)||void 0===t||"string"==typeof t&&!t}const P={sum:(e,t,n)=>n.reduce(((t,n)=>{const l=n.getValue(e);return t+("number"==typeof l?l:0)}),0),min:(e,t,n)=>{let l;return n.forEach((t=>{const n=t.getValue(e);null!=n&&(l>n||void 0===l&&n>=n)&&(l=n)})),l},max:(e,t,n)=>{let l;return n.forEach((t=>{const n=t.getValue(e);null!=n&&(l<n||void 0===l&&n>=n)&&(l=n)})),l},extent:(e,t,n)=>{let l,o;return n.forEach((t=>{const n=t.getValue(e);null!=n&&(void 0===l?n>=n&&(l=o=n):(l>n&&(l=n),o<n&&(o=n)))})),[l,o]},mean:(e,t)=>{let n=0,l=0;if(t.forEach((t=>{let o=t.getValue(e);null!=o&&(o=+o)>=o&&(++n,l+=o)})),n)return l/n},median:(e,t)=>{if(!t.length)return;const n=t.map((t=>t.getValue(e)));if(!o(n))return;if(1===n.length)return n[0];const l=Math.floor(n.length/2),i=n.sort(((e,t)=>e-t));return n.length%2!=0?i[l]:(i[l-1]+i[l])/2},unique:(e,t)=>Array.from(new Set(t.map((t=>t.getValue(e)))).values()),uniqueCount:(e,t)=>new Set(t.map((t=>t.getValue(e)))).size,count:(e,t)=>t.length},A={getDefaultColumnDef:()=>({aggregatedCell:e=>{var t,n;return null!=(t=null==(n=e.getValue())||null==n.toString?void 0:n.toString())?t:null},aggregationFn:"auto"}),getInitialState:e=>({grouping:[],...e}),getDefaultOptions:e=>({onGroupingChange:n("grouping",e),groupedColumnMode:"reorder"}),createColumn:(e,t)=>({toggleGrouping:()=>{t.setGrouping((t=>null!=t&&t.includes(e.id)?t.filter((t=>t!==e.id)):[...null!=t?t:[],e.id]))},getCanGroup:()=>{var n,l,o,i;return null!=(n=null==(l=null!=(o=null==(i=e.columnDef.enableGrouping)||i)?o:t.options.enableGrouping)||l)?n:!!e.accessorFn},getIsGrouped:()=>{var n;return null==(n=t.getState().grouping)?void 0:n.includes(e.id)},getGroupedIndex:()=>{var n;return null==(n=t.getState().grouping)?void 0:n.indexOf(e.id)},getToggleGroupingHandler:()=>{const t=e.getCanGroup();return()=>{t&&e.toggleGrouping()}},getAutoAggregationFn:()=>{const n=t.getCoreRowModel().flatRows[0],l=null==n?void 0:n.getValue(e.id);return"number"==typeof l?P.sum:"[object Date]"===Object.prototype.toString.call(l)?P.extent:void 0},getAggregationFn:()=>{var n,o;if(!e)throw new Error;return l(e.columnDef.aggregationFn)?e.columnDef.aggregationFn:"auto"===e.columnDef.aggregationFn?e.getAutoAggregationFn():null!=(n=null==(o=t.options.aggregationFns)?void 0:o[e.columnDef.aggregationFn])?n:P[e.columnDef.aggregationFn]}}),createTable:e=>({setGrouping:t=>null==e.options.onGroupingChange?void 0:e.options.onGroupingChange(t),resetGrouping:t=>{var n,l;e.setGrouping(t?[]:null!=(n=null==(l=e.initialState)?void 0:l.grouping)?n:[])},getPreGroupedRowModel:()=>e.getFilteredRowModel(),getGroupedRowModel:()=>(!e._getGroupedRowModel&&e.options.getGroupedRowModel&&(e._getGroupedRowModel=e.options.getGroupedRowModel(e)),e.options.manualGrouping||!e._getGroupedRowModel?e.getPreGroupedRowModel():e._getGroupedRowModel())}),createRow:(e,t)=>({getIsGrouped:()=>!!e.groupingColumnId,getGroupingValue:n=>{if(e._groupingValuesCache.hasOwnProperty(n))return e._groupingValuesCache[n];const l=t.getColumn(n);return null!=l&&l.columnDef.getGroupingValue?(e._groupingValuesCache[n]=l.columnDef.getGroupingValue(e.original),e._groupingValuesCache[n]):e.getValue(n)},_groupingValuesCache:{}}),createCell:(e,t,n,l)=>({getIsGrouped:()=>t.getIsGrouped()&&t.id===n.groupingColumnId,getIsPlaceholder:()=>!e.getIsGrouped()&&t.getIsGrouped(),getIsAggregated:()=>{var t;return!e.getIsGrouped()&&!e.getIsPlaceholder()&&!(null==(t=n.subRows)||!t.length)}})};function E(e,t,n){if(null==t||!t.length||!n)return e;const l=e.filter((e=>!t.includes(e.id)));if("remove"===n)return l;return[...t.map((t=>e.find((e=>e.id===t)))).filter(Boolean),...l]}const G={getInitialState:e=>({columnOrder:[],...e}),getDefaultOptions:e=>({onColumnOrderChange:n("columnOrder",e)}),createTable:e=>({setColumnOrder:t=>null==e.options.onColumnOrderChange?void 0:e.options.onColumnOrderChange(t),resetColumnOrder:t=>{var n;e.setColumnOrder(t?[]:null!=(n=e.initialState.columnOrder)?n:[])},_getOrderColumnsFn:r((()=>[e.getState().columnOrder,e.getState().grouping,e.options.groupedColumnMode]),((e,t,n)=>l=>{let o=[];if(null!=e&&e.length){const t=[...e],n=[...l];for(;n.length&&t.length;){const e=t.shift(),l=n.findIndex((t=>t.id===e));l>-1&&o.push(n.splice(l,1)[0])}o=[...o,...n]}else o=l;return E(o,t,n)}),{key:!1})})},H={getInitialState:e=>({...e,pagination:{pageIndex:0,pageSize:10,...null==e?void 0:e.pagination}}),getDefaultOptions:e=>({onPaginationChange:n("pagination",e)}),createTable:e=>{let n=!1,l=!1;return{_autoResetPageIndex:()=>{var t,o;if(n){if(null!=(t=null!=(o=e.options.autoResetAll)?o:e.options.autoResetPageIndex)?t:!e.options.manualPagination){if(l)return;l=!0,e._queue((()=>{e.resetPageIndex(),l=!1}))}}else e._queue((()=>{n=!0}))},setPagination:n=>null==e.options.onPaginationChange?void 0:e.options.onPaginationChange((e=>t(n,e))),resetPagination:t=>{var n;e.setPagination(t?{pageIndex:0,pageSize:10}:null!=(n=e.initialState.pagination)?n:{pageIndex:0,pageSize:10})},setPageIndex:n=>{e.setPagination((l=>{let o=t(n,l.pageIndex);const i=void 0===e.options.pageCount||-1===e.options.pageCount?Number.MAX_SAFE_INTEGER:e.options.pageCount-1;return o=Math.max(0,Math.min(o,i)),{...l,pageIndex:o}}))},resetPageIndex:t=>{var n,l,o;e.setPageIndex(t?0:null!=(n=null==(l=e.initialState)||null==(o=l.pagination)?void 0:o.pageIndex)?n:0)},resetPageSize:t=>{var n,l,o;e.setPageSize(t?10:null!=(n=null==(l=e.initialState)||null==(o=l.pagination)?void 0:o.pageSize)?n:10)},setPageSize:n=>{e.setPagination((e=>{const l=Math.max(1,t(n,e.pageSize)),o=e.pageSize*e.pageIndex,i=Math.floor(o/l);return{...e,pageIndex:i,pageSize:l}}))},setPageCount:n=>e.setPagination((l=>{var o;let i=t(n,null!=(o=e.options.pageCount)?o:-1);return"number"==typeof i&&(i=Math.max(-1,i)),{...l,pageCount:i}})),getPageOptions:r((()=>[e.getPageCount()]),(e=>{let t=[];return e&&e>0&&(t=[...new Array(e)].fill(null).map(((e,t)=>t))),t}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable}}),getCanPreviousPage:()=>e.getState().pagination.pageIndex>0,getCanNextPage:()=>{const{pageIndex:t}=e.getState().pagination,n=e.getPageCount();return-1===n||0!==n&&t<n-1},previousPage:()=>e.setPageIndex((e=>e-1)),nextPage:()=>e.setPageIndex((e=>e+1)),getPrePaginationRowModel:()=>e.getExpandedRowModel(),getPaginationRowModel:()=>(!e._getPaginationRowModel&&e.options.getPaginationRowModel&&(e._getPaginationRowModel=e.options.getPaginationRowModel(e)),e.options.manualPagination||!e._getPaginationRowModel?e.getPrePaginationRowModel():e._getPaginationRowModel()),getPageCount:()=>{var t;return null!=(t=e.options.pageCount)?t:Math.ceil(e.getPrePaginationRowModel().rows.length/e.getState().pagination.pageSize)}}}},z={getInitialState:e=>({columnPinning:{left:[],right:[]},...e}),getDefaultOptions:e=>({onColumnPinningChange:n("columnPinning",e)}),createColumn:(e,t)=>({pin:n=>{const l=e.getLeafColumns().map((e=>e.id)).filter(Boolean);t.setColumnPinning((e=>{var t,o,i,r,u,a;return"right"===n?{left:(null!=(i=null==e?void 0:e.left)?i:[]).filter((e=>!(null!=l&&l.includes(e)))),right:[...(null!=(r=null==e?void 0:e.right)?r:[]).filter((e=>!(null!=l&&l.includes(e)))),...l]}:"left"===n?{left:[...(null!=(u=null==e?void 0:e.left)?u:[]).filter((e=>!(null!=l&&l.includes(e)))),...l],right:(null!=(a=null==e?void 0:e.right)?a:[]).filter((e=>!(null!=l&&l.includes(e))))}:{left:(null!=(t=null==e?void 0:e.left)?t:[]).filter((e=>!(null!=l&&l.includes(e)))),right:(null!=(o=null==e?void 0:e.right)?o:[]).filter((e=>!(null!=l&&l.includes(e))))}}))},getCanPin:()=>e.getLeafColumns().some((e=>{var n,l;return(null==(n=e.columnDef.enablePinning)||n)&&(null==(l=t.options.enablePinning)||l)})),getIsPinned:()=>{const n=e.getLeafColumns().map((e=>e.id)),{left:l,right:o}=t.getState().columnPinning,i=n.some((e=>null==l?void 0:l.includes(e))),r=n.some((e=>null==o?void 0:o.includes(e)));return i?"left":!!r&&"right"},getPinnedIndex:()=>{var n,l,o;const i=e.getIsPinned();return i?null!=(n=null==(l=t.getState().columnPinning)||null==(o=l[i])?void 0:o.indexOf(e.id))?n:-1:0}}),createRow:(e,t)=>({getCenterVisibleCells:r((()=>[e._getAllVisibleCells(),t.getState().columnPinning.left,t.getState().columnPinning.right]),((e,t,n)=>{const l=[...null!=t?t:[],...null!=n?n:[]];return e.filter((e=>!l.includes(e.column.id)))}),{key:"row.getCenterVisibleCells",debug:()=>{var e;return null!=(e=t.options.debugAll)?e:t.options.debugRows}}),getLeftVisibleCells:r((()=>[e._getAllVisibleCells(),t.getState().columnPinning.left,,]),((e,t)=>(null!=t?t:[]).map((t=>e.find((e=>e.column.id===t)))).filter(Boolean).map((e=>({...e,position:"left"})))),{key:"row.getLeftVisibleCells",debug:()=>{var e;return null!=(e=t.options.debugAll)?e:t.options.debugRows}}),getRightVisibleCells:r((()=>[e._getAllVisibleCells(),t.getState().columnPinning.right]),((e,t)=>(null!=t?t:[]).map((t=>e.find((e=>e.column.id===t)))).filter(Boolean).map((e=>({...e,position:"right"})))),{key:"row.getRightVisibleCells",debug:()=>{var e;return null!=(e=t.options.debugAll)?e:t.options.debugRows}})}),createTable:e=>({setColumnPinning:t=>null==e.options.onColumnPinningChange?void 0:e.options.onColumnPinningChange(t),resetColumnPinning:t=>{var n,l;return e.setColumnPinning(t?{left:[],right:[]}:null!=(n=null==(l=e.initialState)?void 0:l.columnPinning)?n:{left:[],right:[]})},getIsSomeColumnsPinned:t=>{var n;const l=e.getState().columnPinning;var o,i;return t?Boolean(null==(n=l[t])?void 0:n.length):Boolean((null==(o=l.left)?void 0:o.length)||(null==(i=l.right)?void 0:i.length))},getLeftLeafColumns:r((()=>[e.getAllLeafColumns(),e.getState().columnPinning.left]),((e,t)=>(null!=t?t:[]).map((t=>e.find((e=>e.id===t)))).filter(Boolean)),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugColumns}}),getRightLeafColumns:r((()=>[e.getAllLeafColumns(),e.getState().columnPinning.right]),((e,t)=>(null!=t?t:[]).map((t=>e.find((e=>e.id===t)))).filter(Boolean)),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugColumns}}),getCenterLeafColumns:r((()=>[e.getAllLeafColumns(),e.getState().columnPinning.left,e.getState().columnPinning.right]),((e,t,n)=>{const l=[...null!=t?t:[],...null!=n?n:[]];return e.filter((e=>!l.includes(e.id)))}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugColumns}})})},L={getInitialState:e=>({rowSelection:{},...e}),getDefaultOptions:e=>({onRowSelectionChange:n("rowSelection",e),enableRowSelection:!0,enableMultiRowSelection:!0,enableSubRowSelection:!0}),createTable:e=>({setRowSelection:t=>null==e.options.onRowSelectionChange?void 0:e.options.onRowSelectionChange(t),resetRowSelection:t=>{var n;return e.setRowSelection(t?{}:null!=(n=e.initialState.rowSelection)?n:{})},toggleAllRowsSelected:t=>{e.setRowSelection((n=>{t=void 0!==t?t:!e.getIsAllRowsSelected();const l={...n},o=e.getPreGroupedRowModel().flatRows;return t?o.forEach((e=>{e.getCanSelect()&&(l[e.id]=!0)})):o.forEach((e=>{delete l[e.id]})),l}))},toggleAllPageRowsSelected:t=>e.setRowSelection((n=>{const l=void 0!==t?t:!e.getIsAllPageRowsSelected(),o={...n};return e.getRowModel().rows.forEach((t=>{D(o,t.id,l,e)})),o})),getPreSelectedRowModel:()=>e.getCoreRowModel(),getSelectedRowModel:r((()=>[e.getState().rowSelection,e.getCoreRowModel()]),((t,n)=>Object.keys(t).length?k(e,n):{rows:[],flatRows:[],rowsById:{}}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable}}),getFilteredSelectedRowModel:r((()=>[e.getState().rowSelection,e.getFilteredRowModel()]),((t,n)=>Object.keys(t).length?k(e,n):{rows:[],flatRows:[],rowsById:{}}),{key:"getFilteredSelectedRowModel",debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable}}),getGroupedSelectedRowModel:r((()=>[e.getState().rowSelection,e.getSortedRowModel()]),((t,n)=>Object.keys(t).length?k(e,n):{rows:[],flatRows:[],rowsById:{}}),{key:"getGroupedSelectedRowModel",debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable}}),getIsAllRowsSelected:()=>{const t=e.getFilteredRowModel().flatRows,{rowSelection:n}=e.getState();let l=Boolean(t.length&&Object.keys(n).length);return l&&t.some((e=>e.getCanSelect()&&!n[e.id]))&&(l=!1),l},getIsAllPageRowsSelected:()=>{const t=e.getPaginationRowModel().flatRows.filter((e=>e.getCanSelect())),{rowSelection:n}=e.getState();let l=!!t.length;return l&&t.some((e=>!n[e.id]))&&(l=!1),l},getIsSomeRowsSelected:()=>{var t;const n=Object.keys(null!=(t=e.getState().rowSelection)?t:{}).length;return n>0&&n<e.getFilteredRowModel().flatRows.length},getIsSomePageRowsSelected:()=>{const t=e.getPaginationRowModel().flatRows;return!e.getIsAllPageRowsSelected()&&t.filter((e=>e.getCanSelect())).some((e=>e.getIsSelected()||e.getIsSomeSelected()))},getToggleAllRowsSelectedHandler:()=>t=>{e.toggleAllRowsSelected(t.target.checked)},getToggleAllPageRowsSelectedHandler:()=>t=>{e.toggleAllPageRowsSelected(t.target.checked)}}),createRow:(e,t)=>({toggleSelected:n=>{const l=e.getIsSelected();t.setRowSelection((o=>{if(l===(n=void 0!==n?n:!l))return o;const i={...o};return D(i,e.id,n,t),i}))},getIsSelected:()=>{const{rowSelection:n}=t.getState();return O(e,n)},getIsSomeSelected:()=>{const{rowSelection:n}=t.getState();return"some"===T(e,n)},getIsAllSubRowsSelected:()=>{const{rowSelection:n}=t.getState();return"all"===T(e,n)},getCanSelect:()=>{var n;return"function"==typeof t.options.enableRowSelection?t.options.enableRowSelection(e):null==(n=t.options.enableRowSelection)||n},getCanSelectSubRows:()=>{var n;return"function"==typeof t.options.enableSubRowSelection?t.options.enableSubRowSelection(e):null==(n=t.options.enableSubRowSelection)||n},getCanMultiSelect:()=>{var n;return"function"==typeof t.options.enableMultiRowSelection?t.options.enableMultiRowSelection(e):null==(n=t.options.enableMultiRowSelection)||n},getToggleSelectedHandler:()=>{const t=e.getCanSelect();return n=>{var l;t&&e.toggleSelected(null==(l=n.target)?void 0:l.checked)}}})},D=(e,t,n,l)=>{var o;const i=l.getRow(t);n?(i.getCanMultiSelect()||Object.keys(e).forEach((t=>delete e[t])),i.getCanSelect()&&(e[t]=!0)):delete e[t],null!=(o=i.subRows)&&o.length&&i.getCanSelectSubRows()&&i.subRows.forEach((t=>D(e,t.id,n,l)))};function k(e,t){const n=e.getState().rowSelection,l=[],o={},i=function(e,t){return e.map((e=>{var t;const r=O(e,n);if(r&&(l.push(e),o[e.id]=e),null!=(t=e.subRows)&&t.length&&(e={...e,subRows:i(e.subRows)}),r)return e})).filter(Boolean)};return{rows:i(t.rows),flatRows:l,rowsById:o}}function O(e,t){var n;return null!=(n=t[e.id])&&n}function T(e,t,n){if(e.subRows&&e.subRows.length){let n=!0,l=!1;return e.subRows.forEach((e=>{l&&!n||(O(e,t)?l=!0:n=!1)})),n?"all":!!l&&"some"}return!1}const B=/([0-9]+)/gm;function q(e,t){return e===t?0:e>t?1:-1}function j(e){return"number"==typeof e?isNaN(e)||e===1/0||e===-1/0?"":String(e):"string"==typeof e?e:""}function N(e,t){const n=e.split(B).filter(Boolean),l=t.split(B).filter(Boolean);for(;n.length&&l.length;){const e=n.shift(),t=l.shift(),o=parseInt(e,10),i=parseInt(t,10),r=[o,i].sort();if(isNaN(r[0])){if(e>t)return 1;if(t>e)return-1}else{if(isNaN(r[1]))return isNaN(o)?-1:1;if(o>i)return 1;if(i>o)return-1}}return n.length-l.length}const U={alphanumeric:(e,t,n)=>N(j(e.getValue(n)).toLowerCase(),j(t.getValue(n)).toLowerCase()),alphanumericCaseSensitive:(e,t,n)=>N(j(e.getValue(n)),j(t.getValue(n))),text:(e,t,n)=>q(j(e.getValue(n)).toLowerCase(),j(t.getValue(n)).toLowerCase()),textCaseSensitive:(e,t,n)=>q(j(e.getValue(n)),j(t.getValue(n))),datetime:(e,t,n)=>{const l=e.getValue(n),o=t.getValue(n);return l>o?1:l<o?-1:0},basic:(e,t,n)=>q(e.getValue(n),t.getValue(n))},$={getInitialState:e=>({sorting:[],...e}),getDefaultColumnDef:()=>({sortingFn:"auto"}),getDefaultOptions:e=>({onSortingChange:n("sorting",e),isMultiSortEvent:e=>e.shiftKey}),createColumn:(e,t)=>({getAutoSortingFn:()=>{const n=t.getFilteredRowModel().flatRows.slice(10);let l=!1;for(const t of n){const n=null==t?void 0:t.getValue(e.id);if("[object Date]"===Object.prototype.toString.call(n))return U.datetime;if("string"==typeof n&&(l=!0,n.split(B).length>1))return U.alphanumeric}return l?U.text:U.basic},getAutoSortDir:()=>{const n=t.getFilteredRowModel().flatRows[0];return"string"==typeof(null==n?void 0:n.getValue(e.id))?"asc":"desc"},getSortingFn:()=>{var n,o;if(!e)throw new Error;return l(e.columnDef.sortingFn)?e.columnDef.sortingFn:"auto"===e.columnDef.sortingFn?e.getAutoSortingFn():null!=(n=null==(o=t.options.sortingFns)?void 0:o[e.columnDef.sortingFn])?n:U[e.columnDef.sortingFn]},toggleSorting:(n,l)=>{const o=e.getNextSortingOrder(),i=null!=n;t.setSorting((r=>{const u=null==r?void 0:r.find((t=>t.id===e.id)),a=null==r?void 0:r.findIndex((t=>t.id===e.id));let s,g=[],d=i?n:"desc"===o;var c;(s=null!=r&&r.length&&e.getCanMultiSort()&&l?u?"toggle":"add":null!=r&&r.length&&a!==r.length-1?"replace":u?"toggle":"replace","toggle"===s&&(i||o||(s="remove")),"add"===s)?(g=[...r,{id:e.id,desc:d}],g.splice(0,g.length-(null!=(c=t.options.maxMultiSortColCount)?c:Number.MAX_SAFE_INTEGER))):g="toggle"===s?r.map((t=>t.id===e.id?{...t,desc:d}:t)):"remove"===s?r.filter((t=>t.id!==e.id)):[{id:e.id,desc:d}];return g}))},getFirstSortDir:()=>{var n,l;return(null!=(n=null!=(l=e.columnDef.sortDescFirst)?l:t.options.sortDescFirst)?n:"desc"===e.getAutoSortDir())?"desc":"asc"},getNextSortingOrder:n=>{var l,o;const i=e.getFirstSortDir(),r=e.getIsSorted();return r?!!(r===i||null!=(l=t.options.enableSortingRemoval)&&!l||n&&null!=(o=t.options.enableMultiRemove)&&!o)&&("desc"===r?"asc":"desc"):i},getCanSort:()=>{var n,l;return(null==(n=e.columnDef.enableSorting)||n)&&(null==(l=t.options.enableSorting)||l)&&!!e.accessorFn},getCanMultiSort:()=>{var n,l;return null!=(n=null!=(l=e.columnDef.enableMultiSort)?l:t.options.enableMultiSort)?n:!!e.accessorFn},getIsSorted:()=>{var n;const l=null==(n=t.getState().sorting)?void 0:n.find((t=>t.id===e.id));return!!l&&(l.desc?"desc":"asc")},getSortIndex:()=>{var n,l;return null!=(n=null==(l=t.getState().sorting)?void 0:l.findIndex((t=>t.id===e.id)))?n:-1},clearSorting:()=>{t.setSorting((t=>null!=t&&t.length?t.filter((t=>t.id!==e.id)):[]))},getToggleSortingHandler:()=>{const n=e.getCanSort();return l=>{n&&(null==l.persist||l.persist(),null==e.toggleSorting||e.toggleSorting(void 0,!!e.getCanMultiSort()&&(null==t.options.isMultiSortEvent?void 0:t.options.isMultiSortEvent(l))))}}}),createTable:e=>({setSorting:t=>null==e.options.onSortingChange?void 0:e.options.onSortingChange(t),resetSorting:t=>{var n,l;e.setSorting(t?[]:null!=(n=null==(l=e.initialState)?void 0:l.sorting)?n:[])},getPreSortedRowModel:()=>e.getGroupedRowModel(),getSortedRowModel:()=>(!e._getSortedRowModel&&e.options.getSortedRowModel&&(e._getSortedRowModel=e.options.getSortedRowModel(e)),e.options.manualSorting||!e._getSortedRowModel?e.getPreSortedRowModel():e._getSortedRowModel())})},X={getInitialState:e=>({columnVisibility:{},...e}),getDefaultOptions:e=>({onColumnVisibilityChange:n("columnVisibility",e)}),createColumn:(e,t)=>({toggleVisibility:n=>{e.getCanHide()&&t.setColumnVisibility((t=>({...t,[e.id]:null!=n?n:!e.getIsVisible()})))},getIsVisible:()=>{var n,l;return null==(n=null==(l=t.getState().columnVisibility)?void 0:l[e.id])||n},getCanHide:()=>{var n,l;return(null==(n=e.columnDef.enableHiding)||n)&&(null==(l=t.options.enableHiding)||l)},getToggleVisibilityHandler:()=>t=>{null==e.toggleVisibility||e.toggleVisibility(t.target.checked)}}),createRow:(e,t)=>({_getAllVisibleCells:r((()=>[e.getAllCells(),t.getState().columnVisibility]),(e=>e.filter((e=>e.column.getIsVisible()))),{key:"row._getAllVisibleCells",debug:()=>{var e;return null!=(e=t.options.debugAll)?e:t.options.debugRows}}),getVisibleCells:r((()=>[e.getLeftVisibleCells(),e.getCenterVisibleCells(),e.getRightVisibleCells()]),((e,t,n)=>[...e,...t,...n]),{key:!1,debug:()=>{var e;return null!=(e=t.options.debugAll)?e:t.options.debugRows}})}),createTable:e=>{const t=(t,n)=>r((()=>[n(),n().filter((e=>e.getIsVisible())).map((e=>e.id)).join("_")]),(e=>e.filter((e=>null==e.getIsVisible?void 0:e.getIsVisible()))),{key:t,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugColumns}});return{getVisibleFlatColumns:t("getVisibleFlatColumns",(()=>e.getAllFlatColumns())),getVisibleLeafColumns:t("getVisibleLeafColumns",(()=>e.getAllLeafColumns())),getLeftVisibleLeafColumns:t("getLeftVisibleLeafColumns",(()=>e.getLeftLeafColumns())),getRightVisibleLeafColumns:t("getRightVisibleLeafColumns",(()=>e.getRightLeafColumns())),getCenterVisibleLeafColumns:t("getCenterVisibleLeafColumns",(()=>e.getCenterLeafColumns())),setColumnVisibility:t=>null==e.options.onColumnVisibilityChange?void 0:e.options.onColumnVisibilityChange(t),resetColumnVisibility:t=>{var n;e.setColumnVisibility(t?{}:null!=(n=e.initialState.columnVisibility)?n:{})},toggleAllColumnsVisible:t=>{var n;t=null!=(n=t)?n:!e.getIsAllColumnsVisible(),e.setColumnVisibility(e.getAllLeafColumns().reduce(((e,n)=>({...e,[n.id]:t||!(null!=n.getCanHide&&n.getCanHide())})),{}))},getIsAllColumnsVisible:()=>!e.getAllLeafColumns().some((e=>!(null!=e.getIsVisible&&e.getIsVisible()))),getIsSomeColumnsVisible:()=>e.getAllLeafColumns().some((e=>null==e.getIsVisible?void 0:e.getIsVisible())),getToggleAllColumnsVisibilityHandler:()=>t=>{var n;e.toggleAllColumnsVisible(null==(n=t.target)?void 0:n.checked)}}}},K=[s,X,G,z,x,$,A,b,H,L,c];function J(e,t,n,l){const o={id:`${t.id}_${n.id}`,row:t,column:n,getValue:()=>t.getValue(l),renderValue:()=>{var t;return null!=(t=o.getValue())?t:e.options.renderFallbackValue},getContext:r((()=>[e,n,t,o]),((e,t,n,l)=>({table:e,column:t,row:n,cell:l,getValue:l.getValue,renderValue:l.renderValue})),{key:!1,debug:()=>e.options.debugAll})};return e._features.forEach((l=>{Object.assign(o,null==l.createCell?void 0:l.createCell(o,n,t,e))}),{}),o}const Q=(e,t,n,l,o,u,a)=>{let s={id:t,index:l,original:n,depth:o,parentId:a,_valuesCache:{},_uniqueValuesCache:{},getValue:t=>{if(s._valuesCache.hasOwnProperty(t))return s._valuesCache[t];const n=e.getColumn(t);return null!=n&&n.accessorFn?(s._valuesCache[t]=n.accessorFn(s.original,l),s._valuesCache[t]):void 0},getUniqueValues:t=>{if(s._uniqueValuesCache.hasOwnProperty(t))return s._uniqueValuesCache[t];const n=e.getColumn(t);return null!=n&&n.accessorFn?n.columnDef.getUniqueValues?(s._uniqueValuesCache[t]=n.columnDef.getUniqueValues(s.original,l),s._uniqueValuesCache[t]):(s._uniqueValuesCache[t]=[s.getValue(t)],s._uniqueValuesCache[t]):void 0},renderValue:t=>{var n;return null!=(n=s.getValue(t))?n:e.options.renderFallbackValue},subRows:null!=u?u:[],getLeafRows:()=>i(s.subRows,(e=>e.subRows)),getParentRow:()=>s.parentId?e.getRow(s.parentId):void 0,getParentRows:()=>{let e=[],t=s;for(;;){const n=t.getParentRow();if(!n)break;e.push(n),t=n}return e.reverse()},getAllCells:r((()=>[e.getAllLeafColumns()]),(t=>t.map((t=>J(e,s,t,t.id)))),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugRows}}),_getAllCellsByColumnId:r((()=>[s.getAllCells()]),(e=>e.reduce(((e,t)=>(e[t.column.id]=t,e)),{})),{key:"row.getAllCellsByColumnId",debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugRows}})};for(let t=0;t<e._features.length;t++){const n=e._features[t];Object.assign(s,null==n||null==n.createRow?void 0:n.createRow(s,e))}return s};function W(e,t,n){return n.options.filterFromLeafRows?function(e,t,n){var l;const o=[],i={},r=null!=(l=n.options.maxLeafRowFilterDepth)?l:100,u=function(e,l){void 0===l&&(l=0);const o=[];for(let s=0;s<e.length;s++){var a;let g=e[s];const d=Q(n,g.id,g.original,g.index,g.depth,void 0,g.parentId);if(d.columnFilters=g.columnFilters,null!=(a=g.subRows)&&a.length&&l<r){if(d.subRows=u(g.subRows,l+1),g=d,t(g)&&!d.subRows.length){o.push(g),i[g.id]=g,i[s]=g;continue}if(t(g)||d.subRows.length){o.push(g),i[g.id]=g,i[s]=g;continue}}else g=d,t(g)&&(o.push(g),i[g.id]=g,i[s]=g)}return o};return{rows:u(e),flatRows:o,rowsById:i}}(e,t,n):function(e,t,n){var l;const o=[],i={},r=null!=(l=n.options.maxLeafRowFilterDepth)?l:100,u=function(e,l){void 0===l&&(l=0);const a=[];for(let g=0;g<e.length;g++){let d=e[g];if(t(d)){var s;if(null!=(s=d.subRows)&&s.length&&l<r){const e=Q(n,d.id,d.original,d.index,d.depth,void 0,d.parentId);e.subRows=u(d.subRows,l+1),d=e}a.push(d),o.push(d),i[d.id]=d}}return a};return{rows:u(e),flatRows:o,rowsById:i}}(e,t,n)}function Y(e){const t=[],n=e=>{var l;t.push(e),null!=(l=e.subRows)&&l.length&&e.getIsExpanded()&&e.subRows.forEach(n)};return e.rows.forEach(n),{rows:t,flatRows:e.flatRows,rowsById:e.rowsById}}e.ColumnSizing=c,e.Expanding=b,e.Filters=x,e.Grouping=A,e.Headers=s,e.Ordering=G,e.Pagination=H,e.Pinning=z,e.RowSelection=L,e.Sorting=$,e.Visibility=X,e.aggregationFns=P,e.buildHeaderGroups=g,e.createCell=J,e.createColumn=u,e.createColumnHelper=function(){return{accessor:(e,t)=>"function"==typeof e?{...t,accessorFn:e}:{...t,accessorKey:e},display:e=>e,group:e=>e}},e.createRow=Q,e.createTable=function(e){var n;(e.debugAll||e.debugTable)&&console.info("Creating Table Instance...");let l={_features:[...K,...e.features||[]]};const o=l._features.reduce(((e,t)=>Object.assign(e,null==t.getDefaultOptions?void 0:t.getDefaultOptions(l))),{});let i={...null!=(n=e.initialState)?n:{}};l._features.forEach((e=>{var t;i=null!=(t=null==e.getInitialState?void 0:e.getInitialState(i))?t:i}));const a=[];let s=!1;const g={_features:l._features,options:{...o,...e},initialState:i,_queue:e=>{a.push(e),s||(s=!0,Promise.resolve().then((()=>{for(;a.length;)a.shift()();s=!1})).catch((e=>setTimeout((()=>{throw e})))))},reset:()=>{l.setState(l.initialState)},setOptions:e=>{const n=t(e,l.options);l.options=(e=>l.options.mergeOptions?l.options.mergeOptions(o,e):{...o,...e})(n)},getState:()=>l.options.state,setState:e=>{null==l.options.onStateChange||l.options.onStateChange(e)},_getRowId:(e,t,n)=>{var o;return null!=(o=null==l.options.getRowId?void 0:l.options.getRowId(e,t,n))?o:`${n?[n.id,t].join("."):t}`},getCoreRowModel:()=>(l._getCoreRowModel||(l._getCoreRowModel=l.options.getCoreRowModel(l)),l._getCoreRowModel()),getRowModel:()=>l.getPaginationRowModel(),getRow:e=>{const t=l.getRowModel().rowsById[e];if(!t)throw new Error;return t},_getDefaultColumnDef:r((()=>[l.options.defaultColumn]),(e=>{var t;return e=null!=(t=e)?t:{},{header:e=>{const t=e.header.column.columnDef;return t.accessorKey?t.accessorKey:t.accessorFn?t.id:null},cell:e=>{var t,n;return null!=(t=null==(n=e.renderValue())||null==n.toString?void 0:n.toString())?t:null},...l._features.reduce(((e,t)=>Object.assign(e,null==t.getDefaultColumnDef?void 0:t.getDefaultColumnDef())),{}),...e}}),{debug:()=>{var e;return null!=(e=l.options.debugAll)?e:l.options.debugColumns},key:!1}),_getColumnDefs:()=>l.options.columns,getAllColumns:r((()=>[l._getColumnDefs()]),(e=>{const t=function(e,n,o){return void 0===o&&(o=0),e.map((e=>{const i=u(l,e,o,n),r=e;return i.columns=r.columns?t(r.columns,i,o+1):[],i}))};return t(e)}),{key:!1,debug:()=>{var e;return null!=(e=l.options.debugAll)?e:l.options.debugColumns}}),getAllFlatColumns:r((()=>[l.getAllColumns()]),(e=>e.flatMap((e=>e.getFlatColumns()))),{key:!1,debug:()=>{var e;return null!=(e=l.options.debugAll)?e:l.options.debugColumns}}),_getAllFlatColumnsById:r((()=>[l.getAllFlatColumns()]),(e=>e.reduce(((e,t)=>(e[t.id]=t,e)),{})),{key:!1,debug:()=>{var e;return null!=(e=l.options.debugAll)?e:l.options.debugColumns}}),getAllLeafColumns:r((()=>[l.getAllColumns(),l._getOrderColumnsFn()]),((e,t)=>t(e.flatMap((e=>e.getLeafColumns())))),{key:!1,debug:()=>{var e;return null!=(e=l.options.debugAll)?e:l.options.debugColumns}}),getColumn:e=>l._getAllFlatColumnsById()[e]};return Object.assign(l,g),l._features.forEach((e=>Object.assign(l,null==e.createTable?void 0:e.createTable(l)))),l},e.defaultColumnSizing=d,e.expandRows=Y,e.filterFns=y,e.flattenBy=i,e.functionalUpdate=t,e.getCoreRowModel=function(){return e=>r((()=>[e.options.data]),(t=>{const n={rows:[],flatRows:[],rowsById:{}},l=function(t,o,i){void 0===o&&(o=0);const r=[];for(let a=0;a<t.length;a++){const s=Q(e,e._getRowId(t[a],a,i),t[a],a,o,void 0,null==i?void 0:i.id);var u;if(n.flatRows.push(s),n.rowsById[s.id]=s,r.push(s),e.options.getSubRows)s.originalSubRows=e.options.getSubRows(t[a],a),null!=(u=s.originalSubRows)&&u.length&&(s.subRows=l(s.originalSubRows,o+1,s))}return r};return n.rows=l(t),n}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable},onChange:()=>{e._autoResetPageIndex()}})},e.getExpandedRowModel=function(){return e=>r((()=>[e.getState().expanded,e.getPreExpandedRowModel(),e.options.paginateExpandedRows]),((e,t,n)=>!t.rows.length||!0!==e&&!Object.keys(null!=e?e:{}).length?t:n?Y(t):t),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable}})},e.getFacetedMinMaxValues=function(){return(e,t)=>r((()=>{var n;return[null==(n=e.getColumn(t))?void 0:n.getFacetedRowModel()]}),(e=>{var n;if(!e)return;const l=null==(n=e.flatRows[0])?void 0:n.getUniqueValues(t);if(void 0===l)return;let o=[l,l];for(let n=0;n<e.flatRows.length;n++){const l=e.flatRows[n].getUniqueValues(t);for(let e=0;e<l.length;e++){const t=l[e];t<o[0]?o[0]=t:t>o[1]&&(o[1]=t)}}return o}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable},onChange:()=>{}})},e.getFacetedRowModel=function(){return(e,t)=>r((()=>[e.getPreFilteredRowModel(),e.getState().columnFilters,e.getState().globalFilter,e.getFilteredRowModel()]),((n,l,o)=>{if(!n.rows.length||(null==l||!l.length)&&!o)return n;const i=[...l.map((e=>e.id)).filter((e=>e!==t)),o?"__global__":void 0].filter(Boolean);return W(n.rows,(e=>{for(let t=0;t<i.length;t++)if(!1===e.columnFilters[i[t]])return!1;return!0}),e)}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable},onChange:()=>{}})},e.getFacetedUniqueValues=function(){return(e,t)=>r((()=>{var n;return[null==(n=e.getColumn(t))?void 0:n.getFacetedRowModel()]}),(e=>{if(!e)return new Map;let n=new Map;for(let o=0;o<e.flatRows.length;o++){const i=e.flatRows[o].getUniqueValues(t);for(let e=0;e<i.length;e++){const t=i[e];var l;if(n.has(t))n.set(t,(null!=(l=n.get(t))?l:0)+1);else n.set(t,1)}}return n}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable},onChange:()=>{}})},e.getFilteredRowModel=function(){return e=>r((()=>[e.getPreFilteredRowModel(),e.getState().columnFilters,e.getState().globalFilter]),((t,n,l)=>{if(!t.rows.length||(null==n||!n.length)&&!l){for(let e=0;e<t.flatRows.length;e++)t.flatRows[e].columnFilters={},t.flatRows[e].columnFiltersMeta={};return t}const o=[],i=[];(null!=n?n:[]).forEach((t=>{var n;const l=e.getColumn(t.id);if(!l)return;const i=l.getFilterFn();i&&o.push({id:t.id,filterFn:i,resolvedValue:null!=(n=null==i.resolveFilterValue?void 0:i.resolveFilterValue(t.value))?n:t.value})}));const r=n.map((e=>e.id)),u=e.getGlobalFilterFn(),a=e.getAllLeafColumns().filter((e=>e.getCanGlobalFilter()));let s,g;l&&u&&a.length&&(r.push("__global__"),a.forEach((e=>{var t;i.push({id:e.id,filterFn:u,resolvedValue:null!=(t=null==u.resolveFilterValue?void 0:u.resolveFilterValue(l))?t:l})})));for(let e=0;e<t.flatRows.length;e++){const n=t.flatRows[e];if(n.columnFilters={},o.length)for(let e=0;e<o.length;e++){s=o[e];const t=s.id;n.columnFilters[t]=s.filterFn(n,t,s.resolvedValue,(e=>{n.columnFiltersMeta[t]=e}))}if(i.length){for(let e=0;e<i.length;e++){g=i[e];const t=g.id;if(g.filterFn(n,t,g.resolvedValue,(e=>{n.columnFiltersMeta[t]=e}))){n.columnFilters.__global__=!0;break}}!0!==n.columnFilters.__global__&&(n.columnFilters.__global__=!1)}}return W(t.rows,(e=>{for(let t=0;t<r.length;t++)if(!1===e.columnFilters[r[t]])return!1;return!0}),e)}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable},onChange:()=>{e._autoResetPageIndex()}})},e.getGroupedRowModel=function(){return e=>r((()=>[e.getState().grouping,e.getPreGroupedRowModel()]),((t,n)=>{if(!n.rows.length||!t.length)return n;const l=t.filter((t=>e.getColumn(t))),o=[],r={},u=function(t,n,a){if(void 0===n&&(n=0),n>=l.length)return t.map((e=>(e.depth=n,o.push(e),r[e.id]=e,e.subRows&&(e.subRows=u(e.subRows,n+1,e.id)),e)));const s=l[n],g=function(e,t){const n=new Map;return e.reduce(((e,n)=>{const l=`${n.getGroupingValue(t)}`,o=e.get(l);return o?o.push(n):e.set(l,[n]),e}),n)}(t,s),d=Array.from(g.entries()).map(((t,g)=>{let[d,c]=t,p=`${s}:${d}`;p=a?`${a}>${p}`:p;const f=u(c,n+1,p),m=n?i(c,(e=>e.subRows)):c,b=Q(e,p,m[0].original,g,n,void 0,a);return Object.assign(b,{groupingColumnId:s,groupingValue:d,subRows:f,leafRows:m,getValue:t=>{if(l.includes(t)){if(b._valuesCache.hasOwnProperty(t))return b._valuesCache[t];var n;if(c[0])b._valuesCache[t]=null!=(n=c[0].getValue(t))?n:void 0;return b._valuesCache[t]}if(b._groupingValuesCache.hasOwnProperty(t))return b._groupingValuesCache[t];const o=e.getColumn(t),i=null==o?void 0:o.getAggregationFn();return i?(b._groupingValuesCache[t]=i(t,m,c),b._groupingValuesCache[t]):void 0}}),f.forEach((e=>{o.push(e),r[e.id]=e})),b}));return d},a=u(n.rows,0);return a.forEach((e=>{o.push(e),r[e.id]=e})),{rows:a,flatRows:o,rowsById:r}}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable},onChange:()=>{e._queue((()=>{e._autoResetExpanded(),e._autoResetPageIndex()}))}})},e.getPaginationRowModel=function(e){return e=>r((()=>[e.getState().pagination,e.getPrePaginationRowModel(),e.options.paginateExpandedRows?void 0:e.getState().expanded]),((t,n)=>{if(!n.rows.length)return n;const{pageSize:l,pageIndex:o}=t;let{rows:i,flatRows:r,rowsById:u}=n;const a=l*o,s=a+l;let g;i=i.slice(a,s),g=e.options.paginateExpandedRows?{rows:i,flatRows:r,rowsById:u}:Y({rows:i,flatRows:r,rowsById:u}),g.flatRows=[];const d=e=>{g.flatRows.push(e),e.subRows.length&&e.subRows.forEach(d)};return g.rows.forEach(d),g}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable}})},e.getSortedRowModel=function(){return e=>r((()=>[e.getState().sorting,e.getPreSortedRowModel()]),((t,n)=>{if(!n.rows.length||null==t||!t.length)return n;const l=e.getState().sorting,o=[],i=l.filter((t=>{var n;return null==(n=e.getColumn(t.id))?void 0:n.getCanSort()})),r={};i.forEach((t=>{const n=e.getColumn(t.id);n&&(r[t.id]={sortUndefined:n.columnDef.sortUndefined,invertSorting:n.columnDef.invertSorting,sortingFn:n.getSortingFn()})}));const u=e=>{const t=[...e];return t.sort(((e,t)=>{for(let l=0;l<i.length;l+=1){var n;const o=i[l],u=r[o.id],a=null!=(n=null==o?void 0:o.desc)&&n;if(u.sortUndefined){const n=void 0===e.getValue(o.id),l=void 0===t.getValue(o.id);if(n||l)return n&&l?0:n?u.sortUndefined:-u.sortUndefined}let s=u.sortingFn(e,t,o.id);if(0!==s)return a&&(s*=-1),u.invertSorting&&(s*=-1),s}return e.index-t.index})),t.forEach((e=>{var t;o.push(e),null!=(t=e.subRows)&&t.length&&(e.subRows=u(e.subRows))})),t};return{rows:u(n.rows),flatRows:o,rowsById:n.rowsById}}),{key:!1,debug:()=>{var t;return null!=(t=e.options.debugAll)?t:e.options.debugTable},onChange:()=>{e._autoResetPageIndex()}})},e.isFunction=l,e.isNumberArray=o,e.isRowSelected=O,e.isSubRowSelected=T,e.makeStateUpdater=n,e.memo=r,e.noop=function(){},e.orderColumns=E,e.passiveEventSupported=f,e.reSplitAlphaNumeric=B,e.selectRowsFn=k,e.shouldAutoRemoveFilter=_,e.sortingFns=U,Object.defineProperty(e,"__esModule",{value:!0})}));
 //# sourceMappingURL=index.production.js.map
diff --git a/build/umd/index.production.js.map b/build/umd/index.production.js.map
index 964455e72f8cfa4e9df9a4569159fe40123909e9..8f46d5815e74318063eaee4a71423f6e510578db 100644
--- a/build/umd/index.production.js.map
+++ b/build/umd/index.production.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.production.js","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/table.ts","../../src/core/cell.ts","../../src/core/row.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getExpandedRowModel.ts","../../src/columnHelper.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getPaginationRowModel.ts","../../src/utils/getSortedRowModel.ts"],"sourcesContent":["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function isNumberArray(d: any): d is number[] {\n  return Array.isArray(d) && d.every(val => typeof val === 'number')\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column?.getCanResize()\n\n        return (e: unknown) => {\n          if (!column || !canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const newColumnSizing: ColumnSizingState = {}\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table\n          .getPrePaginationRowModel()\n          .flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(\n    row\n      .getValue<string | null>(columnId)\n      ?.toString()\n      ?.toLowerCase()\n      ?.includes(search)\n  )\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(\n    row.getValue<string | null>(columnId)?.toString()?.includes(filterValue)\n  )\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string | null>(columnId)?.toString()?.toLowerCase() ===\n    filterValue?.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          // @ts-ignore \n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\nimport { isNumberArray } from './utils'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  const values = leafRows.map(row => row.getValue(columnId))\n  if (!isNumberArray(values)) {\n    return\n  }\n  if (values.length === 1) {\n    return values[0]\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = values.sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1]! + nums[mid]!) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n  getGroupingValue?: (row: TData) => any\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  getGroupingValue: (columnId: string) => unknown\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      getGroupingValue: columnId => {\n        if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n          return row._groupingValuesCache[columnId]\n        }\n\n        const column = table.getColumn(columnId)\n\n        if (!column?.columnDef.getGroupingValue) {\n          return row.getValue(columnId)\n        }\n\n        row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(\n          row.original\n        )\n\n        return row._groupingValuesCache[columnId]\n      },\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table\n          .getPaginationRowModel()\n          .flatRows.filter(row => row.getCanSelect())\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows\n              .filter(row => row.getCanSelect())\n              .some(d => d.getIsSelected() || d.getIsSomeSelected())\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  parentId?: string\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n  getParentRow: () => Row<TData> | undefined\n  getParentRows: () => Row<TData>[]\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[],\n  parentId?: string\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => (row.parentId ? table.getRow(row.parentId) : undefined),\n    getParentRows: () => {\n      let parentRows: Row<TData>[] = []\n      let currentRow = row\n      while (true) {\n        const parentRow = currentRow.getParentRow()\n        if (!parentRow) break\n        parentRows.push(parentRow)\n        currentRow = parentRow\n      }\n      return parentRows.reverse()\n    },\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        undefined,\n        row.parentId\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows: Row<TData>[] = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth,\n            undefined,\n            row.parentId\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parentRow?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parentRow),\n              originalRows[i]!,\n              i,\n              depth,\n              undefined,\n              parentRow?.id\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return undefined\n\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return new Map()\n\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            return\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id)\n              }\n\n              return row\n            })\n          }\n\n          const columnId: string = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth,\n                undefined,\n                parentId\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column?.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0)\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if (!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","isNumberArray","Array","isArray","every","val","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","result","deps","depTime","debug","Date","now","newDeps","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","_ref","_resolvedColumnDef$id","resolvedColumnDef","_getDefaultColumnDef","accessorKey","accessorFn","id","replace","undefined","header","includes","originalRow","split","_result","Error","column","columns","getFlatColumns","_column$columns","flatMap","_table$options$debugA","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_table$options$debugA2","_features","reduce","obj","feature","Object","assign","createHeader","_options$id","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","_left$map$filter","_right$map$filter","leftColumns","columnId","find","filter","Boolean","rightColumns","buildHeaderGroups","process","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","_left$map$filter2","_table$options$debugA3","getRightHeaderGroups","_right$map$filter2","_table$options$debugA4","getFooterGroups","headerGroups","reverse","_table$options$debugA5","getLeftFooterGroups","_table$options$debugA6","getCenterFooterGroups","_table$options$debugA7","getRightFooterGroups","_table$options$debugA8","getFlatHeaders","headers","_table$options$debugA9","getLeftFlatHeaders","_table$options$debugA10","getCenterFlatHeaders","_table$options$debugA11","getRightFlatHeaders","_table$options$debugA12","getCenterLeafHeaders","flatHeaders","_header$subHeaders","_table$options$debugA13","getLeftLeafHeaders","_header$subHeaders2","_table$options$debugA14","getRightLeafHeaders","_header$subHeaders3","_table$options$debugA15","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","bottomHeaders","recurseHeadersForSpans","childRowSpans","childColSpan","childRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","_column$columnDef$min","_column$columnDef$max","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","_column$columnDef$ena","_table$options$enable","enableResizing","enableColumnResizing","getIsResizing","sum","_header$column$getSiz","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","newColumnSizing","updateOffset","eventType","clientXPos","setColumnSizingInfo","_old$startOffset","_old$startSize","_ref3","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","_e$touches$","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","_table$initialState$c","initialState","resetHeaderSizeInfo","_table$initialState$c2","getTotalSize","_table$getHeaderGroup","_table$getHeaderGroup2","getLeftTotalSize","_table$getLeftHeaderG","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader","_table$getRightHeader2","passiveSupported","supported","noop","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_table$options$autoRe","autoResetAll","autoResetExpanded","manualExpanding","_queue","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState$e","_table$initialState","getCanSomeRowsExpand","getPrePaginationRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getRowModel","getIsExpanded","getExpandedDepth","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","getIsRowExpanded","_table$options$getRow","_row$subRows","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","_row$getValue","_row$getValue$toStrin","_row$getValue$toStrin2","search","toLowerCase","getValue","toString","autoRemove","testFalsey","includesStringSensitive","_row$getValue2","_row$getValue2$toStri","equalsString","_row$getValue3","_row$getValue3$toStri","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","maxLeafRowFilterDepth","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","_table$getCoreRowMode2","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","getFilterFn","_table$options$filter","_table$options$filter2","getCanFilter","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","_table$getState$colum4","setFilterValue","setColumnFilters","previousfilter","newFilter","_old$filter","shouldAutoRemoveFilter","newFilterObj","_old$map","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter3","_table$options$filter4","getAllLeafColumns","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","aggregationFns","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","mid","floor","nums","sort","a","b","unique","from","Set","uniqueCount","_columnId","Grouping","aggregatedCell","props","_toString","_props$getValue","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","_table$options$aggreg","_table$options$aggreg2","resetGrouping","_table$initialState$g","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","getGroupingValue","_groupingValuesCache","hasOwnProperty","original","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","Pagination","pagination","pageIndex","pageSize","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","resetPagination","_table$initialState$p","setPageIndex","maxPageIndex","pageCount","_table$initialState$p2","_table$initialState$p3","resetPageSize","_table$initialState$p4","_table$initialState2","_table$initialState2$","setPageSize","topRowIndex","setPageCount","_table$options$pageCo","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPaginationRowModel","_getPaginationRowModel","_table$options$pageCo2","ceil","rows","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","getCanPin","_d$columnDef$enablePi","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","_table$initialState$r","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","_selection$row$id","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","compareBasic","compareAlphanumeric","aStr","bStr","aa","bb","an","parseInt","bn","combo","sortingFns","alphanumeric","rowA","rowB","alphanumericCaseSensitive","text","textCaseSensitive","datetime","basic","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","_table$options$sortin","_table$options$sortin2","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","sortAction","newSorting","nextDesc","_table$options$maxMul","getCanMultiSort","maxMultiSortColCount","getFirstSortDir","_column$columnDef$sor","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","_table$getState$sorti","columnSort","getSortIndex","_table$getState$sorti2","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","_table$initialState$s","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","cells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","renderValue","getRenderValue","_cell$getValue","renderFallbackValue","rowIndex","parentId","_valuesCache","_uniqueValuesCache","getUniqueValues","getLeafRows","getParentRow","getParentRows","parentRows","currentRow","parentRow","acc","filterRows","filterRowImpl","rowsToFilter","filterRow","_table$options$maxLea","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","filterRowModelFromLeafs","_table$options$maxLea2","filterRowModelFromRoot","expandRows","expandedRows","handleRow","accessor","display","group","_options$initialState","defaultOptions","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","mergeOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","defaultColumn","_defaultColumn","_props$renderValue$to","_props$renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","data","accessRows","originalRows","_row$originalSubRows","getSubRows","originalSubRows","_table$getColumn","facetedRowModel","_facetedRowModel$flat","firstValue","facetedMinMaxValues","j","preRowModel","filterableIds","facetedUniqueValues","_facetedUniqueValues$","has","set","get","resolvedColumnFilters","resolvedGlobalFilters","_filterFn$resolveFilt","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","_globalFilterFn$resol","filterMeta","__global__","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","rowGroupsMap","groupMap","resKey","previous","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","_groupedRows$0$getVal","aggregateFn","pageStart","pageEnd","paginatedRowModel","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","_sortEntry$desc","columnInfo","isDesc","aUndefined","bUndefined","sortInt"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"index.production.js","sources":["../../src/utils.ts","../../src/core/column.ts","../../src/core/headers.ts","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterFns.ts","../../src/features/Filters.ts","../../src/aggregationFns.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortingFns.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/core/table.ts","../../src/core/cell.ts","../../src/core/row.ts","../../src/utils/filterRowsUtils.ts","../../src/utils/getExpandedRowModel.ts","../../src/columnHelper.ts","../../src/utils/getCoreRowModel.ts","../../src/utils/getFacetedMinMaxValues.ts","../../src/utils/getFacetedRowModel.ts","../../src/utils/getFacetedUniqueValues.ts","../../src/utils/getFilteredRowModel.ts","../../src/utils/getGroupedRowModel.ts","../../src/utils/getPaginationRowModel.ts","../../src/utils/getSortedRowModel.ts"],"sourcesContent":["import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function isNumberArray(d: any): d is number[] {\n  return Array.isArray(d) && d.every(val => typeof val === 'number')\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column?.getCanResize()\n\n        return (e: unknown) => {\n          if (!column || !canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const newColumnSizing: ColumnSizingState = {}\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table\n          .getPrePaginationRowModel()\n          .flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(\n    row\n      .getValue<string | null>(columnId)\n      ?.toString()\n      ?.toLowerCase()\n      ?.includes(search)\n  )\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(\n    row.getValue<string | null>(columnId)?.toString()?.includes(filterValue)\n  )\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string | null>(columnId)?.toString()?.toLowerCase() ===\n    filterValue?.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          // @ts-ignore \n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\nimport { isNumberArray } from './utils'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  const values = leafRows.map(row => row.getValue(columnId))\n  if (!isNumberArray(values)) {\n    return\n  }\n  if (values.length === 1) {\n    return values[0]\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = values.sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1]! + nums[mid]!) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n  getGroupingValue?: (row: TData) => any\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  getGroupingValue: (columnId: string) => unknown\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      getGroupingValue: columnId => {\n        if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n          return row._groupingValuesCache[columnId]\n        }\n\n        const column = table.getColumn(columnId)\n\n        if (!column?.columnDef.getGroupingValue) {\n          return row.getValue(columnId)\n        }\n\n        row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(\n          row.original\n        )\n\n        return row._groupingValuesCache[columnId]\n      },\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table\n          .getPaginationRowModel()\n          .flatRows.filter(row => row.getCanSelect())\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows\n              .filter(row => row.getCanSelect())\n              .some(d => d.getIsSelected() || d.getIsSomeSelected())\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Column,\n  ColumnDef,\n  ColumnDefResolved,\n  GroupColumnDef,\n  InitialTableState,\n  Row,\n  RowData,\n  RowModel,\n  Table,\n  TableMeta,\n  TableOptions,\n  TableOptionsResolved,\n  TableState,\n  Updater,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n  features?: TableFeature[]\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = {\n    _features: [...features, ...(options.features || [])],\n  } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: table._features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  parentId?: string\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n  getParentRow: () => Row<TData> | undefined\n  getParentRows: () => Row<TData>[]\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[],\n  parentId?: string\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => (row.parentId ? table.getRow(row.parentId) : undefined),\n    getParentRows: () => {\n      let parentRows: Row<TData>[] = []\n      let currentRow = row\n      while (true) {\n        const parentRow = currentRow.getParentRow()\n        if (!parentRow) break\n        parentRows.push(parentRow)\n        currentRow = parentRow\n      }\n      return parentRows.reverse()\n    },\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        undefined,\n        row.parentId\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows: Row<TData>[] = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth,\n            undefined,\n            row.parentId\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parentRow?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parentRow),\n              originalRows[i]!,\n              i,\n              depth,\n              undefined,\n              parentRow?.id\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return undefined\n\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return new Map()\n\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n","import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            return\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id)\n              }\n\n              return row\n            })\n          }\n\n          const columnId: string = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth,\n                undefined,\n                parentId\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column?.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0)\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if (!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n"],"names":["functionalUpdate","updater","input","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","isNumberArray","Array","isArray","every","val","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","memo","getDeps","fn","opts","result","deps","depTime","debug","Date","now","newDeps","some","dep","index","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createColumn","table","columnDef","depth","parent","_ref","_resolvedColumnDef$id","resolvedColumnDef","_getDefaultColumnDef","accessorKey","accessorFn","id","replace","undefined","header","includes","originalRow","split","_result","Error","column","columns","getFlatColumns","_column$columns","flatMap","_table$options$debugA","options","debugAll","debugColumns","getLeafColumns","_getOrderColumnsFn","orderColumns","_column$columns2","leafColumns","_table$options$debugA2","_features","reduce","obj","feature","Object","assign","createHeader","_options$id","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","recurseHeader","h","map","getContext","Headers","createTable","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","_left$map$filter","_right$map$filter","leftColumns","columnId","find","filter","Boolean","rightColumns","buildHeaderGroups","process","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","_left$map$filter2","_table$options$debugA3","getRightHeaderGroups","_right$map$filter2","_table$options$debugA4","getFooterGroups","headerGroups","reverse","_table$options$debugA5","getLeftFooterGroups","_table$options$debugA6","getCenterFooterGroups","_table$options$debugA7","getRightFooterGroups","_table$options$debugA8","getFlatHeaders","headers","_table$options$debugA9","getLeftFlatHeaders","_table$options$debugA10","getCenterFlatHeaders","_table$options$debugA11","getRightFlatHeaders","_table$options$debugA12","getCenterLeafHeaders","flatHeaders","_header$subHeaders","_table$options$debugA13","getLeftLeafHeaders","_header$subHeaders2","_table$options$debugA14","getRightLeafHeaders","_header$subHeaders3","_table$options$debugA15","center","_left$0$headers","_left$","_center$0$headers","_center$","_right$0$headers","_right$","_table$options$debugA16","columnsToGroup","headerFamily","_headerGroups$0$heade","_headerGroups$","maxDepth","findMaxDepth","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","bottomHeaders","recurseHeadersForSpans","childRowSpans","childColSpan","childRowSpan","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","ColumnSizing","getDefaultColumnDef","getInitialState","state","columnSizing","columnSizingInfo","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getSize","_column$columnDef$min","_column$columnDef$max","columnSize","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","_","rest","getCanResize","_column$columnDef$ena","_table$options$enable","enableResizing","enableColumnResizing","getIsResizing","sum","_header$column$getSiz","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","newColumnSizing","updateOffset","eventType","clientXPos","setColumnSizingInfo","_old$startOffset","_old$startSize","_ref3","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","_e$touches$","passiveIfSupported","passiveEventSupported","passive","addEventListener","resetColumnSizing","defaultState","_table$initialState$c","initialState","resetHeaderSizeInfo","_table$initialState$c2","getTotalSize","_table$getHeaderGroup","_table$getHeaderGroup2","getLeftTotalSize","_table$getLeftHeaderG","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader","_table$getRightHeader2","passiveSupported","supported","noop","window","err","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","_table$options$autoRe","autoResetAll","autoResetExpanded","manualExpanding","_queue","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","_table$initialState$e","_table$initialState","getCanSomeRowsExpand","getPrePaginationRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getRowModel","getIsExpanded","getExpandedDepth","rowsById","splitId","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","_expanded","exists","oldExpanded","rowId","_table$options$getIsR","getIsRowExpanded","_table$options$getRow","_row$subRows","getRowCanExpand","enableExpanding","subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","_row$getValue","_row$getValue$toStrin","_row$getValue$toStrin2","search","toLowerCase","getValue","toString","autoRemove","testFalsey","includesStringSensitive","_row$getValue2","_row$getValue2$toStri","equalsString","_row$getValue3","_row$getValue3$toStri","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","Filters","filterFn","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","maxLeafRowFilterDepth","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","_table$getCoreRowMode2","value","getCoreRowModel","_getAllCellsByColumnId","getAutoFilterFn","firstRow","getFilterFn","_table$options$filter","_table$options$filter2","getCanFilter","_table$options$enable2","enableColumnFilter","enableColumnFilters","enableFilters","getCanGlobalFilter","_column$columnDef$ena2","_table$options$enable3","_table$options$enable4","_table$options$getCol","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum2","_table$getState$colum3","_table$getState$colum4","setFilterValue","setColumnFilters","previousfilter","newFilter","_old$filter","shouldAutoRemoveFilter","newFilterObj","_old$map","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter3","_table$options$filter4","getAllLeafColumns","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","getFilteredRowModel","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","aggregationFns","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","mid","floor","nums","sort","a","b","unique","from","Set","uniqueCount","_columnId","Grouping","aggregatedCell","props","_toString","_props$getValue","aggregationFn","grouping","onGroupingChange","groupedColumnMode","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","_table$getState$group","getGroupedIndex","_table$getState$group2","indexOf","getToggleGroupingHandler","canGroup","getAutoAggregationFn","prototype","call","getAggregationFn","_table$options$aggreg","_table$options$aggreg2","resetGrouping","_table$initialState$g","getPreGroupedRowModel","getGroupedRowModel","_getGroupedRowModel","manualGrouping","groupingColumnId","getGroupingValue","_groupingValuesCache","hasOwnProperty","original","createCell","cell","getIsPlaceholder","getIsAggregated","nonGroupingColumns","col","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","Pagination","pagination","pageIndex","pageSize","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","resetPagination","_table$initialState$p","setPageIndex","maxPageIndex","pageCount","_table$initialState$p2","_table$initialState$p3","resetPageSize","_table$initialState$p4","_table$initialState2","_table$initialState2$","setPageSize","topRowIndex","setPageCount","_table$options$pageCo","newPageCount","getPageOptions","getPageCount","pageOptions","fill","i","debugTable","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPaginationRowModel","_getPaginationRowModel","_table$options$pageCo2","ceil","rows","Pinning","onColumnPinningChange","pin","columnIds","setColumnPinning","_old$left3","_old$right3","_old$left","_old$right","_old$left2","_old$right2","getCanPin","_d$columnDef$enablePi","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","getCenterVisibleCells","_getAllVisibleCells","allCells","leftAndRight","debugRows","getLeftVisibleCells","getRightVisibleCells","resetColumnPinning","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","getLeftLeafColumns","getRightLeafColumns","getCenterLeafColumns","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","_table$initialState$r","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","mutateRowIsSelected","getPreSelectedRowModel","getSelectedRowModel","rowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","_table$getState$rowSe","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","_selection$row$id","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","compareBasic","compareAlphanumeric","aStr","bStr","aa","bb","an","parseInt","bn","combo","sortingFns","alphanumeric","rowA","rowB","alphanumericCaseSensitive","text","textCaseSensitive","datetime","basic","Sorting","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","getAutoSortDir","getSortingFn","_table$options$sortin","_table$options$sortin2","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","existingSorting","existingIndex","sortAction","newSorting","nextDesc","_table$options$maxMul","getCanMultiSort","maxMultiSortColCount","getFirstSortDir","_column$columnDef$sor","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","_table$getState$sorti","columnSort","getSortIndex","_table$getState$sorti2","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","_table$initialState$s","getPreSortedRowModel","_getSortedRowModel","manualSorting","Visibility","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","getAllCells","cells","getVisibleCells","makeVisibleColumnsMethod","getColumns","getVisibleFlatColumns","getAllFlatColumns","getCenterVisibleLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","_value","getIsAllColumnsVisible","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","features","renderValue","getRenderValue","_cell$getValue","renderFallbackValue","rowIndex","parentId","_valuesCache","_uniqueValuesCache","getUniqueValues","getLeafRows","getParentRow","getParentRows","parentRows","currentRow","parentRow","acc","filterRows","filterRowImpl","rowsToFilter","filterRow","_table$options$maxLea","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","newRow","filterRowModelFromLeafs","_table$options$maxLea2","filterRowModelFromRoot","expandRows","expandedRows","handleRow","accessor","display","group","_options$initialState","defaultOptions","_feature$getInitialSt","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","setOptions","newOptions","mergeOptions","onStateChange","_getRowId","getRowId","_getCoreRowModel","defaultColumn","_defaultColumn","_props$renderValue$to","_props$renderValue","_getColumnDefs","columnDefs","recurseColumns","groupingColumnDef","_getAllFlatColumnsById","flatColumns","data","accessRows","originalRows","_row$originalSubRows","getSubRows","originalSubRows","_table$getColumn","facetedRowModel","_facetedRowModel$flat","firstValue","facetedMinMaxValues","j","preRowModel","filterableIds","facetedUniqueValues","_facetedUniqueValues$","has","set","get","resolvedColumnFilters","resolvedGlobalFilters","_filterFn$resolveFilt","globallyFilterableColumns","currentColumnFilter","currentGlobalFilter","_globalFilterFn$resol","filterMeta","__global__","existingGrouping","groupedFlatRows","groupedRowsById","groupUpRecursively","rowGroupsMap","groupMap","resKey","previous","groupBy","aggregatedGroupedRows","entries","groupingValue","groupedRows","_groupedRows$0$getVal","aggregateFn","pageStart","pageEnd","paginatedRowModel","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","_sortEntry$desc","columnInfo","isDesc","aUndefined","bUndefined","sortInt"],"mappings":";;;;;;;;;;iPA2EO,SAASA,EAAoBC,EAAqBC,GACvD,MAA0B,mBAAZD,EACTA,EAA4BC,GAC7BD,CACN,CAMO,SAASE,EACdC,EACAC,GAEA,OAAQJ,IACJI,EAAiBC,UAAuBC,IACjC,IACFA,EACHH,CAACA,GAAMJ,EAAiBC,EAAUM,EAAYH,OAEhD,CAEN,CAIO,SAASI,EAAkCC,GAChD,OAAOA,aAAaC,QACtB,CAEO,SAASC,EAAcF,GAC5B,OAAOG,MAAMC,QAAQJ,IAAMA,EAAEK,OAAMC,GAAsB,iBAARA,GACnD,CAEO,SAASC,EACdC,EACAC,GAEA,MAAMC,EAAgB,GAEhBC,EAAWC,IACfA,EAAOC,SAAQC,IACbJ,EAAKK,KAAKD,GACV,MAAME,EAAWP,EAAYK,GACjB,MAARE,GAAAA,EAAUC,QACZN,EAAQK,EACV,GACA,EAKJ,OAFAL,EAAQH,GAEDE,CACT,CAEO,SAASQ,EACdC,EACAC,EACAC,GAMA,IACIC,EADAC,EAAc,GAGlB,MAAO,KACL,IAAIC,EACAH,EAAK1B,KAAO0B,EAAKI,QAAOD,EAAUE,KAAKC,OAE3C,MAAMC,EAAUT,IAMhB,KAHES,EAAQX,SAAWM,EAAKN,QACxBW,EAAQC,MAAK,CAACC,EAAUC,IAAkBR,EAAKQ,KAAWD,KAG1D,OAAOR,EAKT,IAAIU,EAMJ,GARAT,EAAOK,EAGHP,EAAK1B,KAAO0B,EAAKI,QAAOO,EAAaN,KAAKC,OAE9CL,EAASF,KAAMQ,GACX,MAAJP,GAAc,MAAdA,EAAMY,UAANZ,EAAMY,SAAWX,GAEbD,EAAK1B,KAAO0B,EAAKI,OACfJ,MAAAA,GAAAA,EAAMI,QAAS,CACjB,MAAMS,EAAaC,KAAKC,MAAgC,KAAzBV,KAAKC,MAAQH,IAAmB,IACzDa,EAAgBF,KAAKC,MAAmC,KAA5BV,KAAKC,MAAQK,IAAsB,IAC/DM,EAAsBD,EAAgB,GAEtCE,EAAMA,CAACC,EAAsBC,KAEjC,IADAD,EAAME,OAAOF,GACNA,EAAIvB,OAASwB,GAClBD,EAAM,IAAMA,EAEd,OAAOA,CAAG,EAGZG,QAAQC,KACL,OAAML,EAAIF,EAAe,OAAOE,EAAIL,EAAY,QAChD,2FAGcC,KAAKU,IAChB,EACAV,KAAKW,IAAI,IAAM,IAAMR,EAAqB,sBAE9CjB,MAAAA,OAAAA,EAAAA,EAAM1B,IAEV,CAGF,OAAO2B,CAAM,CAEjB,CC7KO,SAASyB,EACdC,EACAC,EACAC,EACAC,GACuB,IAAAC,EAAAC,EACvB,MAEMC,EAAoB,IAFJN,EAAMO,0BAIvBN,GAGCO,EAAcF,EAAkBE,YAEtC,IAOIC,EAPAC,EAEsDN,OAFpDA,EACgB,OADhBC,EACJC,EAAkBI,IAAEL,EACnBG,EAAcA,EAAYG,QAAQ,IAAK,UAAOC,GAASR,EACnB,iBAA7BE,EAAkBO,OACtBP,EAAkBO,YAClBD,EA6BN,GAzBIN,EAAkBG,WACpBA,EAAaH,EAAkBG,WACtBD,IAGPC,EADED,EAAYM,SAAS,KACTC,IACZ,IAAIzC,EAASyC,EAEb,IAAK,MAAMpE,KAAO6D,EAAYQ,MAAM,KAAM,CAAA,IAAAC,EACxC3C,SAAM2C,EAAG3C,UAAA2C,EAAStE,EAMpB,CAEA,OAAO2B,CAAM,EAGDyC,GACXA,EAAoBT,EAAkBE,eAIxCE,EAQH,MAAM,IAAIQ,MAGZ,IAAIC,EAAiC,CACnCT,GAAK,GAAEhB,OAAOgB,KACdD,aACAN,OAAQA,EACRD,QACAD,UAAWK,EACXc,QAAS,GACTC,eAAgBnD,GACd,IAAM,EAAC,KACP,KAAM,IAAAoD,EACJ,MAAO,CACLH,KACGG,OAAHA,EAAGH,EAAOC,cAAPE,EAAAA,EAAgBC,SAAQvE,GAAKA,EAAEqE,mBACnC,GAEH,CACE1E,IAA8C,wBAC9C8B,MAAOA,KAAA,IAAA+C,EAAA,OAA4BA,OAA5BA,EAAMxB,EAAMyB,QAAQC,UAAQF,EAAIxB,EAAMyB,QAAQE,YAAY,IAGrEC,eAAgB1D,GACd,IAAM,CAAC8B,EAAM6B,wBACbC,IAAgB,IAAAC,EACd,GAAIA,OAAJA,EAAIZ,EAAOC,UAAPW,EAAgB9D,OAAQ,CAC1B,IAAI+D,EAAcb,EAAOC,QAAQG,SAAQJ,GACvCA,EAAOS,mBAGT,OAAOE,EAAaE,EACtB,CAEA,MAAO,CAACb,EAAgC,GAE1C,CACExE,IAA8C,wBAC9C8B,MAAOA,KAAA,IAAAwD,EAAA,OAA4BA,OAA5BA,EAAMjC,EAAMyB,QAAQC,UAAQO,EAAIjC,EAAMyB,QAAQE,YAAY,KAUvE,OALAR,EAASnB,EAAMkC,UAAUC,QAAO,CAACC,EAAKC,IAC7BC,OAAOC,OAAOH,EAAKC,MAAAA,EAAQtC,kBAARsC,EAAAA,EAAQtC,aAAeoB,EAAQnB,KACxDmB,GAGIA,CACT,CCxEA,SAASqB,EACPxC,EACAmB,EACAM,GAOuB,IAAAgB,EAGvB,IAAI5B,EAAoC,CACtCH,GAHmB,OAAb+B,EAAGhB,EAAQf,IAAE+B,EAAItB,EAAOT,GAI9BS,SACApC,MAAO0C,EAAQ1C,MACf2D,gBAAiBjB,EAAQiB,cACzBC,cAAelB,EAAQkB,cACvBzC,MAAOuB,EAAQvB,MACf0C,WAAY,GACZC,QAAS,EACTC,QAAS,EACTC,YAAa,KACbC,eAAgBA,KACd,MAAMC,EAAwC,GAExCC,EAAiBC,IACjBA,EAAEP,YAAcO,EAAEP,WAAW3E,QAC/BkF,EAAEP,WAAWQ,IAAIF,GAEnBD,EAAYlF,KAAKoF,EAA4B,EAK/C,OAFAD,EAAcrC,GAEPoC,CAAW,EAEpBI,WAAYA,KAAO,CACjBrD,QACAa,OAAQA,EACRM,YAQJ,OAJAnB,EAAMkC,UAAUrE,SAAQwE,IACtBC,OAAOC,OAAO1B,EAAQwB,MAAAA,EAAQG,kBAARH,EAAAA,EAAQG,aAAe3B,EAAQb,GAAO,IAGvDa,CACT,CAEO,MAAMyC,EAAwB,CACnCC,YACEvD,IAEO,CAGLwD,gBAAiBtF,GACf,IAAM,CACJ8B,EAAMyD,gBACNzD,EAAM0D,wBACN1D,EAAM2D,WAAWC,cAAcC,KAC/B7D,EAAM2D,WAAWC,cAAcE,SAEjC,CAACC,EAAY/B,EAAa6B,EAAMC,KAAU,IAAAE,EAAAC,EACxC,MAAMC,EAGcF,OAHHA,EACfH,MAAAA,OAAAA,EAAAA,EACIT,KAAIe,GAAYnC,EAAYoC,MAAKpH,GAAKA,EAAE0D,KAAOyD,MAChDE,OAAOC,UAAQN,EAAI,GAElBO,EAGcN,OAHFA,EAChBH,MAAAA,OAAAA,EAAAA,EACIV,KAAIe,GAAYnC,EAAYoC,MAAKpH,GAAKA,EAAE0D,KAAOyD,MAChDE,OAAOC,UAAQL,EAAI,GAYxB,OANqBO,EACnBT,EACA,IAAIG,KANgBlC,EAAYqC,QAChClD,KAAe,MAAJ0C,GAAAA,EAAM/C,SAASK,EAAOT,WAAQoD,GAAAA,EAAOhD,SAASK,EAAOT,UAK1B6D,GACtCvE,EAGiB,GAErB,CACErD,KAAK8H,EACLhG,MAAOA,KAAA,IAAA+C,EAAA,OAA4BA,OAA5BA,EAAMxB,EAAMyB,QAAQC,UAAQF,EAAIxB,EAAMyB,QAAQiD,YAAY,IAIrEC,sBAAuBzG,GACrB,IAAM,CACJ8B,EAAMyD,gBACNzD,EAAM0D,wBACN1D,EAAM2D,WAAWC,cAAcC,KAC/B7D,EAAM2D,WAAWC,cAAcE,SAEjC,CAACC,EAAY/B,EAAa6B,EAAMC,IAIvBU,EAAkBT,EAHzB/B,EAAcA,EAAYqC,QACxBlD,KAAe,MAAJ0C,GAAAA,EAAM/C,SAASK,EAAOT,WAAQoD,GAAAA,EAAOhD,SAASK,EAAOT,OAEhBV,EAAO,WAE3D,CACErD,KACE8H,EACFhG,MAAOA,KAAA,IAAAwD,EAAA,OAA4BA,OAA5BA,EAAMjC,EAAMyB,QAAQC,UAAQO,EAAIjC,EAAMyB,QAAQiD,YAAY,IAIrEE,oBAAqB1G,GACnB,IAAM,CACJ8B,EAAMyD,gBACNzD,EAAM0D,wBACN1D,EAAM2D,WAAWC,cAAcC,QAEjC,CAACE,EAAY/B,EAAa6B,KAAS,IAAAgB,EAMjC,OAAOL,EACLT,EAHkBc,OAHIA,EACtBhB,MAAAA,OAAAA,EAAAA,EACIT,KAAIe,GAAYnC,EAAYoC,MAAKpH,GAAKA,EAAE0D,KAAOyD,MAChDE,OAAOC,UAAQO,EAAI,GAKtB7E,EACA,OACD,GAEH,CACErD,KAAK8H,EACLhG,MAAOA,KAAA,IAAAqG,EAAA,OAA4BA,OAA5BA,EAAM9E,EAAMyB,QAAQC,UAAQoD,EAAI9E,EAAMyB,QAAQiD,YAAY,IAIrEK,qBAAsB7G,GACpB,IAAM,CACJ8B,EAAMyD,gBACNzD,EAAM0D,wBACN1D,EAAM2D,WAAWC,cAAcE,SAEjC,CAACC,EAAY/B,EAAa8B,KAAU,IAAAkB,EAMlC,OAAOR,EACLT,EAHkBiB,OAHIA,EACtBlB,MAAAA,OAAAA,EAAAA,EACIV,KAAIe,GAAYnC,EAAYoC,MAAKpH,GAAKA,EAAE0D,KAAOyD,MAChDE,OAAOC,UAAQU,EAAI,GAKtBhF,EACA,QACD,GAEH,CACErD,KAAK8H,EACLhG,MAAOA,KAAA,IAAAwG,EAAA,OAA4BA,OAA5BA,EAAMjF,EAAMyB,QAAQC,UAAQuD,EAAIjF,EAAMyB,QAAQiD,YAAY,IAMrEQ,gBAAiBhH,GACf,IAAM,CAAC8B,EAAMwD,qBACb2B,GACS,IAAIA,GAAcC,WAE3B,CACEzI,KAAK8H,EACLhG,MAAOA,KAAA,IAAA4G,EAAA,OAA4BA,OAA5BA,EAAMrF,EAAMyB,QAAQC,UAAQ2D,EAAIrF,EAAMyB,QAAQiD,YAAY,IAIrEY,oBAAqBpH,GACnB,IAAM,CAAC8B,EAAM4E,yBACbO,GACS,IAAIA,GAAcC,WAE3B,CACEzI,KAAK8H,EACLhG,MAAOA,KAAA,IAAA8G,EAAA,OAA4BA,OAA5BA,EAAMvF,EAAMyB,QAAQC,UAAQ6D,EAAIvF,EAAMyB,QAAQiD,YAAY,IAIrEc,sBAAuBtH,GACrB,IAAM,CAAC8B,EAAM2E,2BACbQ,GACS,IAAIA,GAAcC,WAE3B,CACEzI,KACE8H,EACFhG,MAAOA,KAAA,IAAAgH,EAAA,OAA4BA,OAA5BA,EAAMzF,EAAMyB,QAAQC,UAAQ+D,EAAIzF,EAAMyB,QAAQiD,YAAY,IAIrEgB,qBAAsBxH,GACpB,IAAM,CAAC8B,EAAM+E,0BACbI,GACS,IAAIA,GAAcC,WAE3B,CACEzI,KAAK8H,EACLhG,MAAOA,KAAA,IAAAkH,EAAA,OAA4BA,OAA5BA,EAAM3F,EAAMyB,QAAQC,UAAQiE,EAAI3F,EAAMyB,QAAQiD,YAAY,IAMrEkB,eAAgB1H,GACd,IAAM,CAAC8B,EAAMwD,qBACb2B,GACSA,EACJ/B,KAAIL,GACIA,EAAY8C,UAEpBnI,QAEL,CACEf,KAAK8H,EACLhG,MAAOA,KAAA,IAAAqH,EAAA,OAA4BA,OAA5BA,EAAM9F,EAAMyB,QAAQC,UAAQoE,EAAI9F,EAAMyB,QAAQiD,YAAY,IAIrEqB,mBAAoB7H,GAClB,IAAM,CAAC8B,EAAM4E,yBACbf,GACSA,EACJT,KAAIL,GACIA,EAAY8C,UAEpBnI,QAEL,CACEf,KAAK8H,EACLhG,MAAOA,KAAA,IAAAuH,EAAA,OAA4BA,OAA5BA,EAAMhG,EAAMyB,QAAQC,UAAQsE,EAAIhG,EAAMyB,QAAQiD,YAAY,IAIrEuB,qBAAsB/H,GACpB,IAAM,CAAC8B,EAAM2E,2BACbd,GACSA,EACJT,KAAIL,GACIA,EAAY8C,UAEpBnI,QAEL,CACEf,KAAK8H,EACLhG,MAAOA,KAAA,IAAAyH,EAAA,OAA4BA,OAA5BA,EAAMlG,EAAMyB,QAAQC,UAAQwE,EAAIlG,EAAMyB,QAAQiD,YAAY,IAIrEyB,oBAAqBjI,GACnB,IAAM,CAAC8B,EAAM+E,0BACblB,GACSA,EACJT,KAAIL,GACIA,EAAY8C,UAEpBnI,QAEL,CACEf,KAAK8H,EACLhG,MAAOA,KAAA,IAAA2H,EAAA,OAA4BA,OAA5BA,EAAMpG,EAAMyB,QAAQC,UAAQ0E,EAAIpG,EAAMyB,QAAQiD,YAAY,IAMrE2B,qBAAsBnI,GACpB,IAAM,CAAC8B,EAAMiG,0BACbK,GACSA,EAAYjC,QAAOxD,IAAM,IAAA0F,EAAA,QAAsB,OAAlBA,EAAC1F,EAAO+B,aAAP2D,EAAmBtI,OAAM,KAEhE,CACEtB,KAAK8H,EACLhG,MAAOA,KAAA,IAAA+H,EAAA,OAA4BA,OAA5BA,EAAMxG,EAAMyB,QAAQC,UAAQ8E,EAAIxG,EAAMyB,QAAQiD,YAAY,IAIrE+B,mBAAoBvI,GAClB,IAAM,CAAC8B,EAAM+F,wBACbO,GACSA,EAAYjC,QAAOxD,IAAM,IAAA6F,EAAA,QAAsB,OAAlBA,EAAC7F,EAAO+B,aAAP8D,EAAmBzI,OAAM,KAEhE,CACEtB,KAAK8H,EACLhG,MAAOA,KAAA,IAAAkI,EAAA,OAA4BA,OAA5BA,EAAM3G,EAAMyB,QAAQC,UAAQiF,EAAI3G,EAAMyB,QAAQiD,YAAY,IAIrEkC,oBAAqB1I,GACnB,IAAM,CAAC8B,EAAMmG,yBACbG,GACSA,EAAYjC,QAAOxD,IAAM,IAAAgG,EAAA,QAAsB,OAAlBA,EAAChG,EAAO+B,aAAPiE,EAAmB5I,OAAM,KAEhE,CACEtB,KAAK8H,EACLhG,MAAOA,KAAA,IAAAqI,EAAA,OAA4BA,OAA5BA,EAAM9G,EAAMyB,QAAQC,UAAQoF,EAAI9G,EAAMyB,QAAQiD,YAAY,IAIrE1B,eAAgB9E,GACd,IAAM,CACJ8B,EAAM4E,sBACN5E,EAAM2E,wBACN3E,EAAM+E,0BAER,CAAClB,EAAMkD,EAAQjD,KAAU,IAAAkD,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACvB,MAAO,IACeL,OAApBA,EAAIC,OAAJA,EAAIpD,EAAK,SAALoD,EAAAA,EAASpB,SAAOmB,EAAI,MACFE,OAAtBA,EAAIC,OAAJA,EAAIJ,EAAO,SAAPI,EAAAA,EAAWtB,SAAOqB,EAAI,MACL,OAArBE,EAAY,OAAZC,EAAIvD,EAAM,SAAE,EAARuD,EAAUxB,SAAOuB,EAAI,IAExBhE,KAAIvC,GACIA,EAAOmC,mBAEftF,MAAM,GAEX,CACEf,KAAK8H,EACLhG,MAAOA,KAAA,IAAA6I,EAAA,OAA4BA,OAA5BA,EAAMtH,EAAMyB,QAAQC,UAAQ4F,EAAItH,EAAMyB,QAAQiD,YAAY,OAOpE,SAASF,EACdT,EACAwD,EACAvH,EACAwH,GACA,IAAAC,EAAAC,EAOA,IAAIC,EAAW,EAEf,MAAMC,EAAe,SAACxG,EAAmClB,QAAK,IAALA,IAAAA,EAAQ,GAC/DyH,EAAWxI,KAAKU,IAAI8H,EAAUzH,GAE9BkB,EACGiD,QAAOlD,GAAUA,EAAO0G,iBACxBhK,SAAQsD,IAAU,IAAAG,EACbA,OAAJA,EAAIH,EAAOC,UAAPE,EAAgBrD,QAClB2J,EAAazG,EAAOC,QAASlB,EAAQ,EACvC,GACC,IAGP0H,EAAa7D,GAEb,IAAIoB,EAAqC,GAEzC,MAAM2C,EAAoBA,CACxBC,EACA7H,KAGA,MAAM6C,EAAkC,CACtC7C,QACAQ,GAAI,CAAC8G,EAAe,GAAEtH,KAASmE,OAAOC,SAAS0D,KAAK,KACpDnC,QAAS,IAILoC,EAAiD,GAGvDF,EAAelK,SAAQqK,IAGrB,MAAMC,EAA4B,IAAIF,GAAsB7C,UAAU,GAItE,IAAIjE,EACAuB,GAAgB,EAWpB,GAdqBwF,EAAc/G,OAAOjB,QAAU6C,EAAY7C,OAK5CgI,EAAc/G,OAAOhB,OAEvCgB,EAAS+G,EAAc/G,OAAOhB,QAG9BgB,EAAS+G,EAAc/G,OACvBuB,GAAgB,GAIhByF,IACyB,MAAzBA,OAAyB,EAAzBA,EAA2BhH,UAAWA,EAGtCgH,EAA0BvF,WAAW7E,KAAKmK,OACrC,CAEL,MAAMrH,EAAS2B,EAAaxC,EAAOmB,EAAQ,CACzCT,GAAI,CAAC8G,EAActH,EAAOiB,EAAOT,GAAiB,MAAbwH,OAAa,EAAbA,EAAexH,IACjD2D,OAAOC,SACP0D,KAAK,KACRtF,gBACAC,cAAeD,EACV,GAAEuF,EAAqB5D,QAAOrH,GAAKA,EAAEmE,SAAWA,IAAQlD,cACzD2C,EACJV,QACAnB,MAAOkJ,EAAqBhK,SAI9B4C,EAAO+B,WAAW7E,KAAKmK,GAGvBD,EAAqBlK,KAAK8C,EAC5B,CAEAkC,EAAY8C,QAAQ9H,KAAKmK,GACzBA,EAAcnF,YAAcA,CAAW,IAGzCoC,EAAapH,KAAKgF,GAEd7C,EAAQ,GACV4H,EAAkBG,EAAsB/H,EAAQ,EAClD,EAGIkI,EAAgBb,EAAenE,KAAI,CAACjC,EAAQpC,IAChDyD,EAAaxC,EAAOmB,EAAQ,CAC1BjB,MAAOyH,EACP5I,YAIJ+I,EAAkBM,EAAeT,EAAW,GAE5CxC,EAAaC,UAMb,MAAMiD,EACJxC,GAEwBA,EAAQxB,QAAOxD,GACrCA,EAAOM,OAAO0G,iBAGOzE,KAAIvC,IACzB,IAAIgC,EAAU,EACVC,EAAU,EACVwF,EAAgB,CAAC,GAEjBzH,EAAO+B,YAAc/B,EAAO+B,WAAW3E,QACzCqK,EAAgB,GAEhBD,EAAuBxH,EAAO+B,YAAY/E,SACxCuC,IAAsD,IAAnDyC,QAAS0F,EAAczF,QAAS0F,GAAcpI,EAC/CyC,GAAW0F,EACXD,EAAcvK,KAAKyK,EAAa,KAIpC3F,EAAU,EASZ,OALAC,GADwB3D,KAAKW,OAAOwI,GAGpCzH,EAAOgC,QAAUA,EACjBhC,EAAOiC,QAAUA,EAEV,CAAED,UAASC,UAAS,IAM/B,OAFAuF,SAAsBZ,EAAgB,OAAhBC,EAACvC,EAAa,SAAE,EAAfuC,EAAiB7B,SAAO4B,EAAI,IAE5CtC,CACT,CCzdO,MAAMsD,EAAsB,CACjCC,KAAM,IACNC,QAAS,GACTC,QAASC,OAAOC,kBAYLC,EAA6B,CACxCC,oBAAqBA,IACZP,EAETQ,gBAAkBC,IACT,CACLC,aAAc,CAAE,EAChBC,iBAhBgE,CACpEC,YAAa,KACbC,UAAW,KACXC,YAAa,KACbC,gBAAiB,KACjBC,kBAAkB,EAClBC,kBAAmB,OAWZR,IAIPS,kBACE3J,IAEO,CACL4J,iBAAkB,QAClBC,qBAAsBnN,EAAiB,eAAgBsD,GACvD8J,yBAA0BpN,EAAiB,mBAAoBsD,KAInED,aAAcA,CACZoB,EACAnB,KAEO,CACL+J,QAASA,KAAM,IAAAC,EAAA5J,EAAA6J,EACb,MAAMC,EAAalK,EAAM2D,WAAWwF,aAAahI,EAAOT,IAExD,OAAOvB,KAAKW,IACVX,KAAKU,IACqBmK,OADlBA,EACN7I,EAAOlB,UAAU0I,SAAOqB,EAAIvB,EAAoBE,QACb,OADoBvI,EACvD8J,MAAAA,EAAAA,EAAc/I,EAAOlB,UAAUyI,MAAItI,EAAIqI,EAAoBC,MAErCuB,OADvBA,EACD9I,EAAOlB,UAAU2I,SAAOqB,EAAIxB,EAAoBG,QACjD,EAEHuB,SAAUC,IACR,MAAMhJ,EAAWgJ,EAEA,SAAbA,EACApK,EAAMqK,4BACNrK,EAAMsK,6BAHNtK,EAAM0D,wBAKJ3E,EAAQqC,EAAQmJ,WAAUvN,GAAKA,EAAE0D,KAAOS,EAAOT,KAErD,GAAI3B,EAAQ,EAAG,CACb,MAAMyL,EAAoBpJ,EAAQrC,EAAQ,GAE1C,OACEyL,EAAkBL,SAASC,GAAYI,EAAkBT,SAE7D,CAEA,OAAO,CAAC,EAEVU,UAAWA,KACTzK,EAAM0K,iBAAgBC,IAAiC,IAA9B,CAACxJ,EAAOT,IAAKkK,KAAMC,GAAMF,EAChD,OAAOE,CAAI,GACX,EAEJC,aAAcA,KAAM,IAAAC,EAAAC,EAClB,OACkCD,OAAhCA,EAAC5J,EAAOlB,UAAUgL,iBAAcF,KACGC,OADKA,EACvChL,EAAMyB,QAAQyJ,uBAAoBF,EAAS,EAGhDG,cAAeA,IACNnL,EAAM2D,WAAWyF,iBAAiBK,mBAAqBtI,EAAOT,KAK3E8B,aAAcA,CACZ3B,EACAb,KAEO,CACL+J,QAASA,KACP,IAAIqB,EAAM,EAEV,MAAMzN,EAAWkD,IAGR,IAAAwK,EAFHxK,EAAO+B,WAAW3E,OACpB4C,EAAO+B,WAAW/E,QAAQF,GAE1ByN,GAA8BC,OAA3BA,EAAIxK,EAAOM,OAAO4I,WAASsB,EAAI,CACpC,EAKF,OAFA1N,EAAQkD,GAEDuK,CAAG,EAEZjB,SAAUA,KACR,GAAItJ,EAAO9B,MAAQ,EAAG,CACpB,MAAMuM,EACJzK,EAAOkC,YAAY8C,QAAQhF,EAAO9B,MAAQ,GAC5C,OAAOuM,EAAkBnB,WAAamB,EAAkBvB,SAC1D,CAEA,OAAO,CAAC,EAEVwB,iBAAkBA,KAChB,MAAMpK,EAASnB,EAAMwL,UAAU3K,EAAOM,OAAOT,IACvC+K,EAAkB,MAANtK,OAAM,EAANA,EAAQ2J,eAE1B,OAAQY,IACN,IAAKvK,IAAWsK,EACd,OAKF,GAFmB,MAAjBC,EAAUC,SAAVD,EAAUC,UAERC,EAAkBF,IAEhBA,EAAEG,SAAWH,EAAEG,QAAQ5N,OAAS,EAClC,OAIJ,MAAMqL,EAAYzI,EAAOkJ,UAEnBL,EAAwC7I,EAC1CA,EACGmC,iBACAI,KAAIpG,GAAK,CAACA,EAAEmE,OAAOT,GAAI1D,EAAEmE,OAAO4I,aACnC,CAAC,CAAC5I,EAAOT,GAAIS,EAAO4I,YAElB+B,EAAUF,EAAkBF,GAC9BvM,KAAKC,MAAMsM,EAAEG,QAAQ,GAAIC,SACxBJ,EAAiBI,QAEhBC,EAAqC,CAAA,EAErCC,EAAeA,CACnBC,EACAC,KAE0B,iBAAfA,IAIXlM,EAAMmM,qBAAoBrP,IAAO,IAAAsP,EAAAC,EAC/B,MAAM9C,EAAc2C,GAA8B,OAApBE,EAAItP,MAAAA,OAAAA,EAAAA,EAAKuM,aAAW+C,EAAI,GAChD5C,EAAkBrK,KAAKU,IAC3B0J,GAA6B,OAAlB8C,QAAIvP,SAAAA,EAAKwM,WAAS+C,EAAI,IAChC,SAUH,OAPAvP,EAAI4M,kBAAkB7L,SAAQyO,IAA4B,IAA1BnI,EAAUoI,GAAWD,EACnDP,EAAgB5H,GACdhF,KAAKC,MACsD,IAAzDD,KAAKU,IAAI0M,EAAaA,EAAa/C,EAAiB,IAClD,GAAG,IAGJ,IACF1M,EACHyM,cACAC,kBACD,IAIkC,aAAnCxJ,EAAMyB,QAAQmI,kBACA,QAAdqC,GAEAjM,EAAM0K,iBAAgB5N,IAAQ,IACzBA,KACAiP,MAEP,EAGIS,EAAUN,GACdF,EAAa,OAAQE,GAEjBO,EAASP,IACbF,EAAa,MAAOE,GAEpBlM,EAAMmM,qBAAoBrP,IAAQ,IAC7BA,EACH2M,kBAAkB,EAClBJ,YAAa,KACbC,UAAW,KACXC,YAAa,KACbC,gBAAiB,KACjBE,kBAAmB,MAClB,EAGCgD,EAAc,CAClBC,YAAcjB,GAAkBc,EAAOd,EAAEI,SACzCc,UAAYlB,IACVmB,SAASC,oBAAoB,YAAaJ,EAAYC,aACtDE,SAASC,oBAAoB,UAAWJ,EAAYE,WACpDH,EAAMf,EAAEI,QAAQ,GAIdiB,EAAc,CAClBJ,YAAcjB,IACRA,EAAEsB,aACJtB,EAAEuB,iBACFvB,EAAEwB,mBAEJV,EAAOd,EAAEG,QAAQ,GAAIC,UACd,GAETc,UAAYlB,IAAkB,IAAAyB,EAC5BN,SAASC,oBAAoB,YAAaC,EAAYJ,aACtDE,SAASC,oBAAoB,WAAYC,EAAYH,WACjDlB,EAAEsB,aACJtB,EAAEuB,iBACFvB,EAAEwB,mBAEJT,EAAkB,OAAbU,EAACzB,EAAEG,QAAQ,SAAE,EAAZsB,EAAcrB,QAAQ,GAI1BsB,IAAqBC,KACvB,CAAEC,SAAS,GAGX1B,EAAkBF,IACpBmB,SAASU,iBACP,YACAR,EAAYJ,YACZS,GAEFP,SAASU,iBACP,WACAR,EAAYH,UACZQ,KAGFP,SAASU,iBACP,YACAb,EAAYC,YACZS,GAEFP,SAASU,iBACP,UACAb,EAAYE,UACZQ,IAIJpN,EAAMmM,qBAAoBrP,IAAQ,IAC7BA,EACHuM,YAAayC,EACbxC,YACAC,YAAa,EACbC,gBAAiB,EACjBE,oBACAD,iBAAkBtI,EAAOT,MACxB,CACJ,IAKP6C,YACEvD,IAEO,CACL0K,gBAAiBlO,GAAWwD,MAAAA,EAAMyB,QAAQoI,0BAAd7J,EAAAA,EAAMyB,QAAQoI,qBAAuBrN,GACjE2P,oBAAqB3P,GACnBwD,MAAAA,EAAMyB,QAAQqI,8BAAd9J,EAAAA,EAAMyB,QAAQqI,yBAA2BtN,GAC3CgR,kBAAmBC,IAAgB,IAAAC,EACjC1N,EAAM0K,gBACJ+C,EAAe,CAAA,EAAoC,OAAlCC,EAAG1N,EAAM2N,aAAaxE,cAAYuE,EAAI,CACzD,EAAC,EAEHE,oBAAqBH,IAAgB,IAAAI,EACnC7N,EAAMmM,oBACJsB,EA9R4D,CACpEpE,YAAa,KACbC,UAAW,KACXC,YAAa,KACbC,gBAAiB,KACjBC,kBAAkB,EAClBC,kBAAmB,IA0R4B,OADFmE,EACjC7N,EAAM2N,aAAavE,kBAAgByE,EAhSqB,CACpExE,YAAa,KACbC,UAAW,KACXC,YAAa,KACbC,gBAAiB,KACjBC,kBAAkB,EAClBC,kBAAmB,IA4RZ,EAEHoE,aAAcA,KAAA,IAAAC,EAAAC,EAAA,OAGPD,OAHOA,EACZC,OADYA,EACZhO,EAAMwD,kBAAkB,SAAxBwK,EAAAA,EAA4BnI,QAAQ1D,QAAO,CAACiJ,EAAKvK,IACxCuK,EAAMvK,EAAOkJ,WACnB,IAAEgE,EAAI,CAAC,EACZE,iBAAkBA,KAAA,IAAAC,EAAAC,EAAA,OAGXD,OAHWA,EAChBC,OADgBA,EAChBnO,EAAM4E,sBAAsB,SAA5BuJ,EAAAA,EAAgCtI,QAAQ1D,QAAO,CAACiJ,EAAKvK,IAC5CuK,EAAMvK,EAAOkJ,WACnB,IAAEmE,EAAI,CAAC,EACZE,mBAAoBA,KAAA,IAAAC,EAAAC,EAAA,OAGbD,OAHaA,EAClBC,OADkBA,EAClBtO,EAAM2E,wBAAwB,SAA9B2J,EAAAA,EAAkCzI,QAAQ1D,QAAO,CAACiJ,EAAKvK,IAC9CuK,EAAMvK,EAAOkJ,WACnB,IAAEsE,EAAI,CAAC,EACZE,kBAAmBA,KAAA,IAAAC,EAAAC,EAAA,OAGZD,OAHYA,EACjBC,OADiBA,EACjBzO,EAAM+E,uBAAuB,SAA7B0J,EAAAA,EAAiC5I,QAAQ1D,QAAO,CAACiJ,EAAKvK,IAC7CuK,EAAMvK,EAAOkJ,WACnB,IAAEyE,EAAI,CAAC,KAKlB,IAAIE,EAAmC,KAChC,SAASrB,IACd,GAAgC,kBAArBqB,EAAgC,OAAOA,EAElD,IAAIC,GAAY,EAChB,IACE,MAAMlN,EAAU,CACV6L,cAEF,OADAqB,GAAY,GACL,CACT,GAGIC,EAAOA,OAEbC,OAAOtB,iBAAiB,OAAQqB,EAAMnN,GACtCoN,OAAO/B,oBAAoB,OAAQ8B,EACpC,CAAC,MAAOE,GACPH,GAAY,CACd,CAEA,OADAD,EAAmBC,EACZD,CACT,CAEA,SAAS9C,EAAkBF,GACzB,MAAkC,eAA1BA,EAAiBqD,IAC3B,CClXO,MAAMC,EAA0B,CACrC/F,gBAAkBC,IACT,CACL+F,SAAU,CAAE,KACT/F,IAIPS,kBACE3J,IAEO,CACLkP,iBAAkBxS,EAAiB,WAAYsD,GAC/CmP,sBAAsB,IAI1B5L,YACEvD,IAEA,IAAIoP,GAAa,EACbC,GAAS,EAEb,MAAO,CACLC,mBAAoBA,KAAM,IAAAlP,EAAAmP,EACxB,GAAKH,GAOL,GAEiC,OAFjChP,EAC4BmP,OAD5BA,EACEvP,EAAMyB,QAAQ+N,cAAYD,EAC1BvP,EAAMyB,QAAQgO,mBAAiBrP,GAC9BJ,EAAMyB,QAAQiO,gBACf,CACA,GAAIL,EAAQ,OACZA,GAAS,EACTrP,EAAM2P,QAAO,KACX3P,EAAM4P,gBACNP,GAAS,CAAK,GAElB,OAjBErP,EAAM2P,QAAO,KACXP,GAAa,CAAI,GAgBrB,EAEFS,YAAarT,GAAWwD,MAAAA,EAAMyB,QAAQyN,sBAAdlP,EAAAA,EAAMyB,QAAQyN,iBAAmB1S,GACzDsT,sBAAuBb,KACjBA,MAAAA,EAAAA,GAAajP,EAAM+P,wBACrB/P,EAAM6P,aAAY,GAElB7P,EAAM6P,YAAY,CAAA,EACpB,EAEFD,cAAenC,IAAgB,IAAAuC,EAAAC,EAC7BjQ,EAAM6P,YACJpC,EAAe,CAAA,SAAEuC,EAAGC,OAAHA,EAAGjQ,EAAM2N,mBAANsC,EAAAA,EAAoBhB,UAAQe,EAAI,CAAA,EACrD,EAEHE,qBAAsBA,IACblQ,EACJmQ,2BACAC,SAASvR,MAAKwR,GAAOA,EAAIC,iBAE9BC,gCAAiCA,IACvB7E,IACa,MAAjBA,EAAUC,SAAVD,EAAUC,UACZ3L,EAAM8P,uBAAuB,EAGjCU,sBAAuBA,KACrB,MAAMvB,EAAWjP,EAAM2D,WAAWsL,SAClC,OAAoB,IAAbA,GAAqB3M,OAAOmO,OAAOxB,GAAUpQ,KAAKyF,QAAQ,EAEnEyL,qBAAsBA,KACpB,MAAMd,EAAWjP,EAAM2D,WAAWsL,SAGlC,MAAwB,kBAAbA,GACW,IAAbA,IAGJ3M,OAAOoO,KAAKzB,GAAUhR,SAKvB+B,EAAM2Q,cAAcP,SAASvR,MAAKwR,IAAQA,EAAIO,iBAKvC,EAEbC,iBAAkBA,KAChB,IAAIlJ,EAAW,EAYf,QATgC,IAA9B3H,EAAM2D,WAAWsL,SACb3M,OAAOoO,KAAK1Q,EAAM2Q,cAAcG,UAChCxO,OAAOoO,KAAK1Q,EAAM2D,WAAWsL,WAE5BpR,SAAQ6C,IACb,MAAMqQ,EAAUrQ,EAAGM,MAAM,KACzB2G,EAAWxI,KAAKU,IAAI8H,EAAUoJ,EAAQ9S,OAAO,IAGxC0J,CAAQ,EAEjBqJ,uBAAwBA,IAAMhR,EAAMiR,oBACpCC,oBAAqBA,MACdlR,EAAMmR,sBAAwBnR,EAAMyB,QAAQyP,sBAC/ClR,EAAMmR,qBAAuBnR,EAAMyB,QAAQyP,oBAAoBlR,IAG7DA,EAAMyB,QAAQiO,kBAAoB1P,EAAMmR,qBACnCnR,EAAMgR,yBAGRhR,EAAMmR,wBAEhB,EAGHC,UAAWA,CACTf,EACArQ,KAEO,CACLqR,eAAgBpC,IACdjP,EAAM6P,aAAY/S,IAAO,IAAAwU,EACvB,MAAMC,GAAiB,IAARzU,KAAwBA,MAAAA,IAAAA,EAAMuT,EAAI3P,KAEjD,IAAI8Q,EAAiC,CAAA,EAYrC,IAVY,IAAR1U,EACFwF,OAAOoO,KAAK1Q,EAAM2Q,cAAcG,UAAUjT,SAAQ4T,IAChDD,EAAYC,IAAS,CAAI,IAG3BD,EAAc1U,EAGhBmS,SAAQqC,EAAGrC,GAAQqC,GAAKC,GAEnBA,GAAUtC,EACb,MAAO,IACFuC,EACH,CAACnB,EAAI3P,KAAK,GAId,GAAI6Q,IAAWtC,EAAU,CACvB,MAAQ,CAACoB,EAAI3P,IAAKkK,KAAMC,GAAS2G,EACjC,OAAO3G,CACT,CAEA,OAAO/N,CAAG,GACV,EAEJ8T,cAAeA,KAAM,IAAAc,EACnB,MAAMzC,EAAWjP,EAAM2D,WAAWsL,SAElC,SACuCyC,OAD/BA,EACN1R,MAAAA,EAAMyB,QAAQkQ,sBAAd3R,EAAAA,EAAMyB,QAAQkQ,iBAAmBtB,IAAIqB,GACvB,IAAbzC,IAA6B,MAARA,OAAQ,EAARA,EAAWoB,EAAI3P,KACtC,EAEH4P,aAAcA,KAAM,IAAAsB,EAAA5G,EAAA6G,EAClB,OACsCD,OADtCA,EACE5R,MAAAA,EAAMyB,QAAQqQ,qBAAd9R,EAAAA,EAAMyB,QAAQqQ,gBAAkBzB,IAAIuB,GACL5G,OAA9BA,EAAChL,EAAMyB,QAAQsQ,kBAAe/G,MAAe6G,OAADA,EAACxB,EAAI2B,WAAJH,EAAa5T,OAAM,EAGrEgU,yBAA0BA,KACxB,MAAMC,EAAY7B,EAAIC,eAEtB,MAAO,KACA4B,GACL7B,EAAIgB,gBAAgB,CACrB,KC/NHc,EAAgCA,CACpC9B,EACAlM,EACAiO,KACG,IAAAC,EAAAC,EAAAC,EACH,MAAMC,EAASJ,EAAYK,cAC3B,OAAOnO,QAE+B,OAFxB+N,EACZhC,EACGqC,SAAwBvO,KACboO,OADsBD,EADpCD,EAEIM,aACa,OADHJ,EAFdD,EAGIG,oBAFgC,EADpCF,EAIIzR,SAAS0R,GACd,EAGHL,EAAeS,WAActV,GAAauV,EAAWvV,GAErD,MAAMwV,EAAyCA,CAC7CzC,EACAlM,EACAiO,KACG,IAAAW,EAAAC,EACH,OAAO1O,QACgC0O,OADzBD,EACZ1C,EAAIqC,SAAwBvO,KAAqB,OAAZ6O,EAArCD,EAAuCJ,iBAAFK,EAArCA,EAAmDlS,SAASsR,GAC7D,EAGHU,EAAwBF,WAActV,GAAauV,EAAWvV,GAE9D,MAAM2V,EAA8BA,CAClC5C,EACAlM,EACAiO,KACG,IAAAc,EAAAC,EACH,OACuC,OAArCD,EAAA7C,EAAIqC,SAAwBvO,KAA5BgP,OAAqCA,EAArCD,EAAuCP,iBAAF,EAArCQ,EAAmDV,kBACnDL,MAAAA,OAAAA,EAAAA,EAAaK,cAAa,EAI9BQ,EAAaL,WAActV,GAAauV,EAAWvV,GAEnD,MAAM8V,EAA6BA,CACjC/C,EACAlM,EACAiO,KACG,IAAAiB,EACH,OAAwC,OAAxCA,EAAOhD,EAAIqC,SAAoBvO,SAAS,EAAjCkP,EAAmCvS,SAASsR,EAAY,EAGjEgB,EAAYR,WAActV,GAAauV,EAAWvV,MAASA,MAAAA,GAAAA,EAAKW,QAEhE,MAAMqV,EAAgCA,CACpCjD,EACAlM,EACAiO,KAEQA,EAAYvT,MAClBvB,IAAG,IAAAiW,EAAA,eAAIA,EAAClD,EAAIqC,SAAoBvO,KAAxBoP,EAAmCzS,SAASxD,GAAI,IAI5DgW,EAAeV,WAActV,GAAauV,EAAWvV,MAASA,MAAAA,GAAAA,EAAKW,QAEnE,MAAMuV,EAAiCA,CACrCnD,EACAlM,EACAiO,IAEOA,EAAYvT,MAAKvB,IAAG,IAAAmW,EAAA,OACQ,OADRA,EACzBpD,EAAIqC,SAAoBvO,SAAS,EAAjCsP,EAAmC3S,SAASxD,EAAI,IAIpDkW,EAAgBZ,WAActV,GAAauV,EAAWvV,MAASA,MAAAA,GAAAA,EAAKW,QAEpE,MAAMyV,EAAwBA,CAACrD,EAAKlM,EAAkBiO,IAC7C/B,EAAIqC,SAASvO,KAAciO,EAGpCsB,EAAOd,WAActV,GAAauV,EAAWvV,GAE7C,MAAMqW,EAA4BA,CAChCtD,EACAlM,EACAiO,IAEO/B,EAAIqC,SAASvO,IAAaiO,EAGnCuB,EAAWf,WAActV,GAAauV,EAAWvV,GAEjD,MAAMsW,EAA+BA,CACnCvD,EACAlM,EACAiO,KAEA,IAAKtS,EAAKD,GAAOuS,EAEjB,MAAMyB,EAAWxD,EAAIqC,SAAiBvO,GACtC,OAAO0P,GAAY/T,GAAO+T,GAAYhU,CAAG,EAG3C+T,EAAcE,mBAAsBxW,IAClC,IAAKyW,EAAWC,GAAa1W,EAEzB2W,EACmB,iBAAdF,EAAyBG,WAAWH,GAAuBA,EAChEI,EACmB,iBAAdH,EAAyBE,WAAWF,GAAuBA,EAEhElU,EACY,OAAdiU,GAAsBlL,OAAOuL,MAAMH,IAAcI,IAAWJ,EAC1DpU,EAAoB,OAAdmU,GAAsBnL,OAAOuL,MAAMD,GAAaE,IAAWF,EAErE,GAAIrU,EAAMD,EAAK,CACb,MAAMyU,EAAOxU,EACbA,EAAMD,EACNA,EAAMyU,CACR,CAEA,MAAO,CAACxU,EAAKD,EAAI,EAGnB+T,EAAchB,WAActV,GAC1BuV,EAAWvV,IAASuV,EAAWvV,EAAI,KAAOuV,EAAWvV,EAAI,IAIpD,MAAMiX,EAAY,CACvBpC,iBACAW,0BACAG,eACAG,cACAE,iBACAE,kBACAE,SACAC,aACAC,iBAOF,SAASf,EAAWvV,GAClB,OAAOA,SAA6C,KAARA,CAC9C,CCcO,MAAMkX,EAAwB,CACnCxL,oBAAqBA,KACZ,CACLyL,SAAU,SAIdxL,gBAAkBC,IACT,CACLwL,cAAe,GACfC,kBAAc/T,KAGXsI,IAIPS,kBACE3J,IAEO,CACL4U,sBAAuBlY,EAAiB,gBAAiBsD,GACzD6U,qBAAsBnY,EAAiB,eAAgBsD,GACvD8U,oBAAoB,EACpBC,sBAAuB,IACvBC,eAAgB,OAChBC,yBAA0B9T,IAAU,IAAA+T,EAAAC,EAClC,MAAMC,EAEQD,OAFHD,EAAGlV,EACXqV,kBACAjF,SAAS,KAFE+E,OAEAA,EAFAD,EAEEI,yBACbnU,EAAOT,UADIyU,EAFAA,EAGCzC,WAEf,MAAwB,iBAAV0C,GAAuC,iBAAVA,CAAkB,IAKnErV,aAAcA,CACZoB,EACAnB,KAEO,CACLuV,gBAAiBA,KACf,MAAMC,EAAWxV,EAAMqV,kBAAkBjF,SAAS,GAE5CgF,EAAQI,MAAAA,OAAAA,EAAAA,EAAU9C,SAASvR,EAAOT,IAExC,MAAqB,iBAAV0U,EACFb,EAAUpC,eAGE,iBAAViD,EACFb,EAAUX,cAGE,kBAAVwB,GAIG,OAAVA,GAAmC,iBAAVA,EAHpBb,EAAUb,OAOfvW,MAAMC,QAAQgY,GACTb,EAAUnB,YAGZmB,EAAUZ,UAAU,EAE7B8B,YAAaA,KAAM,IAAAC,EAAAC,EACjB,OAAO5Y,EAAWoE,EAAOlB,UAAUwU,UAC/BtT,EAAOlB,UAAUwU,SACa,SAA9BtT,EAAOlB,UAAUwU,SACjBtT,EAAOoU,kBAEuDG,OADhEA,EACyB,OADzBC,EACE3V,EAAMyB,QAAQ8S,gBAAS,EAAvBoB,EAA0BxU,EAAOlB,UAAUwU,WAAmBiB,EAC9DnB,EAAUpT,EAAOlB,UAAUwU,SAA4B,EAE7DmB,aAAcA,KAAM,IAAA7K,EAAAC,EAAA6K,EAClB,OACsC,OAApC9K,EAAC5J,EAAOlB,UAAU6V,qBAAkB/K,KACF,OADUC,EAC3ChL,EAAMyB,QAAQsU,sBAAmB/K,YAAS6K,EAC1C7V,EAAMyB,QAAQuU,gBAAaH,MAC1B1U,EAAOV,UAAU,EAIvBwV,mBAAoBA,KAAM,IAAAC,EAAAC,EAAAC,EAAAC,EACxB,OACsCH,OAApCA,EAAC/U,EAAOlB,UAAUqW,qBAAkBJ,KACH,OADWC,EAC3CnW,EAAMyB,QAAQ6U,qBAAkBH,KACL,OADcC,EACzCpW,EAAMyB,QAAQuU,gBAAaI,YAASC,QACpCrW,EAAMyB,QAAQwT,gCAAdjV,EAAMyB,QAAQwT,yBAA2B9T,KAAOkV,MAC/ClV,EAAOV,UAAU,EAIvB8V,cAAeA,IAAMpV,EAAOqV,kBAAoB,EAEhDC,eAAgBA,KAAA,IAAAC,EAAAC,EAAA,OACgB,OADhBD,EACd1W,EAAM2D,WAAW+Q,gBAAjBiC,OAA8BA,EAA9BD,EAAgCtS,MAAKpH,GAAKA,EAAE0D,KAAOS,EAAOT,WAA5B,EAA9BiW,EAA+DvB,KAAK,EAEtEoB,eAAgBA,KAAA,IAAAI,EAAAC,EAAA,OACoD,OADpDD,EACgB,OADhBC,EACd7W,EAAM2D,WAAW+Q,oBAAa,EAA9BmC,EAAgCtM,WAAUvN,GAAKA,EAAE0D,KAAOS,EAAOT,MAAGkW,GACjE,CAAC,EAEJE,eAAgB1B,IACdpV,EAAM+W,kBAAiBja,IACrB,MAAM2X,EAAWtT,EAAOsU,cAClBuB,EAAiBla,MAAAA,OAAAA,EAAAA,EAAKsH,MAAKpH,GAAKA,EAAE0D,KAAOS,EAAOT,KAEhDuW,EAAY1a,EAChB6Y,EACA4B,EAAiBA,EAAe5B,WAAQxU,GAUxC,IAAAsW,EANF,GACEC,EACE1C,EACAwC,EACA9V,GAGF,OAA2C,OAA3C+V,EAAU,MAAHpa,OAAG,EAAHA,EAAKuH,QAAOrH,GAAKA,EAAE0D,KAAOS,EAAOT,MAAGwW,EAAI,GAGjD,MAAME,EAAe,CAAE1W,GAAIS,EAAOT,GAAI0U,MAAO6B,GAEzB,IAAAI,EAApB,OAAIL,EAOE,OANJK,EACK,MAAHva,OAAG,EAAHA,EAAKsG,KAAIpG,GACHA,EAAE0D,KAAOS,EAAOT,GACX0W,EAEFpa,KACPqa,EAAI,GAIH,MAAHva,GAAAA,EAAKmB,OACA,IAAInB,EAAKsa,GAGX,CAACA,EAAa,GACrB,EAEJE,oBACEtX,EAAMyB,QAAQ8V,oBACdvX,EAAMyB,QAAQ8V,mBAAmBvX,EAAOmB,EAAOT,IACjD6W,mBAAoBA,IACbpW,EAAOmW,oBAILnW,EAAOmW,sBAHLtX,EAAMwX,yBAKjBC,wBACEzX,EAAMyB,QAAQiW,wBACd1X,EAAMyB,QAAQiW,uBAAuB1X,EAAOmB,EAAOT,IACrDgX,uBAAwBA,IACjBvW,EAAOsW,wBAILtW,EAAOsW,0BAHL,IAAIE,IAKfC,wBACE5X,EAAMyB,QAAQoW,wBACd7X,EAAMyB,QAAQoW,uBAAuB7X,EAAOmB,EAAOT,IACrDmX,uBAAwBA,KACtB,GAAK1W,EAAOyW,wBAIZ,OAAOzW,EAAOyW,yBAAyB,IAO7CxG,UAAWA,CACTf,EACArQ,KAEO,CACL0U,cAAe,CAAE,EACjBoD,kBAAmB,CAAC,IAIxBvU,YACEvD,IAEO,CACL+X,sBAAuBA,IACdxD,EAAUpC,eAGnB6F,kBAAmBA,KAAM,IAAAC,EAAAC,EACvB,MAAQlD,eAAgBA,GAAmBhV,EAAMyB,QAEjD,OAAO1E,EAAWiY,GACdA,EACmB,SAAnBA,EACAhV,EAAM+X,wBAE6CE,OADrDA,EACyB,OADzBC,EACElY,EAAMyB,QAAQ8S,gBAAS,EAAvB2D,EAA0BlD,IAAyBiD,EACnD1D,EAAUS,EAAkC,EAGlD+B,iBAAmBva,IACjB,MAAMwF,EAAchC,EAAMmY,oBAkB1BnY,MAAAA,EAAMyB,QAAQmT,uBAAd5U,EAAMyB,QAAQmT,uBAhBI9X,IAA4B,IAAAsb,EAC5C,OAAqC,OAArCA,EAAO7b,EAAiBC,EAASM,SAAI,EAA9Bsb,EAAgC/T,QAAOA,IAC5C,MAAMlD,EAASa,EAAYoC,MAAKpH,GAAKA,EAAE0D,KAAO2D,EAAO3D,KAErD,GAAIS,EAAQ,CAGV,GAAIgW,EAFahW,EAAOsU,cAEapR,EAAO+Q,MAAOjU,GACjD,OAAO,CAEX,CAEA,OAAO,CAAI,GACX,GAG2C,EAGjDkX,gBAAiB7b,IACfwD,MAAAA,EAAMyB,QAAQoT,sBAAd7U,EAAMyB,QAAQoT,qBAAuBrY,EAAQ,EAG/C8b,kBAAmB7K,IACjBzN,EAAMqY,gBACJ5K,OAAe7M,EAAYZ,EAAM2N,aAAagH,aAC/C,EAGH4D,mBAAoB9K,IAAgB,IAAAC,EAAAuC,EAClCjQ,EAAM+W,iBACJtJ,EAAe,GAAsCC,OAApCA,SAAAuC,EAAGjQ,EAAM2N,qBAANsC,EAAoByE,eAAahH,EAAI,GAC1D,EAGH8J,uBAAwBA,IAAMxX,EAAMqV,kBACpCmD,oBAAqBA,MACdxY,EAAMyY,sBAAwBzY,EAAMyB,QAAQ+W,sBAC/CxY,EAAMyY,qBAAuBzY,EAAMyB,QAAQ+W,oBAAoBxY,IAG7DA,EAAMyB,QAAQiX,kBAAoB1Y,EAAMyY,qBACnCzY,EAAMwX,yBAGRxX,EAAMyY,wBAGfE,0BACE3Y,EAAMyB,QAAQ8V,oBACdvX,EAAMyB,QAAQ8V,mBAAmBvX,EAAO,cAE1C4Y,yBAA0BA,IACpB5Y,EAAMyB,QAAQiX,kBAAoB1Y,EAAM2Y,0BACnC3Y,EAAMwX,yBAGRxX,EAAM2Y,4BAGfE,8BACE7Y,EAAMyB,QAAQiW,wBACd1X,EAAMyB,QAAQiW,uBAAuB1X,EAAO,cAC9C8Y,6BAA8BA,IACvB9Y,EAAM6Y,8BAIJ7Y,EAAM6Y,gCAHJ,IAAIlB,IAMfoB,8BACE/Y,EAAMyB,QAAQoW,wBACd7X,EAAMyB,QAAQoW,uBAAuB7X,EAAO,cAC9CgZ,6BAA8BA,KAC5B,GAAKhZ,EAAM+Y,8BAIX,OAAO/Y,EAAM+Y,+BAA+B,KAM7C,SAAS5B,EACd1C,EACAW,EACAjU,GAEA,SACGsT,IAAYA,EAAS7B,aAClB6B,EAAS7B,WAAWwC,EAAOjU,SAEd,IAAViU,GACW,iBAAVA,IAAuBA,CAEnC,CCxdA,MA2Ga6D,EAAiB,CAC5B7N,IA5G8BA,CAACjH,EAAU+U,EAAWC,IAG7CA,EAAUhX,QAAO,CAACiJ,EAAKgO,KAC5B,MAAMC,EAAYD,EAAK1G,SAASvO,GAChC,OAAOiH,GAA4B,iBAAdiO,EAAyBA,EAAY,EAAE,GAC3D,GAuGHvZ,IApG8BA,CAACqE,EAAU+U,EAAWC,KACpD,IAAIrZ,EAaJ,OAXAqZ,EAAUtb,SAAQwS,IAChB,MAAM+E,EAAQ/E,EAAIqC,SAAiBvO,GAGxB,MAATiR,IACCtV,EAAOsV,QAAkBxU,IAARd,GAAqBsV,GAASA,KAEhDtV,EAAMsV,EACR,IAGKtV,CAAG,EAuFVD,IApF8BA,CAACsE,EAAU+U,EAAWC,KACpD,IAAItZ,EAYJ,OAVAsZ,EAAUtb,SAAQwS,IAChB,MAAM+E,EAAQ/E,EAAIqC,SAAiBvO,GAExB,MAATiR,IACCvV,EAAOuV,QAAkBxU,IAARf,GAAqBuV,GAASA,KAEhDvV,EAAMuV,EACR,IAGKvV,CAAG,EAwEVyZ,OArEiCA,CAACnV,EAAU+U,EAAWC,KACvD,IAAIrZ,EACAD,EAcJ,OAZAsZ,EAAUtb,SAAQwS,IAChB,MAAM+E,EAAQ/E,EAAIqC,SAAiBvO,GACtB,MAATiR,SACUxU,IAARd,EACEsV,GAASA,IAAOtV,EAAMD,EAAMuV,IAE5BtV,EAAMsV,IAAOtV,EAAMsV,GACnBvV,EAAOuV,IAAOvV,EAAMuV,IAE5B,IAGK,CAACtV,EAAKD,EAAI,EAsDjB0Z,KAnD+BA,CAACpV,EAAUqV,KAC1C,IAAIC,EAAQ,EACRrO,EAAM,EASV,GAPAoO,EAAS3b,SAAQwS,IACf,IAAI+E,EAAQ/E,EAAIqC,SAAiBvO,GACpB,MAATiR,IAAkBA,GAASA,IAAUA,MACrCqE,EAAQrO,GAAOgK,EACnB,IAGEqE,EAAO,OAAOrO,EAAMqO,CAExB,EAuCAC,OApCiCA,CAACvV,EAAUqV,KAC5C,IAAKA,EAASvb,OACZ,OAGF,MAAMwS,EAAS+I,EAASpW,KAAIiN,GAAOA,EAAIqC,SAASvO,KAChD,IAAKjH,EAAcuT,GACjB,OAEF,GAAsB,IAAlBA,EAAOxS,OACT,OAAOwS,EAAO,GAGhB,MAAMkJ,EAAMxa,KAAKya,MAAMnJ,EAAOxS,OAAS,GACjC4b,EAAOpJ,EAAOqJ,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IACvC,OAAOvJ,EAAOxS,OAAS,GAAM,EAAI4b,EAAKF,IAAQE,EAAKF,EAAM,GAAME,EAAKF,IAAS,CAAC,EAsB9EM,OAnBiCA,CAAC9V,EAAUqV,IACrCrc,MAAM+c,KAAK,IAAIC,IAAIX,EAASpW,KAAIpG,GAAKA,EAAE0V,SAASvO,MAAYsM,UAmBnE2J,YAhBsCA,CAACjW,EAAUqV,IAC1C,IAAIW,IAAIX,EAASpW,KAAIpG,GAAKA,EAAE0V,SAASvO,MAAYuE,KAgBxD+Q,MAbgCA,CAACY,EAAWb,IACrCA,EAASvb,QCALqc,EAAyB,CACpCtR,oBAAqBA,KAIZ,CACLuR,eAAgBC,IAAK,IAAAC,EAAAC,EAAA,OAA2C,OAA3CD,EAAIC,OAAJA,EAAKF,EAAM9H,aAA4B,MAAnCgI,EAA2B/H,cAA3B+H,EAAAA,EAA2B/H,YAAY8H,EAAI,IAAI,EACxEE,cAAe,SAInB1R,gBAAkBC,IACT,CACL0R,SAAU,MACP1R,IAIPS,kBACE3J,IAEO,CACL6a,iBAAkBne,EAAiB,WAAYsD,GAC/C8a,kBAAmB,YAIvB/a,aAAcA,CACZoB,EACAnB,KAEO,CACL+a,eAAgBA,KACd/a,EAAMgb,aAAYle,GAEZA,MAAAA,GAAAA,EAAKgE,SAASK,EAAOT,IAChB5D,EAAIuH,QAAOrH,GAAKA,IAAMmE,EAAOT,KAG/B,IAAQ,MAAH5D,EAAAA,EAAO,GAAKqE,EAAOT,KAC/B,EAGJua,YAAaA,KAAM,IAAA7a,EAAAuK,EAAA2B,EAAAvB,EACjB,OAIM,OAJN3K,SAAAuK,EAEM,OAFN2B,EACiCvB,OADjCA,EACE5J,EAAOlB,UAAUib,iBAAcnQ,GAC3BuB,EACJtM,EAAMyB,QAAQyZ,iBAAcvQ,GACxBvK,IACFe,EAAOV,UAAU,EAIvB0a,aAAcA,KAAM,IAAAC,EAClB,OAAgC,OAAhCA,EAAOpb,EAAM2D,WAAWiX,eAAQ,EAAzBQ,EAA2Bta,SAASK,EAAOT,GAAG,EAGvD2a,gBAAiBA,KAAA,IAAAC,EAAA,OAA+B,OAA/BA,EAAMtb,EAAM2D,WAAWiX,eAAQ,EAAzBU,EAA2BC,QAAQpa,EAAOT,GAAG,EAEpE8a,yBAA0BA,KACxB,MAAMC,EAAWta,EAAO8Z,cAExB,MAAO,KACAQ,GACLta,EAAO4Z,gBAAgB,CACxB,EAEHW,qBAAsBA,KACpB,MAAMlG,EAAWxV,EAAMqV,kBAAkBjF,SAAS,GAE5CgF,EAAQI,MAAAA,OAAAA,EAAAA,EAAU9C,SAASvR,EAAOT,IAExC,MAAqB,iBAAV0U,EACF6D,EAAe7N,IAGsB,kBAA1C9I,OAAOqZ,UAAUhJ,SAASiJ,KAAKxG,GAC1B6D,EAAeK,YADxB,CAEA,EAEFuC,iBAAkBA,KAAM,IAAAC,EAAAC,EACtB,IAAK5a,EACH,MAAM,IAAID,MAGZ,OAAOnE,EAAWoE,EAAOlB,UAAU0a,eAC/BxZ,EAAOlB,UAAU0a,cACkB,SAAnCxZ,EAAOlB,UAAU0a,cACjBxZ,EAAOua,uBAGNI,OAH4BA,EACD,OADCC,EAC7B/b,EAAMyB,QAAQwX,qBAAc,EAA5B8C,EACE5a,EAAOlB,UAAU0a,gBAClBmB,EACD7C,EACE9X,EAAOlB,UAAU0a,cAClB,IAKXpX,YACEvD,IAEO,CACLgb,YAAaxe,GAAWwD,MAAAA,EAAMyB,QAAQoZ,sBAAd7a,EAAAA,EAAMyB,QAAQoZ,iBAAmBre,GAEzDwf,cAAevO,IAAgB,IAAAwO,EAAAhM,EAC7BjQ,EAAMgb,YACJvN,EAAe,GAAiCwO,OAA/BA,SAAAhM,EAAGjQ,EAAM2N,qBAANsC,EAAoB2K,UAAQqB,EAAI,GACrD,EAGHC,sBAAuBA,IAAMlc,EAAMwY,sBACnC2D,mBAAoBA,MACbnc,EAAMoc,qBAAuBpc,EAAMyB,QAAQ0a,qBAC9Cnc,EAAMoc,oBAAsBpc,EAAMyB,QAAQ0a,mBAAmBnc,IAG3DA,EAAMyB,QAAQ4a,iBAAmBrc,EAAMoc,oBAClCpc,EAAMkc,wBAGRlc,EAAMoc,yBAKnBhL,UAAWA,CACTf,EACArQ,KAEO,CACLmb,aAAcA,MAAQ9K,EAAIiM,iBAC1BC,iBAAkBpY,IAChB,GAAIkM,EAAImM,qBAAqBC,eAAetY,GAC1C,OAAOkM,EAAImM,qBAAqBrY,GAGlC,MAAMhD,EAASnB,EAAMwL,UAAUrH,GAE/B,OAAKhD,MAAAA,GAAAA,EAAQlB,UAAUsc,kBAIvBlM,EAAImM,qBAAqBrY,GAAYhD,EAAOlB,UAAUsc,iBACpDlM,EAAIqM,UAGCrM,EAAImM,qBAAqBrY,IAPvBkM,EAAIqC,SAASvO,EAOmB,EAE3CqY,qBAAsB,CAAC,IAI3BG,WAAYA,CACVC,EACAzb,EACAkP,EACArQ,KAKO,CACLmb,aAAcA,IACZha,EAAOga,gBAAkBha,EAAOT,KAAO2P,EAAIiM,iBAC7CO,iBAAkBA,KAAOD,EAAKzB,gBAAkBha,EAAOga,eACvD2B,gBAAiBA,KAAA,IAAAjL,EAAA,OACd+K,EAAKzB,iBACLyB,EAAKC,sBACO,OAAZhL,EAACxB,EAAI2B,WAAJH,EAAa5T,OAAM,KAKtB,SAAS6D,EACdE,EACA4Y,EACAE,GAEA,GAAKF,MAAAA,IAAAA,EAAU3c,SAAW6c,EACxB,OAAO9Y,EAGT,MAAM+a,EAAqB/a,EAAYqC,QACrC2Y,IAAQpC,EAAS9Z,SAASkc,EAAItc,MAGhC,GAA0B,WAAtBoa,EACF,OAAOiC,EAOT,MAAO,IAJiBnC,EACrBxX,KAAI6Z,GAAKjb,EAAYoC,MAAK4Y,GAAOA,EAAItc,KAAOuc,MAC5C5Y,OAAOC,YAEqByY,EACjC,CChRO,MAAMG,EAAyB,CACpCjU,gBAAkBC,IACT,CACLiU,YAAa,MACVjU,IAIPS,kBACE3J,IAEO,CACLod,oBAAqB1gB,EAAiB,cAAesD,KAIzDuD,YACEvD,IAEO,CACLqd,eAAgB7gB,GAAWwD,MAAAA,EAAMyB,QAAQ2b,yBAAdpd,EAAAA,EAAMyB,QAAQ2b,oBAAsB5gB,GAC/D8gB,iBAAkB7P,IAAgB,IAAAC,EAChC1N,EAAMqd,eACJ5P,EAAe,UAAEC,EAAG1N,EAAM2N,aAAawP,aAAWzP,EAAI,GACvD,EAEH7L,mBAAoB3D,GAClB,IAAM,CACJ8B,EAAM2D,WAAWwZ,YACjBnd,EAAM2D,WAAWiX,SACjB5a,EAAMyB,QAAQqZ,qBAEhB,CAACqC,EAAavC,EAAUE,IAAsB1Z,IAG5C,IAAImc,EAA2C,GAG/C,GAAgB,MAAXJ,GAAAA,EAAalf,OAEX,CACL,MAAMuf,EAAkB,IAAIL,GAGtBM,EAAc,IAAIrc,GAKxB,KAAOqc,EAAYxf,QAAUuf,EAAgBvf,QAAQ,CACnD,MAAMyf,EAAiBF,EAAgBG,QACjCC,EAAaH,EAAYlT,WAC7BvN,GAAKA,EAAE0D,KAAOgd,IAEZE,GAAc,GAChBL,EAAexf,KAAK0f,EAAYI,OAAOD,EAAY,GAAG,GAE1D,CAGAL,EAAiB,IAAIA,KAAmBE,EAC1C,MAtBEF,EAAiBnc,EAwBnB,OAAOU,EAAayb,EAAgB3C,EAAUE,EAAkB,GAElE,CACEne,KAAK8H,OCtCFqZ,EAA2B,CACtC7U,gBAAkBC,IACT,IACFA,EACH6U,WAAY,CARhBC,UAJuB,EAKvBC,SAJsB,MAaR,MAAL/U,OAAK,EAALA,EAAO6U,cAKhBpU,kBACE3J,IAEO,CACLke,mBAAoBxhB,EAAiB,aAAcsD,KAIvDuD,YACEvD,IAEA,IAAIoP,GAAa,EACbC,GAAS,EAEb,MAAO,CACL8O,oBAAqBA,KAAM,IAAA/d,EAAAmP,EACzB,GAAKH,GAOL,GAEkC,OAFlChP,EAC4BmP,OAD5BA,EACEvP,EAAMyB,QAAQ+N,cAAYD,EAC1BvP,EAAMyB,QAAQ2c,oBAAkBhe,GAC/BJ,EAAMyB,QAAQ4c,iBACf,CACA,GAAIhP,EAAQ,OACZA,GAAS,EACTrP,EAAM2P,QAAO,KACX3P,EAAMse,iBACNjP,GAAS,CAAK,GAElB,OAjBErP,EAAM2P,QAAO,KACXP,GAAa,CAAI,GAgBrB,EAEFmP,cAAe/hB,GAO0B,MAAhCwD,EAAMyB,QAAQyc,wBAAkB,EAAhCle,EAAMyB,QAAQyc,oBANyBphB,GAC7BP,EAAiBC,EAASM,KAO7C0hB,gBAAiB/Q,IAAgB,IAAAgR,EAC/Bze,EAAMue,cACJ9Q,EA/DgD,CACxDuQ,UAJuB,EAKvBC,SAJsB,IAmEmB,OADFQ,EAC3Bze,EAAM2N,aAAaoQ,YAAUU,EAjEe,CACxDT,UAJuB,EAKvBC,SAJsB,IAoEf,EAEHS,aAAcliB,IACZwD,EAAMue,eAAczhB,IAClB,IAAIkhB,EAAYzhB,EAAiBC,EAASM,EAAIkhB,WAE9C,MAAMW,OAC+B,IAA5B3e,EAAMyB,QAAQmd,YACQ,IAA7B5e,EAAMyB,QAAQmd,UACV/V,OAAOC,iBACP9I,EAAMyB,QAAQmd,UAAY,EAIhC,OAFAZ,EAAY7e,KAAKU,IAAI,EAAGV,KAAKW,IAAIke,EAAWW,IAErC,IACF7hB,EACHkhB,YACD,GACD,EAEJM,eAAgB7Q,IAAgB,IAAAoR,EAAA5O,EAAA6O,EAC9B9e,EAAM0e,aACJjR,EA3Fe,EA6F8BoR,OADzBA,EACEC,OADF7O,EAChBjQ,EAAM2N,eAANmR,OAAkBA,EAAlB7O,EAAoB8N,iBAAFe,EAAlBA,EAAgCd,WAASa,EA7F9B,EA8FhB,EAEHE,cAAetR,IAAgB,IAAAuR,EAAAC,EAAAC,EAC7Blf,EAAMmf,YACJ1R,EAjGc,GAmG8BuR,OADzBA,EACGE,OADHD,EACfjf,EAAM2N,eAANuR,OAAkBA,EAAlBD,EAAoBlB,iBAAFmB,EAAlBA,EAAgCjB,UAAQe,EAnG9B,GAoGf,EAEHG,YAAa3iB,IACXwD,EAAMue,eAAczhB,IAClB,MAAMmhB,EAAW9e,KAAKU,IAAI,EAAGtD,EAAiBC,EAASM,EAAImhB,WACrDmB,EAActiB,EAAImhB,SAAWnhB,EAAIkhB,UACjCA,EAAY7e,KAAKya,MAAMwF,EAAcnB,GAE3C,MAAO,IACFnhB,EACHkhB,YACAC,WACD,GACD,EAEJoB,aAAc7iB,GACZwD,EAAMue,eAAczhB,IAAO,IAAAwiB,EACzB,IAAIC,EAAehjB,EACjBC,EACuB,OADhB8iB,EACPtf,EAAMyB,QAAQmd,WAASU,GAAK,GAO9B,MAJ4B,iBAAjBC,IACTA,EAAepgB,KAAKU,KAAK,EAAG0f,IAGvB,IACFziB,EACH8hB,UAAWW,EACZ,IAGLC,eAAgBthB,GACd,IAAM,CAAC8B,EAAMyf,kBACbb,IACE,IAAIc,EAAwB,GAI5B,OAHId,GAAaA,EAAY,IAC3Bc,EAAc,IAAI,IAAIviB,MAAMyhB,IAAYe,KAAK,MAAMvc,KAAI,CAACwH,EAAGgV,IAAMA,KAE5DF,CAAW,GAEpB,CACE/iB,KAAK8H,EACLhG,MAAOA,KAAA,IAAA+C,EAAA,OAA4BA,OAA5BA,EAAMxB,EAAMyB,QAAQC,UAAQF,EAAIxB,EAAMyB,QAAQoe,UAAU,IAInEC,mBAAoBA,IAAM9f,EAAM2D,WAAWoa,WAAWC,UAAY,EAElE+B,eAAgBA,KACd,MAAM/B,UAAEA,GAAche,EAAM2D,WAAWoa,WAEjCa,EAAY5e,EAAMyf,eAExB,OAAmB,IAAfb,GAIc,IAAdA,GAIGZ,EAAYY,EAAY,CAAC,EAGlCoB,aAAcA,IACLhgB,EAAM0e,cAAa5hB,GAAOA,EAAM,IAGzCmjB,SAAUA,IACDjgB,EAAM0e,cAAa5hB,GACjBA,EAAM,IAIjBqT,yBAA0BA,IAAMnQ,EAAMkR,sBACtCgP,sBAAuBA,MAElBlgB,EAAMmgB,wBACPngB,EAAMyB,QAAQye,wBAEdlgB,EAAMmgB,uBACJngB,EAAMyB,QAAQye,sBAAsBlgB,IAGpCA,EAAMyB,QAAQ4c,mBAAqBre,EAAMmgB,uBACpCngB,EAAMmQ,2BAGRnQ,EAAMmgB,0BAGfV,aAAcA,KAAM,IAAAW,EAClB,OACyBA,OADzBA,EACEpgB,EAAMyB,QAAQmd,WAASwB,EACvBjhB,KAAKkhB,KACHrgB,EAAMmQ,2BAA2BmQ,KAAKriB,OACpC+B,EAAM2D,WAAWoa,WAAWE,SAC/B,EAGN,GC5LQsC,EAAwB,CACnCtX,gBAAkBC,IACT,CACLtF,cARoD,CACxDC,KAAM,GACNC,MAAO,OAOAoF,IAIPS,kBACE3J,IAEO,CACLwgB,sBAAuB9jB,EAAiB,gBAAiBsD,KAI7DD,aAAcA,CACZoB,EACAnB,KAEO,CACLygB,IAAKrW,IACH,MAAMsW,EAAYvf,EACfS,iBACAwB,KAAIpG,GAAKA,EAAE0D,KACX2D,OAAOC,SAEVtE,EAAM2gB,kBAAiB7jB,IAAO,IAAA8jB,EAAAC,EACFC,EAAAC,EAUDC,EAAAC,EAVzB,MAAiB,UAAb7W,EACK,CACLvG,MAAgBid,OAAVA,EAAChkB,MAAAA,OAAAA,EAAAA,EAAK+G,MAAIid,EAAI,IAAIzc,QAAOrH,KAAe,MAAT0jB,GAAAA,EAAW5f,SAAS9D,MACzD8G,MAAO,KACSid,OAAXA,EAACjkB,MAAAA,OAAAA,EAAAA,EAAKgH,OAAKid,EAAI,IAAI1c,QAAOrH,WAAM0jB,GAAAA,EAAW5f,SAAS9D,SACpD0jB,IAKQ,SAAbtW,EACK,CACLvG,KAAM,KACSmd,OAAVA,EAAClkB,MAAAA,OAAAA,EAAAA,EAAK+G,MAAImd,EAAI,IAAI3c,QAAOrH,WAAM0jB,GAAAA,EAAW5f,SAAS9D,SACnD0jB,GAEL5c,OAAkBmd,OAAXA,EAACnkB,MAAAA,OAAAA,EAAAA,EAAKgH,OAAKmd,EAAI,IAAI5c,QAAOrH,KAAM0jB,MAAAA,GAAAA,EAAW5f,SAAS9D,OAIxD,CACL6G,MAAgB+c,OAAVA,EAAC9jB,MAAAA,OAAAA,EAAAA,EAAK+G,MAAI+c,EAAI,IAAIvc,QAAOrH,KAAe,MAAT0jB,GAAAA,EAAW5f,SAAS9D,MACzD8G,OAAkB+c,OAAXA,EAAC/jB,MAAAA,OAAAA,EAAAA,EAAKgH,OAAK+c,EAAI,IAAIxc,QAAOrH,KAAM0jB,MAAAA,GAAAA,EAAW5f,SAAS9D,MAC5D,GACD,EAGJkkB,UAAWA,IACW/f,EAAOS,iBAER/C,MACjB7B,IAAC,IAAAmkB,EAAAnW,EAAA,OAC2BmW,OAA1BA,EAACnkB,EAAEiD,UAAUmhB,gBAAaD,KACEnW,OADMA,EACjChL,EAAMyB,QAAQ2f,gBAAapW,EAAS,IAI3CqW,YAAaA,KACX,MAAMC,EAAgBngB,EAAOS,iBAAiBwB,KAAIpG,GAAKA,EAAE0D,MAEnDmD,KAAEA,EAAIC,MAAEA,GAAU9D,EAAM2D,WAAWC,cAEnC2d,EAASD,EAAcziB,MAAK7B,GAAS,MAAJ6G,OAAI,EAAJA,EAAM/C,SAAS9D,KAChDwkB,EAAUF,EAAcziB,MAAK7B,GAAU,MAAL8G,OAAK,EAALA,EAAOhD,SAAS9D,KAExD,OAAOukB,EAAS,SAASC,GAAU,OAAe,EAGpDC,eAAgBA,KAAM,IAAA/K,EAAAC,EAAAC,EACpB,MAAMxM,EAAWjJ,EAAOkgB,cAExB,OAAOjX,SAAQsM,EACmB,OADnBC,EACX3W,EAAM2D,WAAWC,gBAAjBgT,OAA8BA,EAA9BD,EAAiCvM,SAAH,EAA9BwM,EAA4C2E,QAAQpa,EAAOT,KAAGgW,GAAK,EACnE,CAAC,IAKXtF,UAAWA,CACTf,EACArQ,KAEO,CACL0hB,sBAAuBxjB,GACrB,IAAM,CACJmS,EAAIsR,sBACJ3hB,EAAM2D,WAAWC,cAAcC,KAC/B7D,EAAM2D,WAAWC,cAAcE,SAEjC,CAAC8d,EAAU/d,EAAMC,KACf,MAAM+d,EAAyB,IAAS,MAAJhe,EAAAA,EAAQ,MAAc,MAALC,EAAAA,EAAS,IAE9D,OAAO8d,EAASvd,QAAOrH,IAAM6kB,EAAa/gB,SAAS9D,EAAEmE,OAAOT,KAAI,GAElE,CACE/D,IAEE,4BACF8B,MAAOA,KAAA,IAAA+C,EAAA,OAA4BA,OAA5BA,EAAMxB,EAAMyB,QAAQC,UAAQF,EAAIxB,EAAMyB,QAAQqgB,SAAS,IAGlEC,oBAAqB7jB,GACnB,IAAM,CACJmS,EAAIsR,sBACJ3hB,EAAM2D,WAAWC,cAAcC,KAEhC,KACD,CAAC+d,EAAU/d,KACU,MAAJA,EAAAA,EAAQ,IACpBT,KACCe,GAAYyd,EAASxd,MAAKwY,GAAQA,EAAKzb,OAAOT,KAAOyD,MAEtDE,OAAOC,SACPlB,KAAIpG,IAAM,IAAKA,EAAGoN,SAAU,YAIjC,CACEzN,IAC2C,0BAC3C8B,MAAOA,KAAA,IAAAwD,EAAA,OAA4BA,OAA5BA,EAAMjC,EAAMyB,QAAQC,UAAQO,EAAIjC,EAAMyB,QAAQqgB,SAAS,IAGlEE,qBAAsB9jB,GACpB,IAAM,CAACmS,EAAIsR,sBAAuB3hB,EAAM2D,WAAWC,cAAcE,SACjE,CAAC8d,EAAU9d,KACW,MAALA,EAAAA,EAAS,IACrBV,KACCe,GAAYyd,EAASxd,MAAKwY,GAAQA,EAAKzb,OAAOT,KAAOyD,MAEtDE,OAAOC,SACPlB,KAAIpG,IAAM,IAAKA,EAAGoN,SAAU,aAIjC,CACEzN,IAC2C,2BAC3C8B,MAAOA,KAAA,IAAAqG,EAAA,OAA4BA,OAA5BA,EAAM9E,EAAMyB,QAAQC,UAAQoD,EAAI9E,EAAMyB,QAAQqgB,SAAS,MAMtEve,YACEvD,IAEO,CACL2gB,iBAAkBnkB,GAChBwD,MAAAA,EAAMyB,QAAQ+e,2BAAdxgB,EAAAA,EAAMyB,QAAQ+e,sBAAwBhkB,GAExCylB,mBAAoBxU,IAAY,IAAAC,EAAAuC,EAAA,OAC9BjQ,EAAM2gB,iBACJlT,EAtKgD,CACxD5J,KAAM,GACNC,MAAO,IAsKsC4J,OADTA,EACxBuC,OADwBA,EACxBjQ,EAAM2N,mBAANsC,EAAAA,EAAoBrM,eAAa8J,EAxKW,CACxD7J,KAAM,GACNC,MAAO,IAuKA,EAEHoe,uBAAwB9X,IAAY,IAAA+X,EAClC,MAAMC,EAAepiB,EAAM2D,WAAWC,cAEvB,IAAAye,EAAAC,EAAf,OAAKlY,EAKE9F,QAAQ6d,OAADA,EAACC,EAAahY,SAAb+X,EAAAA,EAAwBlkB,QAJ9BqG,SACY,OAAjB+d,EAAAD,EAAave,WAAI,EAAjBwe,EAAmBpkB,iBAAMqkB,EAAIF,EAAate,cAAbwe,EAAoBrkB,QAGP,EAGhDskB,mBAAoBrkB,GAClB,IAAM,CAAC8B,EAAMmY,oBAAqBnY,EAAM2D,WAAWC,cAAcC,QACjE,CAACE,EAAYF,KACHA,MAAAA,EAAAA,EAAQ,IACbT,KAAIe,GAAYJ,EAAWK,MAAKjD,GAAUA,EAAOT,KAAOyD,MACxDE,OAAOC,UAEZ,CACE3H,KAAK8H,EACLhG,MAAOA,KAAA,IAAAwG,EAAA,OAA4BA,OAA5BA,EAAMjF,EAAMyB,QAAQC,UAAQuD,EAAIjF,EAAMyB,QAAQE,YAAY,IAIrE6gB,oBAAqBtkB,GACnB,IAAM,CAAC8B,EAAMmY,oBAAqBnY,EAAM2D,WAAWC,cAAcE,SACjE,CAACC,EAAYD,KACHA,MAAAA,EAAAA,EAAS,IACdV,KAAIe,GAAYJ,EAAWK,MAAKjD,GAAUA,EAAOT,KAAOyD,MACxDE,OAAOC,UAEZ,CACE3H,KAAK8H,EACLhG,MAAOA,KAAA,IAAA4G,EAAA,OAA4BA,OAA5BA,EAAMrF,EAAMyB,QAAQC,UAAQ2D,EAAIrF,EAAMyB,QAAQE,YAAY,IAIrE8gB,qBAAsBvkB,GACpB,IAAM,CACJ8B,EAAMmY,oBACNnY,EAAM2D,WAAWC,cAAcC,KAC/B7D,EAAM2D,WAAWC,cAAcE,SAEjC,CAACC,EAAYF,EAAMC,KACjB,MAAM+d,EAAyB,IAAS,MAAJhe,EAAAA,EAAQ,MAAc,MAALC,EAAAA,EAAS,IAE9D,OAAOC,EAAWM,QAAOrH,IAAM6kB,EAAa/gB,SAAS9D,EAAE0D,KAAI,GAE7D,CACE/D,KAAK8H,EACLhG,MAAOA,KAAA,IAAA8G,EAAA,OAA4BA,OAA5BA,EAAMvF,EAAMyB,QAAQC,UAAQ6D,EAAIvF,EAAMyB,QAAQE,YAAY,OC/N9D+gB,EAA6B,CACxCzZ,gBAAkBC,IACT,CACLyZ,aAAc,CAAE,KACbzZ,IAIPS,kBACE3J,IAEO,CACL4iB,qBAAsBlmB,EAAiB,eAAgBsD,GACvD6iB,oBAAoB,EACpBC,yBAAyB,EACzBC,uBAAuB,IAO3Bxf,YACEvD,IAEO,CACLgjB,gBAAiBxmB,GAAWwD,MAAAA,EAAMyB,QAAQmhB,0BAAd5iB,EAAAA,EAAMyB,QAAQmhB,qBAAuBpmB,GACjEymB,kBAAmBxV,IAAY,IAAAyV,EAAA,OAC7BljB,EAAMgjB,gBACJvV,EAAe,CAAA,SAAEyV,EAAGljB,EAAM2N,aAAagV,cAAYO,EAAI,CACzD,EAAC,EACHC,sBAAuB/N,IACrBpV,EAAMgjB,iBAAgBlmB,IACpBsY,OACmB,IAAVA,EAAwBA,GAASpV,EAAMojB,uBAEhD,MAAMT,EAAe,IAAK7lB,GAEpBumB,EAAqBrjB,EAAMkc,wBAAwB9L,SAiBzD,OAbIgF,EACFiO,EAAmBxlB,SAAQwS,IACpBA,EAAIiT,iBAGTX,EAAatS,EAAI3P,KAAM,EAAI,IAG7B2iB,EAAmBxlB,SAAQwS,WAClBsS,EAAatS,EAAI3P,GAAG,IAIxBiiB,CAAY,GACnB,EAEJY,0BAA2BnO,GACzBpV,EAAMgjB,iBAAgBlmB,IACpB,MAAM0mB,OACa,IAAVpO,EACHA,GACCpV,EAAMyjB,2BAEPd,EAAkC,IAAK7lB,GAM7C,OAJAkD,EAAM2Q,cAAc2P,KAAKziB,SAAQwS,IAC/BqT,EAAoBf,EAActS,EAAI3P,GAAI8iB,EAAexjB,EAAM,IAG1D2iB,CAAY,IA6DvBgB,uBAAwBA,IAAM3jB,EAAMqV,kBACpCuO,oBAAqB1lB,GACnB,IAAM,CAAC8B,EAAM2D,WAAWgf,aAAc3iB,EAAMqV,qBAC5C,CAACsN,EAAckB,IACRvhB,OAAOoO,KAAKiS,GAAc1kB,OAQxB6lB,EAAa9jB,EAAO6jB,GAPlB,CACLvD,KAAM,GACNlQ,SAAU,GACVU,SAAU,CAAC,IAMjB,CACEnU,KAAK8H,EACLhG,MAAOA,KAAA,IAAA+C,EAAA,OAA4BA,OAA5BA,EAAMxB,EAAMyB,QAAQC,UAAQF,EAAIxB,EAAMyB,QAAQoe,UAAU,IAInEkE,4BAA6B7lB,GAC3B,IAAM,CAAC8B,EAAM2D,WAAWgf,aAAc3iB,EAAMwY,yBAC5C,CAACmK,EAAckB,IACRvhB,OAAOoO,KAAKiS,GAAc1kB,OAQxB6lB,EAAa9jB,EAAO6jB,GAPlB,CACLvD,KAAM,GACNlQ,SAAU,GACVU,SAAU,CAAC,IAMjB,CACEnU,IAEE,8BACF8B,MAAOA,KAAA,IAAAwD,EAAA,OAA4BA,OAA5BA,EAAMjC,EAAMyB,QAAQC,UAAQO,EAAIjC,EAAMyB,QAAQoe,UAAU,IAInEmE,2BAA4B9lB,GAC1B,IAAM,CAAC8B,EAAM2D,WAAWgf,aAAc3iB,EAAMiR,uBAC5C,CAAC0R,EAAckB,IACRvhB,OAAOoO,KAAKiS,GAAc1kB,OAQxB6lB,EAAa9jB,EAAO6jB,GAPlB,CACLvD,KAAM,GACNlQ,SAAU,GACVU,SAAU,CAAC,IAMjB,CACEnU,IAEE,6BACF8B,MAAOA,KAAA,IAAAqG,EAAA,OAA4BA,OAA5BA,EAAM9E,EAAMyB,QAAQC,UAAQoD,EAAI9E,EAAMyB,QAAQoe,UAAU,IAoBnEuD,qBAAsBA,KACpB,MAAMC,EAAqBrjB,EAAMwY,sBAAsBpI,UACjDuS,aAAEA,GAAiB3iB,EAAM2D,WAE/B,IAAIsgB,EAAoB3f,QACtB+e,EAAmBplB,QAAUqE,OAAOoO,KAAKiS,GAAc1kB,QAazD,OAVIgmB,GAEAZ,EAAmBxkB,MACjBwR,GAAOA,EAAIiT,iBAAmBX,EAAatS,EAAI3P,QAGjDujB,GAAoB,GAIjBA,CAAiB,EAG1BR,yBAA0BA,KACxB,MAAMS,EAAqBlkB,EACxBkgB,wBACA9P,SAAS/L,QAAOgM,GAAOA,EAAIiT,kBACxBX,aAAEA,GAAiB3iB,EAAM2D,WAE/B,IAAIwgB,IAA0BD,EAAmBjmB,OASjD,OANEkmB,GACAD,EAAmBrlB,MAAKwR,IAAQsS,EAAatS,EAAI3P,QAEjDyjB,GAAwB,GAGnBA,CAAqB,EAG9BC,sBAAuBA,KAAM,IAAAC,EAC3B,MAAMC,EAAgBhiB,OAAOoO,KACE2T,OADEA,EAC/BrkB,EAAM2D,WAAWgf,cAAY0B,EAAI,CACnC,GAAEpmB,OACF,OACEqmB,EAAgB,GAChBA,EAAgBtkB,EAAMwY,sBAAsBpI,SAASnS,MAAM,EAI/DsmB,0BAA2BA,KACzB,MAAML,EAAqBlkB,EAAMkgB,wBAAwB9P,SACzD,OAAOpQ,EAAMyjB,4BAETS,EACG7f,QAAOgM,GAAOA,EAAIiT,iBAClBzkB,MAAK7B,GAAKA,EAAEwnB,iBAAmBxnB,EAAEynB,qBAAoB,EAG9DC,gCAAiCA,IACvBhZ,IACN1L,EAAMmjB,sBACFzX,EAAiBiZ,OAA4BC,QAChD,EAILC,oCAAqCA,IAC3BnZ,IACN1L,EAAMujB,0BACF7X,EAAiBiZ,OAA4BC,QAChD,IAMTxT,UAAWA,CACTf,EACArQ,KAEO,CACL8kB,eAAgB1P,IACd,MAAM2P,EAAa1U,EAAImU,gBAEvBxkB,EAAMgjB,iBAAgBlmB,IAGpB,GAAIioB,KAFJ3P,OAAyB,IAAVA,EAAwBA,GAAS2P,GAG9C,OAAOjoB,EAGT,MAAMkoB,EAAiB,IAAKloB,GAI5B,OAFA4mB,EAAoBsB,EAAgB3U,EAAI3P,GAAI0U,EAAOpV,GAE5CglB,CAAc,GACrB,EAEJR,cAAeA,KACb,MAAM7B,aAAEA,GAAiB3iB,EAAM2D,WAC/B,OAAOshB,EAAc5U,EAAKsS,EAAa,EAGzC8B,kBAAmBA,KACjB,MAAM9B,aAAEA,GAAiB3iB,EAAM2D,WAC/B,MAAsD,SAA/CuhB,EAAiB7U,EAAKsS,EAA+B,EAG9DwC,wBAAyBA,KACvB,MAAMxC,aAAEA,GAAiB3iB,EAAM2D,WAC/B,MAAsD,QAA/CuhB,EAAiB7U,EAAKsS,EAA8B,EAG7DW,aAAcA,KAAM,IAAAtY,EAClB,MAAgD,mBAArChL,EAAMyB,QAAQohB,mBAChB7iB,EAAMyB,QAAQohB,mBAAmBxS,GAGH,OAAvCrF,EAAOhL,EAAMyB,QAAQohB,qBAAkB7X,CAAQ,EAGjDoa,oBAAqBA,KAAM,IAAAvP,EACzB,MAAmD,mBAAxC7V,EAAMyB,QAAQshB,sBAChB/iB,EAAMyB,QAAQshB,sBAAsB1S,GAGH,OAA1CwF,EAAO7V,EAAMyB,QAAQshB,wBAAqBlN,CAAQ,EAGpDwP,kBAAmBA,KAAM,IAAAlP,EACvB,MAAqD,mBAA1CnW,EAAMyB,QAAQqhB,wBAChB9iB,EAAMyB,QAAQqhB,wBAAwBzS,GAGH,OAA5C8F,EAAOnW,EAAMyB,QAAQqhB,0BAAuB3M,CAAQ,EAEtDmP,yBAA0BA,KACxB,MAAMC,EAAYlV,EAAIiT,eAEtB,OAAQ5X,IAAe,IAAA8Z,EAChBD,GACLlV,EAAIyU,eACFU,OADgBA,EACd9Z,EAAiBiZ,aAAnBa,EAAAA,EAAgDZ,QACjD,CACF,KAMHlB,EAAsBA,CAC1BsB,EACAtkB,EACA0U,EACApV,KACG,IAAA6R,EACH,MAAMxB,EAAMrQ,EAAMylB,OAAO/kB,GAQrB0U,GACG/E,EAAIgV,qBACP/iB,OAAOoO,KAAKsU,GAAgBnnB,SAAQlB,UAAcqoB,EAAeroB,KAE/D0T,EAAIiT,iBACN0B,EAAetkB,IAAM,WAGhBskB,EAAetkB,GAIpBmR,OAAAA,EAAAxB,EAAI2B,UAAJH,EAAa5T,QAAUoS,EAAI+U,uBAC7B/U,EAAI2B,QAAQnU,SAAQwS,GAClBqT,EAAoBsB,EAAgB3U,EAAI3P,GAAI0U,EAAOpV,IAEvD,EAGK,SAAS8jB,EACd9jB,EACA6jB,GAEA,MAAMlB,EAAe3iB,EAAM2D,WAAWgf,aAEhC+C,EAAoC,GACpCC,EAAkD,CAAA,EAGlDC,EAAc,SAACtF,EAAoBpgB,GACvC,OAAOogB,EACJld,KAAIiN,IAAO,IAAAwV,EACV,MAAMd,EAAaE,EAAc5U,EAAKsS,GActC,GAZIoC,IACFW,EAAoB3nB,KAAKsS,GACzBsV,EAAoBtV,EAAI3P,IAAM2P,GAG5BwV,OAAJA,EAAIxV,EAAI2B,UAAJ6T,EAAa5nB,SACfoS,EAAM,IACDA,EACH2B,QAAS4T,EAAYvV,EAAI2B,WAIzB+S,EACF,OAAO1U,CACT,IAEDhM,OAAOC,UAGZ,MAAO,CACLgc,KAAMsF,EAAY/B,EAASvD,MAC3BlQ,SAAUsV,EACV5U,SAAU6U,EAEd,CAEO,SAASV,EACd5U,EACAyV,GACS,IAAAC,EACT,OAAwB,OAAxBA,EAAOD,EAAUzV,EAAI3P,MAAGqlB,CAC1B,CAEO,SAASb,EACd7U,EACAyV,EACA9lB,GAEA,GAAIqQ,EAAI2B,SAAW3B,EAAI2B,QAAQ/T,OAAQ,CACrC,IAAI+nB,GAAsB,EACtBC,GAAe,EAenB,OAbA5V,EAAI2B,QAAQnU,SAAQqoB,IAEdD,IAAiBD,IAIjBf,EAAciB,EAAQJ,GACxBG,GAAe,EAEfD,GAAsB,EACxB,IAGKA,EAAsB,QAAQC,GAAe,MACtD,CAEA,OAAO,CACT,CC3gBaE,MAAAA,EAAsB,aAkDnC,SAASC,EAAarM,EAAQC,GAC5B,OAAOD,IAAMC,EAAI,EAAID,EAAIC,EAAI,GAAK,CACpC,CAEA,SAASrH,EAASoH,GAChB,MAAiB,iBAANA,EACL3F,MAAM2F,IAAMA,IAAM1F,KAAY0F,KAAO1F,IAChC,GAEF3U,OAAOqa,GAEC,iBAANA,EACFA,EAEF,EACT,CAKA,SAASsM,EAAoBC,EAAcC,GAGzC,MAAMxM,EAAIuM,EAAKtlB,MAAMmlB,GAAqB9hB,OAAOC,SAC3C0V,EAAIuM,EAAKvlB,MAAMmlB,GAAqB9hB,OAAOC,SAGjD,KAAOyV,EAAE9b,QAAU+b,EAAE/b,QAAQ,CAC3B,MAAMuoB,EAAKzM,EAAE4D,QACP8I,EAAKzM,EAAE2D,QAEP+I,EAAKC,SAASH,EAAI,IAClBI,EAAKD,SAASF,EAAI,IAElBI,EAAQ,CAACH,EAAIE,GAAI9M,OAGvB,GAAI1F,MAAMyS,EAAM,IAAhB,CACE,GAAIL,EAAKC,EACP,OAAO,EAET,GAAIA,EAAKD,EACP,OAAQ,CAGZ,KARA,CAWA,GAAIpS,MAAMyS,EAAM,IACd,OAAOzS,MAAMsS,IAAO,EAAI,EAI1B,GAAIA,EAAKE,EACP,OAAO,EAET,GAAIA,EAAKF,EACP,OAAQ,CAZV,CAcF,CAEA,OAAO3M,EAAE9b,OAAS+b,EAAE/b,MACtB,CAIO,MAAM6oB,EAAa,CACxBC,aAnHmCA,CAACC,EAAMC,EAAM9iB,IACzCkiB,EACL1T,EAASqU,EAAKtU,SAASvO,IAAWsO,cAClCE,EAASsU,EAAKvU,SAASvO,IAAWsO,eAiHpCyU,0BA7GgDA,CAACF,EAAMC,EAAM9iB,IACtDkiB,EACL1T,EAASqU,EAAKtU,SAASvO,IACvBwO,EAASsU,EAAKvU,SAASvO,KA2GzBgjB,KArG2BA,CAACH,EAAMC,EAAM9iB,IACjCiiB,EACLzT,EAASqU,EAAKtU,SAASvO,IAAWsO,cAClCE,EAASsU,EAAKvU,SAASvO,IAAWsO,eAmGpC2U,kBA7FwCA,CAACJ,EAAMC,EAAM9iB,IAC9CiiB,EACLzT,EAASqU,EAAKtU,SAASvO,IACvBwO,EAASsU,EAAKvU,SAASvO,KA2FzBkjB,SAvF+BA,CAACL,EAAMC,EAAM9iB,KAC5C,MAAM4V,EAAIiN,EAAKtU,SAAevO,GACxB6V,EAAIiN,EAAKvU,SAAevO,GAK9B,OAAO4V,EAAIC,EAAI,EAAID,EAAIC,GAAK,EAAI,CAAC,EAiFjCsN,MA9E4BA,CAACN,EAAMC,EAAM9iB,IAClCiiB,EAAaY,EAAKtU,SAASvO,GAAW8iB,EAAKvU,SAASvO,KC4DhDojB,EAAwB,CACnCte,gBAAkBC,IACT,CACLse,QAAS,MACNte,IAIPF,oBAAqBA,KACZ,CACLye,UAAW,SAIf9d,kBACE3J,IAEO,CACL0nB,gBAAiBhrB,EAAiB,UAAWsD,GAC7C2nB,iBAAmBjc,GACTA,EAAiBkc,WAK/B7nB,aAAcA,CACZoB,EACAnB,KAEO,CACL6nB,iBAAkBA,KAChB,MAAMC,EAAY9nB,EAAMwY,sBAAsBpI,SAAS2X,MAAM,IAE7D,IAAIC,GAAW,EAEf,IAAK,MAAM3X,KAAOyX,EAAW,CAC3B,MAAM1S,EAAQ/E,MAAAA,OAAAA,EAAAA,EAAKqC,SAASvR,EAAOT,IAEnC,GAA8C,kBAA1C4B,OAAOqZ,UAAUhJ,SAASiJ,KAAKxG,GACjC,OAAO0R,EAAWO,SAGpB,GAAqB,iBAAVjS,IACT4S,GAAW,EAEP5S,EAAMpU,MAAMmlB,GAAqBloB,OAAS,GAC5C,OAAO6oB,EAAWC,YAGxB,CAEA,OAAIiB,EACKlB,EAAWK,KAGbL,EAAWQ,KAAK,EAEzBW,eAAgBA,KACd,MAAMzS,EAAWxV,EAAMwY,sBAAsBpI,SAAS,GAItD,MAAqB,iBAFPoF,MAAAA,OAAAA,EAAAA,EAAU9C,SAASvR,EAAOT,KAG/B,MAGF,MAAM,EAEfwnB,aAAcA,KAAM,IAAAC,EAAAC,EAClB,IAAKjnB,EACH,MAAM,IAAID,MAGZ,OAAOnE,EAAWoE,EAAOlB,UAAUwnB,WAC/BtmB,EAAOlB,UAAUwnB,UACc,SAA/BtmB,EAAOlB,UAAUwnB,UACjBtmB,EAAO0mB,mBACyDM,OADvCA,EACD,OADCC,EACzBpoB,EAAMyB,QAAQqlB,iBAAU,EAAxBsB,EAA2BjnB,EAAOlB,UAAUwnB,YAAoBU,EAChErB,EAAW3lB,EAAOlB,UAAUwnB,UAA8B,EAEhEY,cAAeA,CAACC,EAAMC,KAWpB,MAAMC,EAAmBrnB,EAAOsnB,sBAC1BC,EAAiB,MAAOJ,EAE9BtoB,EAAM2oB,YAAW7rB,IAEf,MAAM8rB,EAAkB9rB,MAAAA,OAAAA,EAAAA,EAAKsH,MAAKpH,GAAKA,EAAE0D,KAAOS,EAAOT,KACjDmoB,EAAgB/rB,MAAAA,OAAAA,EAAAA,EAAKyN,WAAUvN,GAAKA,EAAE0D,KAAOS,EAAOT,KAE1D,IAGIooB,EAHAC,EAA2B,GAI3BC,EAAWN,EAAiBJ,EAA4B,SAArBE,EA+Bb,IAAAS,GA1BtBH,EAFG,MAAHhsB,GAAAA,EAAKmB,QAAUkD,EAAO+nB,mBAAqBX,EACzCK,EACW,SAEA,MAIR,MAAH9rB,GAAAA,EAAKmB,QAAU4qB,IAAkB/rB,EAAImB,OAAS,EACnC,UACJ2qB,EACI,SAEA,UAKE,WAAfE,IAEGJ,GAEEF,IACHM,EAAa,WAKA,QAAfA,IACFC,EAAa,IACRjsB,EACH,CACE4D,GAAIS,EAAOT,GACX4nB,KAAMU,IAIVD,EAAWlL,OACT,EACAkL,EAAW9qB,QAC0BgrB,OADpBA,EACdjpB,EAAMyB,QAAQ0nB,sBAAoBF,EAAIpgB,OAAOC,oBAIlDigB,EAFwB,WAAfD,EAEIhsB,EAAIsG,KAAIpG,GACfA,EAAE0D,KAAOS,EAAOT,GACX,IACF1D,EACHsrB,KAAMU,GAGHhsB,IAEe,WAAf8rB,EACIhsB,EAAIuH,QAAOrH,GAAKA,EAAE0D,KAAOS,EAAOT,KAEhC,CACX,CACEA,GAAIS,EAAOT,GACX4nB,KAAMU,IAKZ,OAAOD,CAAU,GACjB,EAGJK,gBAAiBA,KAAM,IAAAhpB,EAAAipB,EAKrB,OAF6B,OAFVjpB,EACa,OADbipB,EACjBloB,EAAOlB,UAAUqpB,eAAaD,EAC9BrpB,EAAMyB,QAAQ6nB,eAAalpB,EACC,SAA5Be,EAAO8mB,kBACc,OAAS,KAAK,EAGvCQ,oBAAsBF,IAAoB,IAAAvd,EAAA6K,EACxC,MAAM0T,EAAqBpoB,EAAOioB,kBAC5BI,EAAWroB,EAAOsoB,cAExB,OAAKD,KAKHA,IAAaD,GACsB,OADJve,EAC9BhL,EAAMyB,QAAQioB,wBAAoB1e,GAClCud,GAAuC,OAAlC1S,EAAG7V,EAAMyB,QAAQkoB,qBAAiB9T,KAItB,SAAb2T,EAAsB,MAAQ,QAV5BD,CAUkC,EAG7CK,WAAYA,KAAM,IAAA7e,EAAAoL,EAChB,OACiCpL,OAA/BA,EAAC5J,EAAOlB,UAAU4pB,gBAAa9e,KACH,OADWoL,EACtCnW,EAAMyB,QAAQooB,gBAAa1T,MAC1BhV,EAAOV,UAAU,EAIvByoB,gBAAiBA,KAAM,IAAAve,EAAAuL,EACrB,OAE+BvL,OAF/BA,EACkC,OADlCuL,EACE/U,EAAOlB,UAAU6pB,iBAAe5T,EAChClW,EAAMyB,QAAQqoB,iBAAenf,IAC3BxJ,EAAOV,UAAU,EAIvBgpB,YAAaA,KAAM,IAAAM,EACjB,MAAMC,EAEI,OAFMD,EAAG/pB,EAChB2D,WACA6jB,cAAO,EAFSuC,EAEP3lB,MAAKpH,GAAKA,EAAE0D,KAAOS,EAAOT,KAEtC,QAAQspB,IAAqBA,EAAW1B,KAAO,OAAS,MAAK,EAG/D2B,aAAcA,KAAA,IAAAC,EAAAC,EAAA,OACgD,OADhDD,EACY,OADZC,EACZnqB,EAAM2D,WAAW6jB,cAAO,EAAxB2C,EAA0B5f,WAAUvN,GAAKA,EAAE0D,KAAOS,EAAOT,MAAGwpB,GAAK,CAAC,EAEpEE,aAAcA,KAEZpqB,EAAM2oB,YAAW7rB,GACZ,MAAHA,GAAAA,EAAKmB,OAASnB,EAAIuH,QAAOrH,GAAKA,EAAE0D,KAAOS,EAAOT,KAAM,IACrD,EAGH2pB,wBAAyBA,KACvB,MAAMC,EAAUnpB,EAAOyoB,aAEvB,OAAQle,IACD4e,IACc,MAAjB5e,EAAUC,SAAVD,EAAUC,UACZxK,MAAAA,EAAOknB,eAAPlnB,EAAOknB,mBACLznB,IACAO,EAAO+nB,oBAC2B,MAA9BlpB,EAAMyB,QAAQkmB,sBAAgB,EAA9B3nB,EAAMyB,QAAQkmB,iBAAmBjc,KAEtC,CACF,IAKPnI,YACEvD,IAEO,CACL2oB,WAAYnsB,GAAWwD,MAAAA,EAAMyB,QAAQimB,qBAAd1nB,EAAAA,EAAMyB,QAAQimB,gBAAkBlrB,GACvD+tB,aAAc9c,IAAgB,IAAA+c,EAAAva,EAC5BjQ,EAAM2oB,WAAWlb,EAAe,GAAgC+c,OAA9BA,SAAAva,EAAGjQ,EAAM2N,qBAANsC,EAAoBuX,SAAOgD,EAAI,GAAG,EAEzEC,qBAAsBA,IAAMzqB,EAAMmc,qBAClClL,kBAAmBA,MACZjR,EAAM0qB,oBAAsB1qB,EAAMyB,QAAQwP,oBAC7CjR,EAAM0qB,mBAAqB1qB,EAAMyB,QAAQwP,kBAAkBjR,IAGzDA,EAAMyB,QAAQkpB,gBAAkB3qB,EAAM0qB,mBACjC1qB,EAAMyqB,uBAGRzqB,EAAM0qB,yBC7TRE,EAA2B,CACtC3hB,gBAAkBC,IACT,CACL2hB,iBAAkB,CAAE,KACjB3hB,IAIPS,kBACE3J,IAEO,CACL8qB,yBAA0BpuB,EAAiB,mBAAoBsD,KAInED,aAAcA,CACZoB,EACAnB,KAEO,CACL+qB,iBAAkB3V,IACZjU,EAAO6pB,cACThrB,EAAMirB,qBAAoBnuB,IAAQ,IAC7BA,EACH,CAACqE,EAAOT,IAAU,MAAL0U,EAAAA,GAAUjU,EAAO0G,kBAElC,EAEFA,aAAcA,KAAM,IAAA6O,EAAAC,EAClB,OAAqD,OAArDD,EAAOC,OAAPA,EAAO3W,EAAM2D,WAAWknB,uBAAjBlU,EAAAA,EAAoCxV,EAAOT,MAAGgW,CAAQ,EAG/DsU,WAAYA,KAAM,IAAAjgB,EAAAC,EAChB,OACgCD,OAA9BA,EAAC5J,EAAOlB,UAAUirB,eAAYngB,KACHC,OADWA,EACrChL,EAAMyB,QAAQypB,eAAYlgB,EAAS,EAGxCmgB,2BAA4BA,IAClBzf,IACNvK,MAAAA,EAAO4pB,kBAAP5pB,EAAO4pB,iBACHrf,EAAiBiZ,OAA4BC,QAChD,IAMTxT,UAAWA,CACTf,EACArQ,KAEO,CACL2hB,oBAAqBzjB,GACnB,IAAM,CAACmS,EAAI+a,cAAeprB,EAAM2D,WAAWknB,oBAC3CQ,GACSA,EAAMhnB,QAAOuY,GAAQA,EAAKzb,OAAO0G,kBAE1C,CACElL,IAC2C,0BAC3C8B,MAAOA,KAAA,IAAA+C,EAAA,OAA4BA,OAA5BA,EAAMxB,EAAMyB,QAAQC,UAAQF,EAAIxB,EAAMyB,QAAQqgB,SAAS,IAGlEwJ,gBAAiBptB,GACf,IAAM,CACJmS,EAAI0R,sBACJ1R,EAAIqR,wBACJrR,EAAI2R,0BAEN,CAACne,EAAMkD,EAAQjD,IAAU,IAAID,KAASkD,KAAWjD,IACjD,CACEnH,KAAK8H,EACLhG,MAAOA,KAAA,IAAAwD,EAAA,OAA4BA,OAA5BA,EAAMjC,EAAMyB,QAAQC,UAAQO,EAAIjC,EAAMyB,QAAQqgB,SAAS,MAMtEve,YACEvD,IAEA,MAAMurB,EAA2BA,CAC/B5uB,EACA6uB,IAEOttB,GACL,IAAM,CACJstB,IACAA,IACGnnB,QAAOrH,GAAKA,EAAE6K,iBACdzE,KAAIpG,GAAKA,EAAE0D,KACXsH,KAAK,QAEV5G,GACSA,EAAQiD,QAAOrH,SAAKA,EAAE6K,oBAAF7K,EAAE6K,kBAE/B,CACElL,MACA8B,MAAOA,KAAA,IAAAqG,EAAA,OAA4BA,OAA5BA,EAAM9E,EAAMyB,QAAQC,UAAQoD,EAAI9E,EAAMyB,QAAQE,YAAY,IAKvE,MAAO,CACL8pB,sBAAuBF,EACrB,yBACA,IAAMvrB,EAAM0rB,sBAEdhoB,sBAAuB6nB,EACrB,yBACA,IAAMvrB,EAAMmY,sBAEd9N,0BAA2BkhB,EACzB,6BACA,IAAMvrB,EAAMuiB,uBAEdjY,2BAA4BihB,EAC1B,8BACA,IAAMvrB,EAAMwiB,wBAEdmJ,4BAA6BJ,EAC3B,+BACA,IAAMvrB,EAAMyiB,yBAGdwI,oBAAqBzuB,GACnBwD,MAAAA,EAAMyB,QAAQqpB,8BAAd9qB,EAAAA,EAAMyB,QAAQqpB,yBAA2BtuB,GAE3CovB,sBAAuBne,IAAgB,IAAAC,EACrC1N,EAAMirB,oBACJxd,EAAe,CAAA,EAAwC,OAAtCC,EAAG1N,EAAM2N,aAAakd,kBAAgBnd,EAAI,CAC7D,EAAC,EAGHme,wBAAyBzW,IAAS,IAAA0W,EAChC1W,EAAa0W,OAARA,EAAG1W,GAAK0W,GAAK9rB,EAAM+rB,yBAExB/rB,EAAMirB,oBACJjrB,EAAMmY,oBAAoBhW,QACxB,CAACC,EAAKjB,KAAY,IACbiB,EACH,CAACjB,EAAOT,IAAM0U,KAASjU,MAAAA,EAAO6pB,YAAP7pB,EAAO6pB,iBAEhC,CACF,GACD,EAGHe,uBAAwBA,KACrB/rB,EAAMmY,oBAAoBtZ,MAAKsC,KAA8B,MAAnBA,EAAO0G,cAAP1G,EAAO0G,kBAEpDmkB,wBAAyBA,IACvBhsB,EAAMmY,oBAAoBtZ,MAAKsC,GAA6B,MAAnBA,EAAO0G,kBAAY,EAAnB1G,EAAO0G,iBAElDokB,qCAAsCA,IAC5BvgB,IAAe,IAAA8Z,EACrBxlB,EAAM6rB,wBACJrG,OAD2BA,EACzB9Z,EAAiBiZ,aAAnBa,EAAAA,EAAgDZ,QACjD,EAGN,GChLCsH,EAAW,CACf5oB,EACAsnB,EACA1N,EACAqD,EACA/L,EACA+S,EACAjN,EACAtL,EACA8O,EACA4E,EACA3Z,GCpCK,SAAS4T,EACd3c,EACAqQ,EACAlP,EACAgD,GAEA,MAGMyY,EAAgC,CACpClc,GAAK,GAAE2P,EAAI3P,MAAMS,EAAOT,KACxB2P,MACAlP,SACAuR,SAAUA,IAAMrC,EAAIqC,SAASvO,GAC7BgoB,YARqBC,KAAA,IAAAC,EAAA,OACNA,OADMA,EACrBzP,EAAKlK,YAAU2Z,EAAIrsB,EAAMyB,QAAQ6qB,mBAAmB,EAQpDjpB,WAAYnF,GACV,IAAM,CAAC8B,EAAOmB,EAAQkP,EAAKuM,KAC3B,CAAC5c,EAAOmB,EAAQkP,EAAKuM,KAAU,CAC7B5c,QACAmB,SACAkP,MACAuM,KAAMA,EACNlK,SAAUkK,EAAKlK,SACfyZ,YAAavP,EAAKuP,eAEpB,CACExvB,KAAK8H,EACLhG,MAAOA,IAAMuB,EAAMyB,QAAQC,YAiBjC,OAZA1B,EAAMkC,UAAUrE,SAAQwE,IACtBC,OAAOC,OACLqa,EACAva,MAAAA,EAAQsa,gBAARta,EAAAA,EAAQsa,WACNC,EACAzb,EACAkP,EACArQ,GAEH,GACA,CAAE,GAEE4c,CACT,OC1CaxL,EAAYA,CACvBpR,EACAU,EACAgc,EACA6P,EACArsB,EACA8R,EACAwa,KAEA,IAAInc,EAAsB,CACxB3P,KACA3B,MAAOwtB,EACP7P,WACAxc,QACAssB,WACAC,aAAc,CAAE,EAChBC,mBAAoB,CAAE,EACtBha,SAAUvO,IACR,GAAIkM,EAAIoc,aAAahQ,eAAetY,GAClC,OAAOkM,EAAIoc,aAAatoB,GAG1B,MAAMhD,EAASnB,EAAMwL,UAAUrH,GAE/B,OAAW,MAANhD,GAAAA,EAAQV,YAIb4P,EAAIoc,aAAatoB,GAAYhD,EAAOV,WAClC4P,EAAIqM,SACJ6P,GAGKlc,EAAIoc,aAAatoB,SATxB,CASiC,EAEnCwoB,gBAAiBxoB,IACf,GAAIkM,EAAIqc,mBAAmBjQ,eAAetY,GACxC,OAAOkM,EAAIqc,mBAAmBvoB,GAGhC,MAAMhD,EAASnB,EAAMwL,UAAUrH,GAE/B,OAAW,MAANhD,GAAAA,EAAQV,WAIRU,EAAOlB,UAAU0sB,iBAKtBtc,EAAIqc,mBAAmBvoB,GAAYhD,EAAOlB,UAAU0sB,gBAClDtc,EAAIqM,SACJ6P,GAGKlc,EAAIqc,mBAAmBvoB,KAT5BkM,EAAIqc,mBAAmBvoB,GAAY,CAACkM,EAAIqC,SAASvO,IAC1CkM,EAAIqc,mBAAmBvoB,SANhC,CAcuC,EAEzCgoB,YAAahoB,IAAQ,IAAAkO,EAAA,OACG,OADHA,EACnBhC,EAAIqC,SAASvO,IAASkO,EAAIrS,EAAMyB,QAAQ6qB,mBAAmB,EAC7Dta,QAASA,MAAAA,EAAAA,EAAW,GACpB4a,YAAaA,IAAMrvB,EAAU8S,EAAI2B,SAAShV,GAAKA,EAAEgV,UACjD6a,aAAcA,IAAOxc,EAAImc,SAAWxsB,EAAMylB,OAAOpV,EAAImc,eAAY5rB,EACjEksB,cAAeA,KACb,IAAIC,EAA2B,GAC3BC,EAAa3c,EACjB,OAAa,CACX,MAAM4c,EAAYD,EAAWH,eAC7B,IAAKI,EAAW,MAChBF,EAAWhvB,KAAKkvB,GAChBD,EAAaC,CACf,CACA,OAAOF,EAAW3nB,SAAS,EAE7BgmB,YAAaltB,GACX,IAAM,CAAC8B,EAAMmY,uBACbnW,GACSA,EAAYoB,KAAIjC,GACdwb,EAAW3c,EAAOqQ,EAAmBlP,EAAQA,EAAOT,OAG/D,CACE/D,KAAK8H,EACLhG,MAAOA,KAAA,IAAA+C,EAAA,OAA4BA,OAA5BA,EAAMxB,EAAMyB,QAAQC,UAAQF,EAAIxB,EAAMyB,QAAQqgB,SAAS,IAIlExM,uBAAwBpX,GACtB,IAAM,CAACmS,EAAI+a,iBACXxJ,GACSA,EAASzf,QAAO,CAAC+qB,EAAKtQ,KAC3BsQ,EAAItQ,EAAKzb,OAAOT,IAAMkc,EACfsQ,IACN,CAA0C,IAE/C,CACEvwB,IAC2C,4BAC3C8B,MAAOA,KAAA,IAAAwD,EAAA,OAA4BA,OAA5BA,EAAMjC,EAAMyB,QAAQC,UAAQO,EAAIjC,EAAMyB,QAAQqgB,SAAS,KAKpE,IAAK,IAAIlC,EAAI,EAAGA,EAAI5f,EAAMkC,UAAUjE,OAAQ2hB,IAAK,CAC/C,MAAMvd,EAAUrC,EAAMkC,UAAU0d,GAChCtd,OAAOC,OAAO8N,QAAKhO,GAAAA,MAAAA,EAAS+O,iBAAT/O,EAAS+O,UAAYf,EAAKrQ,GAC/C,CAEA,OAAOqQ,CAAG,ECjIL,SAAS8c,EACd7M,EACA8M,EACAptB,GAEA,OAAIA,EAAMyB,QAAQqT,mBAOb,SACLuY,EACAC,EACAttB,GACiB,IAAAutB,EACjB,MAAMC,EAAoC,GACpCC,EAAkD,CAAA,EAClD9lB,EAA8C,OAAtC4lB,EAAGvtB,EAAMyB,QAAQsT,uBAAqBwY,EAAI,IAElDG,EAAoB,SAACL,EAA4BntB,QAAK,IAALA,IAAAA,EAAQ,GAC7D,MAAMogB,EAAqB,GAG3B,IAAK,IAAIV,EAAI,EAAGA,EAAIyN,EAAapvB,OAAQ2hB,IAAK,CAAA,IAAA/N,EAC5C,IAAIxB,EAAMgd,EAAazN,GAEvB,MAAM+N,EAASvc,EACbpR,EACAqQ,EAAI3P,GACJ2P,EAAIqM,SACJrM,EAAItR,MACJsR,EAAInQ,WACJU,EACAyP,EAAImc,UAIN,GAFAmB,EAAOjZ,cAAgBrE,EAAIqE,cAEZ,OAAX7C,EAAAxB,EAAI2B,UAAJH,EAAa5T,QAAUiC,EAAQyH,EAAU,CAI3C,GAHAgmB,EAAO3b,QAAU0b,EAAkBrd,EAAI2B,QAAS9R,EAAQ,GACxDmQ,EAAMsd,EAEFL,EAAUjd,KAASsd,EAAO3b,QAAQ/T,OAAQ,CAC5CqiB,EAAKviB,KAAKsS,GACVod,EAAoBpd,EAAI3P,IAAM2P,EAC9Bod,EAAoB7N,GAAKvP,EACzB,QACF,CAEA,GAAIid,EAAUjd,IAAQsd,EAAO3b,QAAQ/T,OAAQ,CAC3CqiB,EAAKviB,KAAKsS,GACVod,EAAoBpd,EAAI3P,IAAM2P,EAC9Bod,EAAoB7N,GAAKvP,EACzB,QACF,CACF,MACEA,EAAMsd,EACFL,EAAUjd,KACZiQ,EAAKviB,KAAKsS,GACVod,EAAoBpd,EAAI3P,IAAM2P,EAC9Bod,EAAoB7N,GAAKvP,EAG/B,CAEA,OAAOiQ,GAGT,MAAO,CACLA,KAAMoN,EAAkBL,GACxBjd,SAAUod,EACV1c,SAAU2c,EAEd,CApEWG,CAAwBtN,EAAM8M,EAAeptB,GAsEjD,SACLqtB,EACAC,EACAttB,GACiB,IAAA6tB,EACjB,MAAML,EAAoC,GACpCC,EAAkD,CAAA,EAClD9lB,EAA8C,OAAtCkmB,EAAG7tB,EAAMyB,QAAQsT,uBAAqB8Y,EAAI,IAGlDH,EAAoB,SAACL,EAA4BntB,QAAK,IAALA,IAAAA,EAAQ,GAG7D,MAAMogB,EAAqB,GAG3B,IAAK,IAAIV,EAAI,EAAGA,EAAIyN,EAAapvB,OAAQ2hB,IAAK,CAC5C,IAAIvP,EAAMgd,EAAazN,GAIvB,GAFa0N,EAAUjd,GAEb,CAAA,IAAAwV,EACR,GAAe,OAAXA,EAAAxV,EAAI2B,UAAJ6T,EAAa5nB,QAAUiC,EAAQyH,EAAU,CAC3C,MAAMgmB,EAASvc,EACbpR,EACAqQ,EAAI3P,GACJ2P,EAAIqM,SACJrM,EAAItR,MACJsR,EAAInQ,WACJU,EACAyP,EAAImc,UAENmB,EAAO3b,QAAU0b,EAAkBrd,EAAI2B,QAAS9R,EAAQ,GACxDmQ,EAAMsd,CACR,CAEArN,EAAKviB,KAAKsS,GACVmd,EAAoBzvB,KAAKsS,GACzBod,EAAoBpd,EAAI3P,IAAM2P,CAChC,CACF,CAEA,OAAOiQ,GAGT,MAAO,CACLA,KAAMoN,EAAkBL,GACxBjd,SAAUod,EACV1c,SAAU2c,EAEd,CArHSK,CAAuBxN,EAAM8M,EAAeptB,EACrD,CCsBO,SAAS+tB,EAAkClK,GAChD,MAAMmK,EAA6B,GAE7BC,EAAa5d,IAAoB,IAAAwB,EACrCmc,EAAajwB,KAAKsS,GAEdwB,OAAAA,EAAAxB,EAAI2B,UAAJH,EAAa5T,QAAUoS,EAAIO,iBAC7BP,EAAI2B,QAAQnU,QAAQowB,EACtB,EAKF,OAFApK,EAASvD,KAAKziB,QAAQowB,GAEf,CACL3N,KAAM0N,EACN5d,SAAUyT,EAASzT,SACnBU,SAAU+S,EAAS/S,SAEvB,uPCgBO,WAGL,MAAO,CACLod,SAAUA,CAACA,EAAU/sB,IACQ,mBAAb+sB,EACT,IACI/sB,EACHV,WAAYytB,GAEd,IACK/sB,EACHX,YAAa0tB,GAGrBC,QAAShtB,GAAUA,EACnBitB,MAAOjtB,GAAUA,EAErB,8BLyBO,SACLM,GACc,IAAA4sB,GACV5sB,EAAQC,UAAYD,EAAQoe,aAC9BlgB,QAAQC,KAAK,8BAGf,IAAII,EAAQ,CACVkC,UAAW,IAAIgqB,KAAczqB,EAAQyqB,UAAY,KAGnD,MAAMoC,EAAiBtuB,EAAMkC,UAAUC,QAAO,CAACC,EAAKC,IAC3CC,OAAOC,OAAOH,EAA8B,MAAzBC,EAAQsH,uBAAiB,EAAzBtH,EAAQsH,kBAAoB3J,KACrD,CAAE,GAeL,IAAI2N,EAAe,IAEO0gB,OAAxBA,EAAI5sB,EAAQkM,cAAY0gB,EAAI,IAG9BruB,EAAMkC,UAAUrE,SAAQwE,IAAW,IAAAksB,EACjC5gB,EAAsD4gB,OAA1CA,EAAGlsB,MAAAA,EAAQ4G,qBAAR5G,EAAAA,EAAQ4G,gBAAkB0E,IAAa4gB,EAAI5gB,CAAY,IAGxE,MAAM0B,EAAyB,GAC/B,IAAImf,GAAgB,EAEpB,MAAMC,EAAoC,CACxCvsB,UAAWlC,EAAMkC,UACjBT,QAAS,IACJ6sB,KACA7sB,GAELkM,eACAgC,OAAQ+e,IACNrf,EAAOtR,KAAK2wB,GAEPF,IACHA,GAAgB,EAIhBG,QAAQC,UACLC,MAAK,KACJ,KAAOxf,EAAOpR,QACZoR,EAAOsO,OAAPtO,GAEFmf,GAAgB,CAAK,IAEtBM,OAAMC,GACLC,YAAW,KACT,MAAMD,CAAK,MAGnB,EAEFE,MAAOA,KACLjvB,EAAMnD,SAASmD,EAAM2N,aAAa,EAEpCuhB,WAAY1yB,IACV,MAAM2yB,EAAa5yB,EAAiBC,EAASwD,EAAMyB,SACnDzB,EAAMyB,QA3DYA,IAChBzB,EAAMyB,QAAQ2tB,aACTpvB,EAAMyB,QAAQ2tB,aAAad,EAAgB7sB,GAG7C,IACF6sB,KACA7sB,GAoDa2tB,CAAaD,EAG5B,EAGHxrB,SAAUA,IACD3D,EAAMyB,QAAQyH,MAGvBrM,SAAWL,IACTwD,MAAAA,EAAMyB,QAAQ4tB,eAAdrvB,EAAMyB,QAAQ4tB,cAAgB7yB,EAAQ,EAGxC8yB,UAAWA,CAACjf,EAAYtR,EAAeoB,KAAmB,IAAAyR,EAAA,OACZA,OADYA,EACxD5R,MAAAA,EAAMyB,QAAQ8tB,cAAdvvB,EAAAA,EAAMyB,QAAQ8tB,SAAWlf,EAAKtR,EAAOoB,IAAOyR,EAC3C,GAAEzR,EAAS,CAACA,EAAOO,GAAI3B,GAAOiJ,KAAK,KAAOjJ,GAAO,EAEpDsW,gBAAiBA,KACVrV,EAAMwvB,mBACTxvB,EAAMwvB,iBAAmBxvB,EAAMyB,QAAQ4T,gBAAgBrV,IAGlDA,EAAMwvB,oBAMf7e,YAAaA,IACJ3Q,EAAMkgB,wBAEfuF,OAAS/kB,IACP,MAAM2P,EAAMrQ,EAAM2Q,cAAcG,SAASpQ,GAEzC,IAAK2P,EAIH,MAAM,IAAInP,MAGZ,OAAOmP,CAAG,EAEZ9P,qBAAsBrC,GACpB,IAAM,CAAC8B,EAAMyB,QAAQguB,iBACrBA,IAAiB,IAAAC,EAKf,OAJAD,SAAaC,EAAID,GAAaC,EAAI,CAAA,EAI3B,CACL7uB,OAAQ2Z,IACN,MAAMla,EAAoBka,EAAM3Z,OAAOM,OACpClB,UAEH,OAAIK,EAAkBE,YACbF,EAAkBE,YAGvBF,EAAkBG,WACbH,EAAkBI,GAGpB,IAAI,EAGbkc,KAAMpC,IAAK,IAAAmV,EAAAC,EAAA,OAA0C,OAA1CD,EAAIC,OAAJA,EAAIpV,EAAM2R,gBAA4B,MAAlCyD,EAA0Bjd,cAA1Bid,EAAAA,EAA0Bjd,YAAYgd,EAAI,IAAI,KAC1D3vB,EAAMkC,UAAUC,QAAO,CAACC,EAAKC,IACvBC,OAAOC,OAAOH,QAAKC,EAAQ2G,2BAAR3G,EAAQ2G,wBACjC,OACAymB,EACJ,GAEH,CACEhxB,MAAOA,KAAA,IAAA+C,EAAA,OAA4BA,OAA5BA,EAAMxB,EAAMyB,QAAQC,UAAQF,EAAIxB,EAAMyB,QAAQE,YAAY,EACjEhF,KAAK8H,IAITorB,eAAgBA,IAAM7vB,EAAMyB,QAAQL,QAEpCqC,cAAevF,GACb,IAAM,CAAC8B,EAAM6vB,oBACbC,IACE,MAAMC,EAAiB,SACrBD,EACA3vB,EACAD,GAEA,YAFK,IAALA,IAAAA,EAAQ,GAED4vB,EAAW1sB,KAAInD,IACpB,MAAMkB,EAASpB,EAAaC,EAAOC,EAAWC,EAAOC,GAE/C6vB,EAAoB/vB,EAS1B,OAJAkB,EAAOC,QAAU4uB,EAAkB5uB,QAC/B2uB,EAAeC,EAAkB5uB,QAASD,EAAQjB,EAAQ,GAC1D,GAEGiB,CAAM,KAIjB,OAAO4uB,EAAeD,EAAW,GAEnC,CACEnzB,KAAK8H,EACLhG,MAAOA,KAAA,IAAAwD,EAAA,OAA4BA,OAA5BA,EAAMjC,EAAMyB,QAAQC,UAAQO,EAAIjC,EAAMyB,QAAQE,YAAY,IAIrE+pB,kBAAmBxtB,GACjB,IAAM,CAAC8B,EAAMyD,mBACbM,GACSA,EAAWxC,SAAQJ,GACjBA,EAAOE,oBAGlB,CACE1E,KAAK8H,EACLhG,MAAOA,KAAA,IAAAqG,EAAA,OAA4BA,OAA5BA,EAAM9E,EAAMyB,QAAQC,UAAQoD,EAAI9E,EAAMyB,QAAQE,YAAY,IAIrEsuB,uBAAwB/xB,GACtB,IAAM,CAAC8B,EAAM0rB,uBACbwE,GACSA,EAAY/tB,QAAO,CAAC+qB,EAAK/rB,KAC9B+rB,EAAI/rB,EAAOT,IAAMS,EACV+rB,IACN,CAA4C,IAEjD,CACEvwB,KAAK8H,EACLhG,MAAOA,KAAA,IAAAwG,EAAA,OAA4BA,OAA5BA,EAAMjF,EAAMyB,QAAQC,UAAQuD,EAAIjF,EAAMyB,QAAQE,YAAY,IAIrEwW,kBAAmBja,GACjB,IAAM,CAAC8B,EAAMyD,gBAAiBzD,EAAM6B,wBACpC,CAACkC,EAAYjC,IAEJA,EADWiC,EAAWxC,SAAQJ,GAAUA,EAAOS,qBAGxD,CACEjF,KAAK8H,EACLhG,MAAOA,KAAA,IAAA4G,EAAA,OAA4BA,OAA5BA,EAAMrF,EAAMyB,QAAQC,UAAQ2D,EAAIrF,EAAMyB,QAAQE,YAAY,IAIrE6J,UAAWrH,GACMnE,EAAMiwB,yBAAyB9rB,IAgBlD,OANA7B,OAAOC,OAAOvC,EAAOyuB,GAErBzuB,EAAMkC,UAAUrE,SAAQwE,GACfC,OAAOC,OAAOvC,EAA0B,MAAnBqC,EAAQkB,iBAAW,EAAnBlB,EAAQkB,YAAcvD,MAG7CA,CACT,4GMjWO,WAGL,OAAOA,GACL9B,GACE,IAAM,CAAC8B,EAAMyB,QAAQ0uB,QAEnBA,IAMA,MAAMtM,EAA4B,CAChCvD,KAAM,GACNlQ,SAAU,GACVU,SAAU,CAAC,GAGPsf,EAAa,SACjBC,EACAnwB,EACA+sB,QADK,IAAL/sB,IAAAA,EAAQ,GAGR,MAAMogB,EAAO,GAEb,IAAK,IAAIV,EAAI,EAAGA,EAAIyQ,EAAapyB,OAAQ2hB,IAAK,CAS5C,MAAMvP,EAAMe,EACVpR,EACAA,EAAMsvB,UAAUe,EAAazQ,GAAKA,EAAGqN,GACrCoD,EAAazQ,GACbA,EACA1f,OACAU,EACS,MAATqsB,OAAS,EAATA,EAAWvsB,IAWiB,IAAA4vB,EAA9B,GAPAzM,EAASzT,SAASrS,KAAKsS,GAEvBwT,EAAS/S,SAAST,EAAI3P,IAAM2P,EAE5BiQ,EAAKviB,KAAKsS,GAGNrQ,EAAMyB,QAAQ8uB,WAChBlgB,EAAImgB,gBAAkBxwB,EAAMyB,QAAQ8uB,WAClCF,EAAazQ,GACbA,GAIE0Q,OAAJA,EAAIjgB,EAAImgB,kBAAJF,EAAqBryB,SACvBoS,EAAI2B,QAAUoe,EAAW/f,EAAImgB,gBAAiBtwB,EAAQ,EAAGmQ,GAG/D,CAEA,OAAOiQ,GAKT,OAFAuD,EAASvD,KAAO8P,EAAWD,GAEpBtM,CAAQ,GAEjB,CACElnB,KAAK8H,EACLhG,MAAOA,KAAA,IAAA+C,EAAA,OAA4BA,OAA5BA,EAAMxB,EAAMyB,QAAQC,UAAQF,EAAIxB,EAAMyB,QAAQoe,UAAU,EAC/D5gB,SAAUA,KACRe,EAAMme,qBAAqB,GAIrC,wBFlFO,WAGL,OAAOne,GACL9B,GACE,IAAM,CACJ8B,EAAM2D,WAAWsL,SACjBjP,EAAMgR,yBACNhR,EAAMyB,QAAQ0N,wBAEhB,CAACF,EAAU4U,EAAU1U,KAEhB0U,EAASvD,KAAKriB,SACD,IAAbgR,IAAsB3M,OAAOoO,KAAKzB,MAAAA,EAAAA,EAAY,CAAE,GAAEhR,OAE5C4lB,EAGJ1U,EAKE4e,EAAWlK,GAHTA,GAKX,CACElnB,KAAK8H,EACLhG,MAAOA,KAAA,IAAA+C,EAAA,OAA4BA,OAA5BA,EAAMxB,EAAMyB,QAAQC,UAAQF,EAAIxB,EAAMyB,QAAQoe,UAAU,GAGvE,2BG9BO,WAIL,MAAO,CAAC7f,EAAOmE,IACbjG,GACE,KAAA,IAAAuyB,EAAA,MAAM,QAAAA,EAACzwB,EAAMwL,UAAUrH,WAAhBssB,EAA2BlZ,qBAAqB,IACvDmZ,IAAmB,IAAAC,EACjB,IAAKD,EAAiB,OAEtB,MAAME,SAAUD,EACdD,EAAgBtgB,SAAS,WAAzBugB,EAA6BhE,gBAAgBxoB,GAE/C,QAA0B,IAAfysB,EACT,OAGF,IAAIC,EAAkC,CAACD,EAAYA,GAEnD,IAAK,IAAIhR,EAAI,EAAGA,EAAI8Q,EAAgBtgB,SAASnS,OAAQ2hB,IAAK,CACxD,MAAMnP,EACJigB,EAAgBtgB,SAASwP,GAAI+M,gBAAwBxoB,GAEvD,IAAK,IAAI2sB,EAAI,EAAGA,EAAIrgB,EAAOxS,OAAQ6yB,IAAK,CACtC,MAAM1b,EAAQ3E,EAAOqgB,GAEjB1b,EAAQyb,EAAoB,GAC9BA,EAAoB,GAAKzb,EAChBA,EAAQyb,EAAoB,KACrCA,EAAoB,GAAKzb,EAE7B,CACF,CAEA,OAAOyb,CAAmB,GAE5B,CACEl0B,KACE8H,EAEFhG,MAAOA,KAAA,IAAA+C,EAAA,OAA4BA,OAA5BA,EAAMxB,EAAMyB,QAAQC,UAAQF,EAAIxB,EAAMyB,QAAQoe,UAAU,EAC/D5gB,SAAUA,QAGlB,uBC3CO,WAIL,MAAO,CAACe,EAAOmE,IACbjG,GACE,IAAM,CACJ8B,EAAMwX,yBACNxX,EAAM2D,WAAW+Q,cACjB1U,EAAM2D,WAAWgR,aACjB3U,EAAMwY,yBAER,CAACuY,EAAarc,EAAeC,KAC3B,IACGoc,EAAYzQ,KAAKriB,SACH,MAAbyW,IAAAA,EAAezW,UAAW0W,EAE5B,OAAOoc,EAGT,MAAMC,EAAgB,IACjBtc,EAActR,KAAIpG,GAAKA,EAAE0D,KAAI2D,QAAOrH,GAAKA,IAAMmH,IAClDwQ,EAAe,kBAAe/T,GAC9ByD,OAAOC,SAYT,OAAO6oB,EAAW4D,EAAYzQ,MAVNjQ,IAEtB,IAAK,IAAIuP,EAAI,EAAGA,EAAIoR,EAAc/yB,OAAQ2hB,IACxC,IAA6C,IAAzCvP,EAAIqE,cAAcsc,EAAcpR,IAClC,OAAO,EAGX,OAAO,CAAI,GAGuC5f,EAAM,GAE5D,CACErD,KACE8H,EAEFhG,MAAOA,KAAA,IAAA+C,EAAA,OAA4BA,OAA5BA,EAAMxB,EAAMyB,QAAQC,UAAQF,EAAIxB,EAAMyB,QAAQoe,UAAU,EAC/D5gB,SAAUA,QAGlB,2BC9CO,WAIL,MAAO,CAACe,EAAOmE,IACbjG,GACE,KAAA,IAAAuyB,EAAA,MAAM,QAAAA,EAACzwB,EAAMwL,UAAUrH,WAAhBssB,EAA2BlZ,qBAAqB,IACvDmZ,IACE,IAAKA,EAAiB,OAAO,IAAI/Y,IAEjC,IAAIsZ,EAAsB,IAAItZ,IAE9B,IAAK,IAAIiI,EAAI,EAAGA,EAAI8Q,EAAgBtgB,SAASnS,OAAQ2hB,IAAK,CACxD,MAAMnP,EACJigB,EAAgBtgB,SAASwP,GAAI+M,gBAAwBxoB,GAEvD,IAAK,IAAI2sB,EAAI,EAAGA,EAAIrgB,EAAOxS,OAAQ6yB,IAAK,CACtC,MAAM1b,EAAQ3E,EAAOqgB,GAEe,IAAAI,EAApC,GAAID,EAAoBE,IAAI/b,GAC1B6b,EAAoBG,IAClBhc,GAC+B8b,OAA/BA,EAACD,EAAoBI,IAAIjc,IAAM8b,EAAI,GAAK,QAG1CD,EAAoBG,IAAIhc,EAAO,EAEnC,CACF,CAEA,OAAO6b,CAAmB,GAE5B,CACEt0B,KACE8H,EAEFhG,MAAOA,KAAA,IAAA+C,EAAA,OAA4BA,OAA5BA,EAAMxB,EAAMyB,QAAQC,UAAQF,EAAIxB,EAAMyB,QAAQoe,UAAU,EAC/D5gB,SAAUA,QAGlB,wBCtCO,WAGL,OAAOe,GACL9B,GACE,IAAM,CACJ8B,EAAMwX,yBACNxX,EAAM2D,WAAW+Q,cACjB1U,EAAM2D,WAAWgR,gBAEnB,CAACkP,EAAUnP,EAAeC,KACxB,IACGkP,EAASvD,KAAKriB,SACA,MAAbyW,IAAAA,EAAezW,UAAW0W,EAC5B,CACA,IAAK,IAAIiL,EAAI,EAAGA,EAAIiE,EAASzT,SAASnS,OAAQ2hB,IAC5CiE,EAASzT,SAASwP,GAAIlL,cAAgB,CAAA,EACtCmP,EAASzT,SAASwP,GAAI9H,kBAAoB,CAAA,EAE5C,OAAO+L,CACT,CAEA,MAAMyN,EAAuD,GACvDC,EAAuD,UAE3D7c,EAAAA,EAAiB,IAAI7W,SAAQb,IAAK,IAAAw0B,EAClC,MAAMrwB,EAASnB,EAAMwL,UAAUxO,EAAE0D,IAEjC,IAAKS,EACH,OAGF,MAAMsT,EAAWtT,EAAOsU,cAEnBhB,GASL6c,EAAsBvzB,KAAK,CACzB2C,GAAI1D,EAAE0D,GACN+T,WACA+O,qBAAagO,QAAE/c,EAASX,0BAATW,EAASX,mBAAqB9W,EAAEoY,QAAMoc,EAAIx0B,EAAEoY,OAC3D,IAGJ,MAAM4b,EAAgBtc,EAActR,KAAIpG,GAAKA,EAAE0D,KAEzCsU,EAAiBhV,EAAMgY,oBAEvByZ,EAA4BzxB,EAC/BmY,oBACA9T,QAAOlD,GAAUA,EAAO8U,uBAoB3B,IAAIyb,EACAC,EAlBFhd,GACAK,GACAyc,EAA0BxzB,SAE1B+yB,EAAcjzB,KAAK,cAEnB0zB,EAA0B5zB,SAAQsD,IAAU,IAAAywB,EAC1CL,EAAsBxzB,KAAK,CACzB2C,GAAIS,EAAOT,GACX+T,SAAUO,EACVwO,cACmD,OADtCoO,EACsB,MAAjC5c,EAAelB,wBAAkB,EAAjCkB,EAAelB,mBAAqBa,IAAaid,EACjDjd,GACF,KAQN,IAAK,IAAImc,EAAI,EAAGA,EAAIjN,EAASzT,SAASnS,OAAQ6yB,IAAK,CACjD,MAAMzgB,EAAMwT,EAASzT,SAAS0gB,GAI9B,GAFAzgB,EAAIqE,cAAgB,GAEhB4c,EAAsBrzB,OACxB,IAAK,IAAI2hB,EAAI,EAAGA,EAAI0R,EAAsBrzB,OAAQ2hB,IAAK,CACrD8R,EAAsBJ,EAAsB1R,GAC5C,MAAMlf,EAAKgxB,EAAoBhxB,GAG/B2P,EAAIqE,cAAchU,GAAMgxB,EAAoBjd,SAC1CpE,EACA3P,EACAgxB,EAAoBlO,eACpBqO,IACExhB,EAAIyH,kBAAkBpX,GAAMmxB,CAAU,GAG5C,CAGF,GAAIN,EAAsBtzB,OAAQ,CAChC,IAAK,IAAI2hB,EAAI,EAAGA,EAAI2R,EAAsBtzB,OAAQ2hB,IAAK,CACrD+R,EAAsBJ,EAAsB3R,GAC5C,MAAMlf,EAAKixB,EAAoBjxB,GAE/B,GACEixB,EAAoBld,SAClBpE,EACA3P,EACAixB,EAAoBnO,eACpBqO,IACExhB,EAAIyH,kBAAkBpX,GAAMmxB,CAAU,IAG1C,CACAxhB,EAAIqE,cAAcod,YAAa,EAC/B,KACF,CACF,EAEqC,IAAjCzhB,EAAIqE,cAAcod,aACpBzhB,EAAIqE,cAAcod,YAAa,EAEnC,CACF,CAaA,OAAO3E,EAAWtJ,EAASvD,MAXHjQ,IAEtB,IAAK,IAAIuP,EAAI,EAAGA,EAAIoR,EAAc/yB,OAAQ2hB,IACxC,IAA6C,IAAzCvP,EAAIqE,cAAcsc,EAAcpR,IAClC,OAAO,EAGX,OAAO,CAAI,GAIoC5f,EAAM,GAEzD,CACErD,KAAK8H,EACLhG,MAAOA,KAAA,IAAA+C,EAAA,OAA4BA,OAA5BA,EAAMxB,EAAMyB,QAAQC,UAAQF,EAAIxB,EAAMyB,QAAQoe,UAAU,EAC/D5gB,SAAUA,KACRe,EAAMme,qBAAqB,GAIrC,uBCtJO,WAGL,OAAOne,GACL9B,GACE,IAAM,CAAC8B,EAAM2D,WAAWiX,SAAU5a,EAAMkc,2BACxC,CAACtB,EAAUiJ,KACT,IAAKA,EAASvD,KAAKriB,SAAW2c,EAAS3c,OACrC,OAAO4lB,EAIT,MAAMkO,EAAmBnX,EAASvW,QAAOF,GACvCnE,EAAMwL,UAAUrH,KAGZ6tB,EAAgC,GAChCC,EAA8C,CAAA,EAO9CC,EAAqB,SACzB5R,EACApgB,EACAssB,GAIA,QALK,IAALtsB,IAAAA,EAAQ,GAKJA,GAAS6xB,EAAiB9zB,OAC5B,OAAOqiB,EAAKld,KAAIiN,IACdA,EAAInQ,MAAQA,EAEZ8xB,EAAgBj0B,KAAKsS,GACrB4hB,EAAgB5hB,EAAI3P,IAAM2P,EAEtBA,EAAI2B,UACN3B,EAAI2B,QAAUkgB,EAAmB7hB,EAAI2B,QAAS9R,EAAQ,EAAGmQ,EAAI3P,KAGxD2P,KAIX,MAAMlM,EAAmB4tB,EAAiB7xB,GAGpCiyB,EAsHhB,SAAwC7R,EAAoBnc,GAC1D,MAAMiuB,EAAW,IAAIza,IAErB,OAAO2I,EAAKne,QAAO,CAACiB,EAAKiN,KACvB,MAAMgiB,EAAU,GAAEhiB,EAAIkM,iBAAiBpY,KACjCmuB,EAAWlvB,EAAIiuB,IAAIgB,GAMzB,OALKC,EAGHA,EAASv0B,KAAKsS,GAFdjN,EAAIguB,IAAIiB,EAAQ,CAAChiB,IAIZjN,CAAG,GACTgvB,EACL,CAnI+BG,CAAQjS,EAAMnc,GAG7BquB,EAAwBr1B,MAAM+c,KAAKiY,EAAaM,WAAWrvB,KAC/D,CAAAhD,EAA+BrB,KAAU,IAAvC2zB,EAAeC,GAAYvyB,EACvBM,EAAM,GAAEyD,KAAYuuB,IACxBhyB,EAAK8rB,EAAY,GAAEA,KAAY9rB,IAAOA,EAGtC,MAAMsR,EAAUkgB,EAAmBS,EAAazyB,EAAQ,EAAGQ,GAGrD8Y,EAAWtZ,EACb3C,EAAUo1B,GAAatiB,GAAOA,EAAI2B,UAClC2gB,EAEEtiB,EAAMe,EACVpR,EACAU,EACA8Y,EAAS,GAAIkD,SACb3d,EACAmB,OACAU,EACA4rB,GAuDF,OApDAlqB,OAAOC,OAAO8N,EAAK,CACjBiM,iBAAkBnY,EAClBuuB,gBACA1gB,UACAwH,WACA9G,SAAWvO,IAET,GAAI4tB,EAAiBjxB,SAASqD,GAAW,CACvC,GAAIkM,EAAIoc,aAAahQ,eAAetY,GAClC,OAAOkM,EAAIoc,aAAatoB,GAGN,IAAAyuB,EAApB,GAAID,EAAY,GACdtiB,EAAIoc,aAAatoB,GACkByuB,OADTA,EACxBD,EAAY,GAAGjgB,SAASvO,IAASyuB,OAAIhyB,EAGzC,OAAOyP,EAAIoc,aAAatoB,EAC1B,CAEA,GAAIkM,EAAImM,qBAAqBC,eAAetY,GAC1C,OAAOkM,EAAImM,qBAAqBrY,GAIlC,MAAMhD,EAASnB,EAAMwL,UAAUrH,GACzB0uB,EAAoB,MAAN1xB,OAAM,EAANA,EAAQ0a,mBAE5B,OAAIgX,GACFxiB,EAAImM,qBAAqBrY,GAAY0uB,EACnC1uB,EACAqV,EACAmZ,GAGKtiB,EAAImM,qBAAqBrY,SAPlC,CAQA,IAIJ6N,EAAQnU,SAAQqoB,IACd8L,EAAgBj0B,KAAKmoB,GACrB+L,EAAgB/L,EAAOxlB,IAAMwlB,CAAM,IAU9B7V,CAAG,IAId,OAAOmiB,GAGHG,EAAcT,EAAmBrO,EAASvD,KAAM,GActD,OAZAqS,EAAY90B,SAAQqoB,IAClB8L,EAAgBj0B,KAAKmoB,GACrB+L,EAAgB/L,EAAOxlB,IAAMwlB,CAAM,IAU9B,CACL5F,KAAMqS,EACNviB,SAAU4hB,EACVlhB,SAAUmhB,EACX,GAEH,CACEt1B,KAAK8H,EACLhG,MAAOA,KAAA,IAAA+C,EAAA,OAA4BA,OAA5BA,EAAMxB,EAAMyB,QAAQC,UAAQF,EAAIxB,EAAMyB,QAAQoe,UAAU,EAC/D5gB,SAAUA,KACRe,EAAM2P,QAAO,KACX3P,EAAMsP,qBACNtP,EAAMme,qBAAqB,GAC3B,GAIZ,0BCrKO,SAAsD9f,GAG3D,OAAO2B,GACL9B,GACE,IAAM,CACJ8B,EAAM2D,WAAWoa,WACjB/d,EAAMmQ,2BACNnQ,EAAMyB,QAAQ0N,0BACVvO,EACAZ,EAAM2D,WAAWsL,YAEvB,CAAC8O,EAAY8F,KACX,IAAKA,EAASvD,KAAKriB,OACjB,OAAO4lB,EAGT,MAAM5F,SAAEA,EAAQD,UAAEA,GAAcD,EAChC,IAAIuC,KAAEA,EAAIlQ,SAAEA,EAAQU,SAAEA,GAAa+S,EACnC,MAAMiP,EAAY7U,EAAWD,EACvB+U,EAAUD,EAAY7U,EAI5B,IAAI+U,EAFJ1S,EAAOA,EAAKyH,MAAM+K,EAAWC,GAW3BC,EAPGhzB,EAAMyB,QAAQ0N,qBAOG,CAClBmR,OACAlQ,WACAU,YATkBid,EAAW,CAC7BzN,OACAlQ,WACAU,aAUJkiB,EAAkB5iB,SAAW,GAE7B,MAAM6d,EAAa5d,IACjB2iB,EAAkB5iB,SAASrS,KAAKsS,GAC5BA,EAAI2B,QAAQ/T,QACdoS,EAAI2B,QAAQnU,QAAQowB,EACtB,EAKF,OAFA+E,EAAkB1S,KAAKziB,QAAQowB,GAExB+E,CAAiB,GAE1B,CACEr2B,KAAK8H,EACLhG,MAAOA,KAAA,IAAA+C,EAAA,OAA4BA,OAA5BA,EAAMxB,EAAMyB,QAAQC,UAAQF,EAAIxB,EAAMyB,QAAQoe,UAAU,GAGvE,sBC1DO,WAGL,OAAO7f,GACL9B,GACE,IAAM,CAAC8B,EAAM2D,WAAW6jB,QAASxnB,EAAMyqB,0BACvC,CAACjD,EAAS3D,KACR,IAAKA,EAASvD,KAAKriB,QAAkB,MAAPupB,IAAAA,EAASvpB,OACrC,OAAO4lB,EAGT,MAAMoP,EAAejzB,EAAM2D,WAAW6jB,QAEhC0L,EAA+B,GAG/BC,EAAmBF,EAAa5uB,QAAOyV,IAAI,IAAA2W,EAAA,OAC/CA,OAD+CA,EAC/CzwB,EAAMwL,UAAUsO,EAAKpZ,UAArB+vB,EAAAA,EAA0B7G,YAAY,IAGlCwJ,EAOF,CAAA,EAEJD,EAAiBt1B,SAAQw1B,IACvB,MAAMlyB,EAASnB,EAAMwL,UAAU6nB,EAAU3yB,IACpCS,IAELiyB,EAAeC,EAAU3yB,IAAM,CAC7B4yB,cAAenyB,EAAOlB,UAAUqzB,cAChCC,cAAepyB,EAAOlB,UAAUszB,cAChC9L,UAAWtmB,EAAO+mB,gBACnB,IAGH,MAAMsL,EAAYlT,IAGhB,MAAMmT,EAAa,IAAInT,GAmDvB,OAjDAmT,EAAW3Z,MAAK,CAACkN,EAAMC,KACrB,IAAK,IAAIrH,EAAI,EAAGA,EAAIuT,EAAiBl1B,OAAQ2hB,GAAK,EAAG,CAAA,IAAA8T,EACnD,MAAML,EAAYF,EAAiBvT,GAC7B+T,EAAaP,EAAeC,EAAU3yB,IACtCkzB,EAAwB,OAAlBF,EAAY,MAATL,OAAS,EAATA,EAAW/K,OAAIoL,EAE9B,GAAIC,EAAWL,cAAe,CAC5B,MAGMO,OAA+B,IAHtB7M,EAAKtU,SAAS2gB,EAAU3yB,IAIjCozB,OAA+B,IAHtB7M,EAAKvU,SAAS2gB,EAAU3yB,IAKvC,GAAImzB,GAAcC,EAChB,OAAOD,GAAcC,EACjB,EACAD,EACAF,EAAWL,eACVK,EAAWL,aAEpB,CAGA,IAAIS,EAAUJ,EAAWlM,UAAUT,EAAMC,EAAMoM,EAAU3yB,IAEzD,GAAgB,IAAZqzB,EASF,OARIH,IACFG,IAAY,GAGVJ,EAAWJ,gBACbQ,IAAY,GAGPA,CAEX,CAEA,OAAO/M,EAAKjoB,MAAQkoB,EAAKloB,KAAK,IAIhC00B,EAAW51B,SAAQwS,IAAO,IAAAwB,EACxBqhB,EAAen1B,KAAKsS,GAChBwB,OAAJA,EAAIxB,EAAI2B,UAAJH,EAAa5T,SACfoS,EAAI2B,QAAUwhB,EAASnjB,EAAI2B,SAC7B,IAGKyhB,CAAU,EAGnB,MAAO,CACLnT,KAAMkT,EAAS3P,EAASvD,MACxBlQ,SAAU8iB,EACVpiB,SAAU+S,EAAS/S,SACpB,GAEH,CACEnU,KAAK8H,EACLhG,MAAOA,KAAA,IAAA+C,EAAA,OAA4BA,OAA5BA,EAAMxB,EAAMyB,QAAQC,UAAQF,EAAIxB,EAAMyB,QAAQoe,UAAU,EAC/D5gB,SAAUA,KACRe,EAAMme,qBAAqB,GAIrC,+G7BlCO,WACL"}
\ No newline at end of file
diff --git a/src/core/table.ts b/src/core/table.ts
index c9339ab78e4c309e7c72527b1b32db182b689822..7f1369c99238d5ffc0d8f1f9aed525d7ddd06263 100644
--- a/src/core/table.ts
+++ b/src/core/table.ts
@@ -1,20 +1,20 @@
 import { functionalUpdate, memo, RequiredKeys } from '../utils'
 
 import {
-  Updater,
-  TableOptionsResolved,
-  TableState,
-  Table,
-  InitialTableState,
-  Row,
   Column,
-  RowModel,
   ColumnDef,
-  TableOptions,
-  RowData,
-  TableMeta,
   ColumnDefResolved,
   GroupColumnDef,
+  InitialTableState,
+  Row,
+  RowData,
+  RowModel,
+  Table,
+  TableMeta,
+  TableOptions,
+  TableOptionsResolved,
+  TableState,
+  Updater,
 } from '../types'
 
 //
@@ -84,6 +84,7 @@ export interface CoreOptions<TData extends RowData> {
   columns: ColumnDef<TData, any>[]
   defaultColumn?: Partial<ColumnDef<TData, unknown>>
   renderFallbackValue: any
+  features?: TableFeature[]
 }
 
 export interface CoreInstance<TData extends RowData> {
@@ -116,7 +117,9 @@ export function createTable<TData extends RowData>(
     console.info('Creating Table Instance...')
   }
 
-  let table = { _features: features } as unknown as Table<TData>
+  let table = {
+    _features: [...features, ...(options.features || [])],
+  } as unknown as Table<TData>
 
   const defaultOptions = table._features.reduce((obj, feature) => {
     return Object.assign(obj, feature.getDefaultOptions?.(table))
@@ -148,7 +151,7 @@ export function createTable<TData extends RowData>(
   let queuedTimeout = false
 
   const coreInstance: CoreInstance<TData> = {
-    _features: features,
+    _features: table._features,
     options: {
       ...defaultOptions,
       ...options,
diff --git a/src/types.ts b/src/types.ts
index 3487c535db2e04ccbdde5e3256c28759c5a02728..b3c268907d7b8dbfc9d84d6a8dda7517371b24f0 100644
--- a/src/types.ts
+++ b/src/types.ts
@@ -114,7 +114,7 @@ export interface Table<TData extends RowData>
     PaginationInstance<TData>,
     RowSelectionInstance<TData> {}
 
-interface FeatureOptions<TData extends RowData>
+export interface FeatureOptions<TData extends RowData>
   extends VisibilityOptions,
     ColumnOrderOptions,
     ColumnPinningOptions,